%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: y2021-06-26-09.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: MSI
%%CreationDate: 6/26/2021
%%BoundingBox: 0 0 3901 1557
%%HiResBoundingBox: 0 0 3900.0025 1556.3682
%%CropBox: 0 0 3900.0025 1556.3682
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=0 RasterRes=72 GradRes=72 Text=0 Stroke=0 Clip=0 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-repair">Monstera leaf isolated on white background. Vector Illustration </rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:headline>
            <rdf:Alt>
               <rdf:li>Monstera leaf isolated on white background. Vector Illustration EPS10</rdf:li>
            </rdf:Alt>
         </dc:headline>
         <dc:description>
            <rdf:Alt>
               <rdf:li xml:lang="x-repair">Monstera leaf isolated on white background. Vector Illustration EPS10</rdf:li>
            </rdf:Alt>
         </dc:description>
         <dc:subject>
            <rdf:Bag>
               <rdf:li>botanical</rdf:li>
               <rdf:li>decoration</rdf:li>
               <rdf:li>leaf</rdf:li>
               <rdf:li>natural</rdf:li>
               <rdf:li>botany</rdf:li>
               <rdf:li>plant</rdf:li>
               <rdf:li>closeup</rdf:li>
               <rdf:li>green</rdf:li>
               <rdf:li>monstera</rdf:li>
               <rdf:li>background</rdf:li>
               <rdf:li>beautiful</rdf:li>
               <rdf:li>white</rdf:li>
               <rdf:li>organic</rdf:li>
               <rdf:li>foliage</rdf:li>
               <rdf:li>palm</rdf:li>
               <rdf:li>summer</rdf:li>
               <rdf:li>decorative</rdf:li>
               <rdf:li>nature</rdf:li>
               <rdf:li>color</rdf:li>
               <rdf:li>tree</rdf:li>
               <rdf:li>environment</rdf:li>
               <rdf:li>isolated</rdf:li>
               <rdf:li>beach</rdf:li>
               <rdf:li>growth</rdf:li>
               <rdf:li>exotic</rdf:li>
               <rdf:li>print</rdf:li>
               <rdf:li>jungle</rdf:li>
               <rdf:li>season</rdf:li>
               <rdf:li>fashion</rdf:li>
               <rdf:li>trendy</rdf:li>
               <rdf:li>pattern</rdf:li>
               <rdf:li>bright</rdf:li>
               <rdf:li>branch</rdf:li>
               <rdf:li>houseplant</rdf:li>
               <rdf:li>leaves</rdf:li>
               <rdf:li>large</rdf:li>
               <rdf:li>design</rdf:li>
               <rdf:li>drawing</rdf:li>
               <rdf:li>tropical</rdf:li>
               <rdf:li>vector</rdf:li>
               <rdf:li>rainforest</rdf:li>
               <rdf:li>flower</rdf:li>
               <rdf:li>object</rdf:li>
               <rdf:li>floral</rdf:li>
               <rdf:li>texture</rdf:li>
               <rdf:li>paradise</rdf:li>
               <rdf:li>ecology</rdf:li>
               <rdf:li>ornamental</rdf:li>
               <rdf:li>macro</rdf:li>
               <rdf:li>spring</rdf:li>
            </rdf:Bag>
         </dc:subject>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2019-05-18T09:11:40+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2021-06-26T23:24:07.962+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2019-05-18T09:11:39+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS6 (Macintosh)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>104</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+IMWElDQ19QUk9GSUxFAAEBAAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJ&#xA;AAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1IUCAgAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAz&#xA;ZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtwdAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwA&#xA;AAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABwZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAA&#xA;A9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwAAAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RS&#xA;QwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAAAABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1Q&#xA;YWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAAEnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAS&#xA;c1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#xA;AAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAAARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAA&#xA;AAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNj&#xA;AAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5p&#xA;ZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAALFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBp&#xA;biBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxSZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4g&#xA;SUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDP&#xA;FAAD7cwABBMLAANcngAAAAFYWVogAAAAAABMCVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAA&#xA;AAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JUIGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMA&#xA;KAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBoAG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCy&#xA;ALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIB&#xA;WQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4&#xA;AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYCwQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oD&#xA;ZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQGBBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATT&#xA;BOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYFpgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowG&#xA;nQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeGB5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiq&#xA;CL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJzwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsL&#xA;Igs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxcDHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3e&#xA;DfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EPXg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPUR&#xA;ExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKjEsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSL&#xA;FK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkWbBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUY&#xA;ihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzM&#xA;HPUdHh1HHXAdmR3DHeweFh5AHmoelB6+HukfEx8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUh&#xA;oSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPwJB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3&#xA;JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgpaymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDks&#xA;biyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8kL1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJj&#xA;Mpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5&#xA;BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76DwnPGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/i&#xA;QCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpDfUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVH&#xA;e0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsMS1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9J&#xA;T5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNTX1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX&#xA;4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvlXDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2Cq&#xA;YPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOllPWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFq&#xA;SGqfavdrT2una/9sV2yvbQhtYG25bhJua27Ebx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQU&#xA;dHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+&#xA;wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZ&#xA;if6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6PNo+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSV&#xA;X5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrVm0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFH&#xA;obaiJqKWowajdqPmpFakx6U4pammGqaLpv2nbqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1Erbiu&#xA;La6hrxavi7AAsHWw6rFgsdayS7LCszizrrQltJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsu&#xA;u6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJ&#xA;Osm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+40DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc&#xA;1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hzeot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3m&#xA;lucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe&#xA;9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQA&#xA;BgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8f&#xA;Hx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f&#xA;Hx8fHx8fHx8fHx8fHx8f/8AAEQgAaAEAAwERAAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQF&#xA;AwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMB&#xA;AgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPBUtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdU&#xA;ZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eX&#xA;p7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZqbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUE&#xA;BQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEyobHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PS&#xA;NeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG&#xA;1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/a&#xA;AAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWNfmF+YXlvyF5cl17XpmS3VhHBbxgNNPMwJWKJSVBYgE7k&#xA;ADc4q+f9R/5zb0+4s7m3tvLV3ayTRvHDeJdwmSJmUhZFV4HTkv2gGBHjXFXltv8A85J/mZpd36+l&#xA;eZL66gLEtZatDbXK0rWhlAVv+BVcVe7/AJI/85Sx+dtdh8teZNPh03VrhGazvLZm+rTPGhd0ZJCz&#xA;RHipK/GwPTY0qq8A/OX8+vNfnrXrqO0vp7DyxBIyafp0DtErxqaLLPxI5u9K0bZeg7kqvPdL8zeZ&#xA;NJnE+l6reWEyklZba4lhYEmp3RlPU4q9a8pf85cfmtorRRapLb+YLNKBkvIxHPxHZZ4eB5f5Tq2K&#xA;vqv8ovzh8ufmZos17piPZ39kUTUdNmIZ4WcEqysKB424txag6GoGKs8xV2KpZ5k8zaD5Z0a41nXb&#xA;2Ow021FZbiUmm/RVUVZmboFUEntir5+84/8AOavlm2tpYvKWkXN/fbrHc34WC2Hg/BHeVx/knh88&#xA;VfP/AJh/Pv8AN7Xb17qfzRfWfI1S306Z7KJB2ULAUqB/lEnxOKsk/LH/AJyZ/MLy3r9n+ntWuNb8&#xA;vPIseoW94xnlWIkBpYpWrLzQb05UbofEKvuTUtZ0jS9Nk1PUr2Cz06JQ8l5PIscKqehLsQu9dsVe&#xA;S63/AM5bfk5pk5hgu7zVSuzPY2xKV9mnMAP0YqzX8ufza8k/mFZzz+XLxpJrWn1uynQxXEXL7JZD&#xA;UFTT7Skj6cVZjirsVdirzr83/wA7/K35aWEf11Wv9aulLWOkQsFdlFR6krkH046inKhJPQHeir5o&#xA;1X/nMn81bq5Z7GDTdOt6nhCkDytTtyeR2qfkB8sVZn+Vn/OYmoXmt22k+e7S2itbt1ij1i0DRCJ2&#xA;NFM8bM6lK9WUjj4HFX1SCCKjcHocVYX+an5reW/y48vfpXVyZrmcmPTtOiIE1xKBWgr9lF/bc7L7&#xA;kgFV8o67/wA5hfmzfXjSaabLSLWp9O3igWduPbm8/PkfcBflirP/AMqv+cxGvL+HSfP9tDbLOwSL&#xA;XLUFI0LGg+sREtRfF1NB3XqcVfUMckcsayRsHjcBkdSCrKRUEEdQcVXYq7FXYq7FXxN/zk/rHmnz&#xA;p+bs3lbSrK6v4dAjjgtbG1jeZmlmjSWabggY1JdUr4KMVYMv5A/m76Imn8vPZxN0e9uLWzHb/lol&#xA;i8cVY35i8k695ejR9TNkBIaKltqNheP9KWs8zge5GKph+UrTr+Y2hPACZI7gvxAqWVEZmUdd2UED&#xA;FWI4q9A8k6F+S89mlz5x8z6la3BBMmnWFiKihpxFwxmUkj/isDFXoFnY/wDOG0sf1eXUdcgYin1y&#xA;ZZSRU9aRROP+ExV6f+Qf5XaD5d86T+ZPInmqDzH5TvbOSzvoCyi6t5S6Sw+oqABv7s/aVCK9CN8V&#xA;fQuKuxV8G/8AOSX5xXHnvzbJpmnTn/C2jSNFYoh+C4mX4ZLpqfar9mPwXfYs2KvHcVdirsVetfn5&#xA;+Yt75jl8saKlxIdP0nRNNeaAmite3VpHPK7KPh5Kkip/kkH3xV5Lir0n/nH78w9L8h/mPa6xqzSr&#xA;pU8MtnePDViiS0KuyDd1V1UkDfuKkUxV+gOlatpmr6db6lpl1He2F0gkt7qFg8bqe4YYqisVSjzf&#xA;5n07yt5Y1PzDqJpZ6ZA88ig0LkCiRrX9qRyFX3OKvzb83+a9Y82eZL/zBq8plvr+UyP/ACovRI0r&#xA;0RFAVR4DFUmxV2Kvu/8AJ/8AOHRR+Q9l5m8yXiwjQ4206/ckGSSW1AESICQXlliMZp3J+nFXx/8A&#xA;ml+ZWt/mH5ruNd1M+nDvFp1iDVLe3BJWMeJ3qzdz7UAVYhirsVfX/wDzh3+aV5qunXfkTVJTLNpM&#xA;P1nSJXNW+qcgkkJJ7RM68P8AJNOijFX0rirsVdirsVfI/wCeP/OTV9Z67qnlz8vki00JM0WreYI0&#xA;T6xcTx/u2ERpsqcePqGrH9mg3Kr5s1DU9S1K6e81G7mvbuT+8uLiRpZG+buWY4qi4PLHmObR5tbi&#xA;0u6fRoNpdS9FxbKSaU9WnDlXtXFWRflFeJZ+b1vTHHy0+x1S9FwwclDb6dPImwYLu6qB8J3OKsOM&#xA;SrIod6xEjlJHRzxr1CkrvTsaYq9S0D8m/Jnmu3RPK35hWL6s4FNK1m2fS5S5/YVvUuUc/wCoWxVi&#xA;Xnv8sPO/kW8W28y6ZJaJIaW92tJLeXv+7mSqE034/aHcYqyT/nHLzldeWfza0MrM0djq0y6ZfRA/&#xA;A63R9OPl/qTMjV7UxV+g2KvPf+cgPNU3ln8o/MOoWzmO8mgFlauDRg924gLKR0ZEdmHyxV8G+SPI&#xA;vmbztr0WieXrQ3V5IOUjE8YoYwQGllc7Kgr/AAFTtir2+b8gPyR8o2JH5h/mARqwFZbLSmiDxsOq&#xA;+kY7udv9YovyxV4z56tvy5tNTjHka+1K/s1r6rapBDHuCOPBkPxg9+US/TiqE8n6eutebdPtbgpF&#xA;bSyh76URx8Y7WJTJcycOPD4IEdunbFUD5h1aTWNd1DVZFCNfXEtx6agBUEjlgigbBVB4gDoMVS/F&#xA;XYq+mf8AnCbzTqY8x655WaVn02WyOpRQk1WOaGaOFio7c1mHLx4jFX13ir5n/wCc0/PBtNE0nyZb&#xA;PSXUn+v6gAafuIDxhUjuHlq3zTFXyHirsVVVSCvxyH5ovLvT9op23xVm+p+nH+S2ixRx1E/mHVJh&#xA;K4HMpFZ2EZIoTxXlJQjfemKsDxV2KuxV65/zirqD2n53aHGG4peR3lvJU0BH1WSRR9Lxrir74xV2&#xA;KuxV2Kvg3Vf+cbvzR1H8x9Y0bTtHkjsFvJXh1i5rFZG2kkLRyCY15/ARyVOTA7UxVW822P5YflRP&#xA;+h9Ohi86+erfa+v74ctLsZR1jjtVPGeQdxKzKp671UKvM/NHnbzX5puEn17U5r4xCkELELBEoFOM&#xA;MCBYox7IoxVX8pyG307zNeDZ4tKMUTbfauru3t3G4O5hkk6YqmH5XflnefmHrc+i2Gq2OnaikJmt&#xA;or5pF+sFftJHwR6lR8R703ANDRVL/PP5febPI+sHSfMdi1pcGrQSj4oZkBpzhkHwuv4joQDiqe+T&#xA;vzr83aBZHRdQMfmPypKAlz5f1UevAYx2iZuTwkfslNgd6HFWQ23kbyzq+saF5s/Le4m+o/pawh1T&#xA;QLli15pc09yiRN6i7y27SfCknUbA79FX3nirxj/nLSzF1+VSpJcraWialbSXc7GtIlSTZY6gyMW4&#xA;hUHfrQAsFXx/cfmLrFpo/wDh/wAsySaJoZ3uVt3KXN69KGS8mSjP/kxj4FHYmrFVr8u/yx83/mDr&#xA;P6O8v2vqBKNd30pKW8Cn9qWSh69lFWPYYq9D/ND/AJx98o/l55fafVvPUcvmF0L2mixWVXmamy7T&#xA;lo0r/u11p7V2xV5t5Xc6foHmLWekn1ZNJtH8JtRYiT77SGdT/rYqxnFXYq7FX0P/AM4TWrN+Ymt3&#xA;e/GLSHiO21ZbmBhU/wDPLFX2bir4R/5y3vJ5/wA6L+KVuSWlpaQwDwQxCUj/AIOVjiryfRtE1fW7&#xA;+PT9Js5b69kqVghUu1B1Y06KO7HYd8VZnaeVvyx0IcvOOvz6nfj7ei+W1jmCN/LLqEp+r+x9ESf6&#xA;2Ksd826t5U1C7iHlrQjodjCpB9W6lvJ5iafFI7cI16bKiClTUnaiqYeYZBF+Xvk+3QsGaTVLs1NP&#xA;72WKGqr4f6NSvc18MVYtb3Vza3UV3ayNb3MDrLBNESjpIhDK6sN1YEVBGKvoLyP+cH5Yed0j0P8A&#xA;OHQbI38gEcXmyKIW8jnt9Zkg4SRmv7anh/MoFTiqa/mN/wA4eenp761+XeotqMHD1k0m5ZGeRCOX&#xA;+jXCcUev7KsBt+0Tiry3/nHm3vk/PDyxAkTLcxXcomidSGUJBJ6oZTuCqBvlir9CcVdirsVdirxP&#xA;/nKD84L/AMi+WLbStFLRa7r4lSK9G31aCLiJZFP+/G9QKnhu3UCqr410vQ2n02TU7mGW6ku5jY6R&#xA;aR8jJdXjAFyAoLMsIdeQG5Z0HdqKoPXdCu9EvPqF88X1+Mf6VbROJGgetPTlZap6g/aUMePQ0aoC&#xA;rdtP6fly/iGzT3Vrv3KIk5YVp/MUJ38MVU1XXNCvrO8CXOmXwWK9sJyrwScG+OGeInieLdVYbHti&#xA;r7L/AC080+VPz9/Lmfy95xt0l1/TVVb0rSOUMRSO+tiB8BPRgNq7EcSAVXzF+bv5PeZPy110WeoD&#xA;61pdyWOmarGpEcyD9lh+xIo+0lflUb4qnH/OMD34/O7y8lo7IJfrK3IUkK0K2srsr+IqgO/enfFX&#xA;3/ir57/5zVsrub8uNJuomY21rqqfWIx0/eQSqjn/AFT8P+yxV88/kt+SetfmTqztzOn+W7Fv9yer&#xA;MtQCBy9GGtA0hXfwUbnsGVeieff+cgdG8maY3kL8nreKx02z5RXXmEASPNJSkjwEj4mJ6zNWv7AA&#xA;CnFXzzf399qF5Ne39xJd3lwxee5ndpJHY9WZ2JYn54qmuoyfV/KekWI+1dy3OpSMP2kLLaxK3ujW&#xA;0pH+viqAvNE1aysLHUbq0lhsNTV30+6dSI5licxyem3Q8HWjDtiqBxV2Kvrb/nCHy7JFpXmXzFIn&#xA;wXU0FhbOR/vhWlmp7H1o/uxV9PYq+L/+cyPLIsfzK0zXJeaWGtWaLLKihmEto3py8QSoYiJozQkY&#xA;q8u8wfmCr6QfLflWy/QXlogC6RWD3t+w/wB2X1wApffcRLSNfA9cVQPkL8u/NnnvWhpPlyzNzMAG&#xA;uJ2PCCBD+3NJ0Ubbdz2BOKsn/Nz8qfLn5dwWen/4oj1nzXI9dQ0y2g4w20XEmrymRjzLU4qVBI32&#xA;2qqxnzY9PL/k2D4hw0maR0cAUeTVb01XvQxhOuKvdP8AnH3WPyw8/eXYvyz84aFZjV7aKX9Fakka&#xA;RTzx1aRgsyBZFnj5E7GjqN+hqq8p/Ov8n9T/AC08zixd2u9FvQZdJ1BgAZEWnOOQDYSRkgNTqKHv&#xA;QKpz+Sn/ADkR5j/LydNOvQ+q+VXb95p7N+8gqd3tWbYeJQ/CfY74q92/IryXoutfmX5q/NjTpBNo&#xA;uozyR6BVDG/qXAWS8kZGoylHLRDx+IjbiSq+gcVdirsVdiryj/nIz8o5fzE8mr+jQv8AiLRme40w&#xA;NQesGUCW35H7PqBVKnpyUVoKnFXzt+bWpQ/lvqtj5Y0RDFq+k6Ha2Vrfiga3kvDLPqNylDVbmcyK&#xA;it+wlab8SFXmWk/l75i1Pyhq3nDjHbaBpBVJby4Yr608jKqwQAAmR6uCewHU4qx95wbKKDukkj+/&#xA;xqg/40xV6XB5jtvOf5Q3Hl3VFVvMfkpBe+X7z/dk2mGRUurRievoBxKv+Su32TVVif5cefNW8i+b&#xA;7DzHppJe2bjc29aLPbvtLC3+sOngaHtir9Brmz8m/mZ5Gi+swpqXl/WrdZoeYAZeS/CykVMcsZJF&#xA;RupxV5V+Sf8Azjfd+QPzH1fXb26S8063hMHl6UU9RluD+8eZR9l40Xhts3InFXvuKpR5s8q6L5r8&#xA;u3vl/WofX02/ThMgPFgQQyOjdmRlDKfEYq+NvzW/MW18peWD+Tnki8d9M0ya5i17WQoiku5Hmdmt&#xA;/hJ+FAQkr1HMrQAJsVXheKuxVNPMb/7kzbDpYxRWfEbqHgjCSlfZpQ7fTir2r8n7K2/Mj8nvMv5b&#xA;zKJNe0Mtrfldj9urbSRJ4K0nwt/xlr2xV4EQQSCKEbEHrXFUZo2j6jrWrWmk6ZA1xf30qQW0K9Wd&#xA;zQfIeJ7Yq/SH8tfJFn5I8kaV5atiJDYxf6TOBT1biQl5pN96M7GlegoO2KsmxV4//wA5T+R28zfl&#xA;Vd3VvHzv9AcalDQfEYo1K3C/L0mL/NRir4LxV6fafnPeeWfy8tfKHkdH0q5uw0/mTXQAt3cTuTSK&#xA;BwSY4okovL7R7cd+SrzJ3eR2kkYu7ks7sakk7kknFWd6d5Yi81+efKvlKS+Glrd2djai8lj58GuY&#xA;frK0TlHz5tMAvxCtRiqb/mX+Ufnb8mvMGmavFeC5tROsula3bqUC3ER5iOWNi3B9qhakMvc/EAq+&#xA;i/zJudE/Nz/nG+48ywIourO1OqIo3Nvd2Sn61F404CRRXqCGxV8c+T/KesebfMth5e0iL1b7UJRG&#xA;lfsovV5HI6JGgLN7DFX6QeSfKOl+UPKum+XNLWlpp0IjDkUaRyeUkrf5Ujksfniqd4q7FXYq7FXY&#xA;q/Pr8yY9b/MD8/tX023Q/Xr7V20u1RwRwjt3+rIzDqAscXNvpxVmX/OTHmTRND0zRPyh8sGmmeXE&#xA;SbVXU/3l0yVRXp1b940knbkw7rirzL8ovy/t/P8A55tfLM18dOW6hnkW4CeqecMLSABar3Xffpiq&#xA;Fm03UPIX5gzaXrSESaZcvZ6nHGdpbWVTFOEJH2Z7aQ026NiqSa/o9xouuahpFyQ0+n3EttIw6MYn&#xA;Kcl9mpUYq+1/+cPr24uPyejhlblHZ6jdQ24/lQ8JiP8Ag5WOKvbsVdirsVfnR+d/kPVfJn5i6tY3&#xA;sbfVby4lvdMuT9ma2mkZlIP8y14uPEeFMVYFiqK0xUN/C0ih4o29WVDuGjiHNx9KqcVQ8kjySNJI&#xA;xeRyWdjuSSaknFXpf/ON2uy6P+c3lyRGpHezPYTrvRluY2jUGnhIVb6MVa/5yP8ALFr5d/OHXrWz&#xA;T07S7eO/hTsDdIJJAPb1S9B4Yq+gP+cWfyMfy3Yp528xW/DXb+Kml2kg+K1tpB9tgfsyyj6VXbqW&#xA;AVfRGKuxVbJHHLG0cih43BV0YAqykUIIPUHFX54/np+V13+Xvnq6sEib9CXrNc6JcEHi0DGpi5d3&#xA;hJ4N36N+0MVed4q7FU11a+mTVra7t5WSeC2sDFMlUZHhtYgpU1rVSvXFX3HoV7pP57fkY8N56aX9&#xA;5C1tdmlfq2p24BWUAdBy4yUH7DUxV4V/zj5rOrHyX+Z35drBLcX9zpV3Np1hGOT/AFlomsplUeJa&#xA;SL7sVe4/84+/kPafl1pbanqnC582ahGFu5VoyW0RIb6vE3fcDm3cjbYbqvYMVdirsVdirsVdiry+&#xA;b8ldPtfzps/zL03jykSVNTsGAFJpITCLqE9K8TR1PuwJOxVfB3me51a68x6pdaxHJDqtxdTTX0U4&#xA;IkWaRyzhgwBrU+GKsx/5x7u5LX85/Kksb+mzXhiLVp8M0TxMv+yD0xVk3/OWdvDJ+dl1HZj1Lme1&#xA;sxMigVMxjCquxO5QJ4YqjfP/AOSnmjzT+eGpaB5et/Uigh079J6gwpbWrGyhEjSuK/EzKXCj4mrs&#xA;O+KvrP8ALP8ALzR/y/8AKVt5d0t3lSMma5uZftzXEgHqSEDZQaABR0AHXrirKsVdirsVYj+Z/wCW&#xA;Xl78w/LM2i6tGFmUM+nX6rWW2nIoJE6VX+da0YfQQq/Pzz95B8x+RvMc+g69B6VxF8UMy1MU8RJC&#xA;yxMQOStT5g7GhGKpHbv6aTt0YpwRt+rMARUeKcsVUMVZ9+Qun3V/+cXlOG2Tm8eoR3Djwjt6zSH6&#xA;EQ4q+y7v8jtC1f8ANi4/MDX5BqDRJbpo+llR6MRgjA9Wav8AeN6lSg6DruacVXpeKuxV2KuxVi/5&#xA;i/l15b8/eW5tD1yHkjVe0u0A9a3mpRZYmPQjuOhGxxV8G/mr+T/mv8uNYNrqsXr6ZM5GnatED6E6&#xA;jcDvwkA+0h+io3xVguKrpH5uz0C8jXiOg9h7DFXuP/OLv5vaX5G1LXLDXbgxaPfWpu4Rux+t2oJW&#xA;ONenKaNivuwUYq9L/wCcZfyi8zW/mS9/MvzNFJpk2oeudP0tgySMLp+ck0yndU7Irbn7W1BVV9LY&#xA;q7FXYq7FXYq7FXYq7FXnn5ufkl5U/MnTlS+H1DWYKfVNZgjVplHeOQHj6kZ/lJ2PQjeqrB/In/OI&#xA;vlnyvr9hr0mv3t7f6dKJ7cJFDDH6i14sVYT/AGTQjfqMVZzoX5F+RNN8z3Hmq9jn1/zJcSes2qas&#xA;6Tur7UMcUaQwIVoAhWP4QPhpirOdO0zT9OgMFjAsEbO0sgUbvI5q8jsfid2O7MxJPfFUTirsVdir&#xA;sVdirDPzT/Kzy5+Y3lx9J1ZPSuouT6bqSKDLbSkfaXpyRqDmlaMPAgEKvivWP+ccvza0/wA2Hy5B&#xA;okuoSvV7bULen1OSIGnqeu/BI+u6uQR4dMVer+Tf+cJrqQRz+cddWEGhew0tebU8DcTAKD8oj88V&#xA;e/8AkH8o/IHkOI/4d0tILt14TahKTNdOO4Mr1KqabqlF9sVZjirsVdirsVdirsVQOuaFo+vaXPpW&#xA;s2cV/p1yvGe2mUMjDqD7EHcEbg9MVfFX/OQ3/OPJ/L/j5g0CSS58r3MvpPFJVpbOR6lEZv2o2pRX&#xA;O9djvQlVCflJ/wA4x+cvPEcGq6mToXlySjJdTITcTp1rBCafCR0dqDuOWKvrDyB+Rf5beRljl0jS&#xA;1n1KPf8ASt7Se65eKsQFj/55quKs+xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxVDalpmnanaNZajaxXlo7I7286LJGzROJEJVgQeLoGHuMVRIAAoNg&#xA;OgxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV//9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:InstanceID>xmp.iid:F87F117407206811822AB2A6B75D99AD</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:F87F117407206811822AB2A6B75D99AD</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:0880117407206811822A8072EAEFE205</stRef:instanceID>
            <stRef:documentID>xmp.did:0880117407206811822A8072EAEFE205</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:AC3D3EC9D6DEE611ADF3FA58164AFD71</stEvt:instanceID>
                  <stEvt:when>2017-01-20T09:07:56+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:02801174072068118083F6D0A67B0728</stEvt:instanceID>
                  <stEvt:when>2017-01-20T18:36:10+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:05801174072068118083F6D0A67B0728</stEvt:instanceID>
                  <stEvt:when>2017-01-20T21:11:37+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:577FABBD61206811822AA8872E1D75D1</stEvt:instanceID>
                  <stEvt:when>2019-04-07T19:22:06+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0880117407206811822A8072EAEFE205</stEvt:instanceID>
                  <stEvt:when>2019-05-11T00:15:08+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F87F117407206811822AB2A6B75D99AD</stEvt:instanceID>
                  <stEvt:when>2019-05-18T09:11:40+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Macintosh)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>3900.002441</stDim:w>
            <stDim:h>1556.368164</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Группа образцов по умолчанию</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=255 B=255</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1556.37 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1556.37 li
3900 1556.37 li
3900 0 li
cp
clp
3900 1556.37 mo
0 1556.37 li
0 0 li
3900 0 li
3900 1556.37 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
461.485 1179.92 mo
462.854 1180.99 463.759 1181.41 463.759 1181.41 cv
463.759 1181.41 462.921 1180.86 461.485 1179.92 cv
cp
0 0 0 rgb
f
416.542 955.706 mo
419.32 933.407 423.769 908.465 434.812 889.536 cv
455.076 854.8 495.119 823.921 514.899 814.758 cv
534.679 805.591 567.968 787.258 550.599 804.144 cv
533.232 821.029 452.181 888.572 423.715 941.64 cv
421.251 946.234 418.86 950.94 416.542 955.706 cv
cp
848.751 549.412 mo
881.558 542.658 963.092 547.482 1047.04 601.034 cv
1130.98 654.586 1130.98 658.445 1153.66 674.366 cv
1176.33 690.287 1198.04 734.673 1198.04 734.673 cv
1198.04 734.673 1220.24 668.095 1200.46 585.596 cv
1180.67 503.098 1169.58 482.354 1105.9 464.02 cv
1042.21 445.686 987.696 453.406 942.347 453.406 cv
896.996 453.406 861.778 448.582 871.909 437.968 cv
882.042 427.354 954.133 408.585 1022.43 402.267 cv
1114.94 393.708 1177.78 447.616 1177.78 447.616 cv
1177.78 447.616 1176.33 358.847 1130.02 325.558 cv
1083.7 292.269 1026.77 285.195 978.047 266.539 cv
929.322 247.883 841.998 235.02 795.682 266.539 cv
749.368 298.059 733.985 330.865 730.82 361.258 cv
727.996 388.393 730.761 437.793 723.836 448.428 cv
723.865 448.428 li
723.865 448.428 724.396 450.672 725.139 454.265 cv
727.542 452.822 732.023 450.13 738.235 446.399 cv
742.99 443.431 749.046 440.221 755.863 436.365 cv
757.573 435.409 759.34 434.422 761.157 433.407 cv
762.976 432.394 764.895 431.449 766.839 430.425 cv
770.738 428.403 774.837 426.277 779.115 424.06 cv
783.394 421.844 787.966 419.765 792.633 417.487 cv
794.976 416.364 797.356 415.22 799.774 414.06 cv
802.225 412.97 804.712 411.862 807.233 410.74 cv
817.282 406.161 828.063 401.759 839.264 397.336 cv
844.91 395.244 850.623 393.043 856.456 390.949 cv
862.325 388.966 868.239 386.878 874.25 384.919 cv
880.297 383.077 886.353 381.089 892.504 379.332 cv
895.583 378.469 898.668 377.605 901.757 376.74 cv
906.39 375.442 li
911.058 374.258 li
917.289 372.705 923.499 371.066 929.756 369.746 cv
932.877 369.05 935.993 368.354 939.098 367.662 cv
942.219 367.048 945.333 366.437 948.433 365.83 cv
960.83 363.367 973.13 361.483 985.051 359.862 cv
991.03 359.168 996.89 358.354 1002.66 357.856 cv
1005.54 357.58 1008.4 357.307 1011.21 357.038 cv
1014.03 356.827 1016.82 356.619 1019.57 356.413 cv
1022.32 356.184 1025.04 356.039 1027.71 355.906 cv
1030.39 355.77 1033.02 355.636 1035.61 355.504 cv
1040.8 355.357 1045.81 355.133 1050.62 355.126 cv
1060.25 354.969 1069.07 355.188 1076.88 355.495 cv
1084.69 355.8 1091.49 356.345 1097.08 356.839 cv
1108.26 357.891 1114.58 359.046 1114.58 359.046 cv
1114.58 359.046 1108.25 357.935 1097.07 356.962 cv
1091.47 356.509 1084.68 356.011 1076.87 355.762 cv
1069.06 355.509 1060.24 355.353 1050.63 355.579 cv
1045.82 355.619 1040.82 355.878 1035.64 356.063 cv
1033.05 356.212 1030.42 356.365 1027.75 356.52 cv
1025.08 356.67 1022.36 356.835 1019.62 357.082 cv
1016.88 357.307 1014.09 357.534 1011.28 357.765 cv
1008.47 358.054 1005.62 358.347 1002.74 358.643 cv
996.985 359.181 991.137 360.035 985.175 360.77 cv
973.28 362.472 961.017 364.441 948.66 366.984 cv
945.569 367.614 942.469 368.245 939.355 368.878 cv
936.263 369.59 933.157 370.308 930.051 371.024 cv
923.814 372.386 917.629 374.065 911.425 375.658 cv
906.777 376.872 li
902.163 378.2 li
899.087 379.084 896.016 379.969 892.95 380.851 cv
886.827 382.646 880.8 384.672 874.785 386.552 cv
868.803 388.547 862.919 390.671 857.08 392.689 cv
851.28 394.819 845.599 397.054 839.983 399.18 cv
828.847 403.667 818.132 408.131 808.149 412.766 cv
805.643 413.901 803.173 415.023 800.738 416.127 cv
798.336 417.301 795.971 418.457 793.645 419.594 cv
789.009 421.896 784.467 423.998 780.221 426.237 cv
775.974 428.477 771.905 430.624 768.032 432.667 cv
766.104 433.7 764.196 434.655 762.395 435.676 cv
760.595 436.699 758.845 437.692 757.15 438.655 cv
750.392 442.542 744.418 445.758 739.669 448.77 cv
732.617 453.073 727.801 456.012 725.745 457.268 cv
727.43 465.85 729.66 479.103 729.814 489.782 cv
729.896 489.782 736.481 489.776 747.964 489.766 cv
753.732 489.691 760.774 489.914 768.843 490.093 cv
772.876 490.222 777.176 490.207 781.689 490.47 cv
786.206 490.683 790.956 490.907 795.913 491.141 cv
800.869 491.324 806.022 491.725 811.358 492.104 cv
814.026 492.294 816.738 492.487 819.493 492.683 cv
822.247 492.863 825.042 493.08 827.87 493.373 cv
833.528 493.911 839.342 494.463 845.283 495.028 cv
851.208 495.73 857.263 496.448 863.419 497.178 cv
875.716 498.782 888.398 500.62 901.226 502.848 cv
914.057 505.045 927.029 507.628 939.942 510.463 cv
946.401 511.881 952.815 513.488 959.227 514.984 cv
965.595 516.664 971.959 518.246 978.226 519.999 cv
984.478 521.803 990.714 523.474 996.793 525.412 cv
999.84 526.35 1002.87 527.282 1005.87 528.208 cv
1008.86 529.197 1011.83 530.18 1014.77 531.153 cv
1020.67 533.044 1026.38 535.185 1032 537.148 cv
1037.59 539.245 1043.07 541.246 1048.33 543.367 cv
1058.91 547.503 1068.75 551.819 1077.78 555.895 cv
1086.77 560.07 1094.93 564.067 1102.05 567.813 cv
1109.17 571.577 1115.3 574.995 1120.26 577.952 cv
1130.21 583.844 1135.56 587.726 1135.56 587.726 cv
1135.56 587.726 1130.17 583.899 1120.17 578.113 cv
1115.18 575.208 1109.01 571.857 1101.87 568.169 cv
1094.71 564.498 1086.52 560.59 1077.5 556.513 cv
1068.44 552.535 1058.57 548.327 1047.97 544.305 cv
1042.69 542.242 1037.2 540.3 1031.6 538.265 cv
1025.96 536.363 1020.25 534.286 1014.34 532.458 cv
1011.39 531.517 1008.42 530.566 1005.43 529.61 cv
1002.42 528.717 999.39 527.817 996.341 526.913 cv
990.259 525.042 984.019 523.438 977.763 521.703 cv
971.496 520.019 965.126 518.506 958.76 516.896 cv
952.35 515.468 945.935 513.934 939.483 512.585 cv
926.574 509.89 913.613 507.447 900.799 505.388 cv
887.991 503.299 875.329 501.596 863.062 500.125 cv
856.917 499.46 850.876 498.807 844.965 498.168 cv
839.037 497.665 833.238 497.174 827.598 496.697 cv
824.778 496.433 821.992 496.247 819.244 496.095 cv
816.496 495.928 813.792 495.764 811.133 495.602 cv
805.813 495.277 800.677 494.931 795.735 494.8 cv
790.795 494.618 786.063 494.444 781.563 494.276 cv
777.06 494.061 772.792 494.12 768.782 494.034 cv
760.757 493.938 753.774 493.786 747.989 493.921 cv
736.436 494.051 729.833 494.125 729.833 494.125 cv
729.82 491.954 li
729.646 504.22 724.545 531.896 719.354 565.449 cv
722.439 566.458 726.579 567.812 731.66 569.473 cv
737.606 571.344 744.79 573.954 753.037 576.826 cv
761.319 579.634 770.501 583.179 780.565 586.928 cv
785.614 588.758 790.772 590.927 796.16 593.04 cv
801.534 595.19 807.115 597.349 812.764 599.791 cv
818.423 602.2 824.267 604.605 830.184 607.191 cv
836.083 609.823 842.107 612.512 848.237 615.247 cv
854.308 618.098 860.483 620.996 866.733 623.93 cv
872.96 626.913 879.197 630.069 885.517 633.173 cv
891.813 636.334 898.082 639.665 904.416 642.929 cv
910.681 646.323 916.972 649.729 923.262 653.138 cv
929.472 656.688 935.724 660.164 941.875 663.762 cv
947.982 667.428 954.154 670.932 960.11 674.686 cv
963.106 676.535 966.09 678.376 969.059 680.209 cv
972.022 682.047 974.922 683.957 977.832 685.811 cv
983.661 689.497 989.316 693.302 994.891 697.025 cv
1000.47 700.744 1005.85 704.552 1011.15 708.224 cv
1016.38 712.004 1021.56 715.612 1026.46 719.314 cv
1036.37 726.577 1045.49 733.772 1053.85 740.475 cv
1062.18 747.226 1069.66 753.594 1076.21 759.339 cv
1082.72 765.121 1088.3 770.262 1092.81 774.591 cv
1101.84 783.246 1106.62 788.561 1106.62 788.561 cv
1106.62 788.561 1101.75 783.322 1092.6 774.815 cv
1088.03 770.563 1082.36 765.515 1075.77 759.844 cv
1069.14 754.209 1061.57 747.967 1053.15 741.361 cv
1044.69 734.798 1035.48 727.762 1025.47 720.671 cv
1020.52 717.055 1015.3 713.537 1010.02 709.849 cv
1004.67 706.268 999.248 702.555 993.626 698.934 cv
988.006 695.308 982.309 691.604 976.434 688.019 cv
973.505 686.216 970.586 684.357 967.598 682.573 cv
964.61 680.792 961.609 679.004 958.593 677.207 cv
952.596 673.56 946.386 670.165 940.243 666.606 cv
934.058 663.118 927.77 659.753 921.529 656.314 cv
915.209 653.019 908.887 649.722 902.591 646.441 cv
896.229 643.29 889.933 640.07 883.615 637.022 cv
877.27 634.029 871.012 630.986 864.766 628.114 cv
858.495 625.292 852.304 622.503 846.212 619.76 cv
840.071 617.136 834.031 614.554 828.12 612.027 cv
822.19 609.547 816.336 607.247 810.667 604.939 cv
805.009 602.598 799.42 600.538 794.041 598.483 cv
788.646 596.467 783.483 594.39 778.431 592.648 cv
768.361 589.08 759.165 585.695 750.917 583.043 cv
742.684 580.323 735.563 577.858 729.559 576.072 cv
725.021 574.668 721.229 573.495 718.265 572.576 cv
716.473 584.45 714.709 596.943 713.178 609.671 cv
710.573 631.312 704.39 668.019 697.599 707.603 cv
700.317 709.53 705.136 712.951 711.705 717.612 cv
714.338 719.519 717.32 721.515 720.447 723.897 cv
723.563 726.296 726.931 728.891 730.532 731.661 cv
734.125 734.438 737.951 737.394 741.981 740.511 cv
745.888 743.775 749.996 747.207 754.281 750.787 cv
756.423 752.579 758.609 754.405 760.837 756.268 cv
763.083 758.113 765.206 760.179 767.457 762.177 cv
771.915 766.221 776.525 770.403 781.261 774.703 cv
785.816 779.195 790.497 783.812 795.28 788.528 cv
796.476 789.707 797.678 790.894 798.885 792.085 cv
800.043 793.327 801.207 794.574 802.375 795.829 cv
804.712 798.337 807.07 800.868 809.448 803.424 cv
810.64 804.7 811.834 805.981 813.032 807.269 cv
814.243 808.542 815.433 809.847 816.564 811.212 cv
818.869 813.905 821.188 816.619 823.523 819.348 cv
825.836 822.093 828.248 824.786 830.519 827.62 cv
832.759 830.478 835.007 833.352 837.266 836.236 cv
839.501 839.139 841.85 841.974 844.011 844.964 cv
846.157 847.963 848.311 850.972 850.469 853.986 cv
854.896 859.938 858.861 866.245 862.936 872.47 cv
865.983 877.145 li
868.828 881.943 li
870.723 885.143 872.614 888.336 874.502 891.528 cv
875.474 893.104 876.352 894.734 877.214 896.37 cv
879.833 901.253 li
881.547 904.517 883.365 907.716 884.982 911.003 cv
886.572 914.3 888.157 917.584 889.733 920.854 cv
890.516 922.491 891.323 924.11 892.078 925.752 cv
892.793 927.407 893.506 929.06 894.218 930.709 cv
895.64 934.003 897.053 937.276 898.458 940.527 cv
899.729 943.833 900.993 947.114 902.245 950.369 cv
902.869 951.995 903.49 953.615 904.113 955.229 cv
904.668 956.864 905.225 958.494 905.779 960.113 cv
906.875 963.356 907.965 966.568 909.037 969.747 cv
909.991 972.963 910.934 976.146 911.865 979.29 cv
912.326 980.863 912.785 982.425 913.242 983.979 cv
913.642 985.548 914.036 987.105 914.43 988.655 cv
917.759 1001 919.947 1012.89 921.72 1023.9 cv
923.438 1034.92 924.325 1045.1 924.902 1054.14 cv
925.395 1063.18 925.397 1071.08 925.233 1077.58 cv
925.01 1084.07 924.589 1089.16 924.228 1092.62 cv
923.839 1096.08 923.525 1097.91 923.525 1097.91 cv
923.525 1097.91 923.822 1096.08 924.18 1092.62 cv
924.509 1089.15 924.883 1084.06 925.046 1077.57 cv
925.151 1071.08 925.077 1063.19 924.502 1054.16 cv
923.843 1045.14 922.866 1034.98 921.049 1024 cv
919.179 1013.04 916.887 1001.19 913.455 988.911 cv
913.049 987.372 912.642 985.822 912.23 984.261 cv
911.76 982.714 911.288 981.16 910.814 979.595 cv
909.858 976.471 908.889 973.31 907.91 970.11 cv
906.807 966.951 905.695 963.76 904.572 960.538 cv
904.008 958.927 903.437 957.31 902.867 955.686 cv
902.233 954.084 901.599 952.475 900.961 950.858 cv
899.683 947.628 898.396 944.37 897.099 941.089 cv
895.673 937.863 894.233 934.612 892.786 931.343 cv
892.062 929.711 891.336 928.071 890.609 926.428 cv
889.844 924.802 889.023 923.194 888.231 921.572 cv
886.631 918.331 885.022 915.072 883.407 911.803 cv
881.77 908.547 879.93 905.378 878.191 902.145 cv
875.541 897.308 li
874.667 895.688 873.779 894.072 872.798 892.509 cv
870.89 889.352 868.977 886.188 867.061 883.021 cv
864.189 878.272 li
861.11 873.646 li
856.997 867.486 852.998 861.251 848.538 855.369 cv
846.363 852.387 844.194 849.414 842.031 846.449 cv
839.854 843.496 837.491 840.696 835.242 837.829 cv
832.968 834.979 830.704 832.143 828.451 829.318 cv
826.166 826.521 823.742 823.864 821.415 821.153 cv
819.07 818.46 816.738 815.783 814.424 813.122 cv
813.285 811.776 812.089 810.492 810.873 809.233 cv
809.669 807.963 808.469 806.699 807.273 805.44 cv
804.883 802.923 802.515 800.426 800.168 797.953 cv
798.996 796.719 797.828 795.486 796.667 794.262 cv
795.454 793.087 794.246 791.918 793.046 790.758 cv
788.248 786.11 783.552 781.564 778.979 777.139 cv
774.23 772.905 769.608 768.786 765.137 764.805 cv
762.882 762.835 760.751 760.802 758.502 758.989 cv
756.267 757.155 754.077 755.359 751.929 753.598 cv
747.635 750.075 743.521 746.7 739.608 743.492 cv
735.581 740.437 731.76 737.539 728.169 734.815 cv
724.576 732.1 721.21 729.558 718.101 727.209 cv
714.978 724.872 711.961 722.889 709.314 721.011 cv
703.887 717.234 699.652 714.286 696.793 712.297 cv
687.537 766.208 677.387 824.504 673.727 856.921 cv
675.702 858.92 679.347 862.617 684.385 867.724 cv
686.324 869.747 688.59 871.847 690.82 874.404 cv
693.094 876.911 695.552 879.622 698.18 882.519 cv
699.492 883.966 700.848 885.463 702.244 887.001 cv
703.647 888.532 705.083 890.113 706.458 891.821 cv
709.257 895.189 712.203 898.731 715.277 902.428 cv
716.791 904.296 718.432 906.122 719.929 908.128 cv
721.443 910.117 722.985 912.146 724.553 914.208 cv
726.122 916.271 727.718 918.367 729.336 920.498 cv
730.146 921.563 730.962 922.635 731.783 923.716 cv
732.585 924.812 733.345 925.95 734.135 927.077 cv
737.273 931.604 740.496 936.254 743.79 941.005 cv
746.873 945.897 750.022 950.898 753.226 955.98 cv
754.046 957.239 754.812 958.538 755.545 959.863 cv
756.295 961.18 757.047 962.499 757.802 963.824 cv
759.313 966.476 760.835 969.146 762.364 971.83 cv
763.949 974.486 765.29 977.298 766.735 980.067 cv
768.161 982.848 769.593 985.646 771.033 988.45 cv
772.529 991.227 773.735 994.163 775.091 997.034 cv
776.414 999.918 777.742 1002.81 779.073 1005.71 cv
780.374 1008.63 781.506 1011.62 782.736 1014.57 cv
783.923 1017.54 785.184 1020.49 786.318 1023.49 cv
790.715 1035.52 794.857 1047.65 798.011 1059.87 cv
798.801 1062.92 799.673 1065.93 800.386 1068.97 cv
801.065 1072.02 801.743 1075.06 802.417 1078.07 cv
802.745 1079.58 803.109 1081.08 803.404 1082.58 cv
803.68 1084.09 803.954 1085.6 804.227 1087.1 cv
804.771 1090.09 805.312 1093.07 805.847 1096.03 cv
806.273 1099 806.694 1101.94 807.113 1104.86 cv
807.319 1106.32 807.525 1107.77 807.73 1109.22 cv
807.885 1110.67 808.037 1112.11 808.189 1113.55 cv
808.488 1116.42 808.786 1119.26 809.079 1122.07 cv
809.275 1124.88 809.467 1127.67 809.66 1130.41 cv
809.884 1133.15 809.985 1135.86 810.063 1138.53 cv
810.143 1141.2 810.28 1143.83 810.309 1146.42 cv
810.305 1151.59 810.387 1156.59 810.174 1161.39 cv
809.936 1170.98 809.197 1179.76 808.323 1187.5 cv
807.485 1195.25 806.325 1201.96 805.308 1207.46 cv
803.2 1218.46 801.225 1224.56 801.225 1224.56 cv
801.225 1224.56 803.156 1218.44 805.188 1207.44 cv
806.163 1201.93 807.275 1195.22 808.056 1187.47 cv
808.875 1179.73 809.553 1170.96 809.72 1161.37 cv
809.901 1156.58 809.783 1151.59 809.751 1146.43 cv
809.705 1143.84 809.549 1141.22 809.45 1138.55 cv
809.353 1135.89 809.235 1133.18 808.989 1130.45 cv
808.78 1127.71 808.564 1124.94 808.351 1122.13 cv
808.039 1119.34 807.723 1116.5 807.403 1113.64 cv
807.241 1112.21 807.079 1110.77 806.916 1109.32 cv
806.7 1107.88 806.485 1106.43 806.268 1104.98 cv
805.83 1102.07 805.388 1099.14 804.942 1096.18 cv
804.386 1093.24 803.829 1090.27 803.265 1087.28 cv
802.981 1085.79 802.697 1084.29 802.412 1082.79 cv
802.107 1081.28 801.734 1079.79 801.395 1078.29 cv
800.704 1075.29 800.006 1072.27 799.306 1069.24 cv
798.577 1066.21 797.683 1063.21 796.874 1060.17 cv
793.645 1048.02 789.43 1035.96 784.968 1024 cv
783.814 1021.03 782.539 1018.1 781.333 1015.15 cv
780.089 1012.22 778.939 1009.25 777.624 1006.35 cv
776.277 1003.47 774.937 1000.6 773.598 997.731 cv
772.225 994.883 771.006 991.969 769.494 989.216 cv
768.041 986.432 766.596 983.659 765.154 980.897 cv
763.697 978.147 762.345 975.36 760.748 972.728 cv
759.205 970.063 757.672 967.416 756.149 964.788 cv
755.387 963.474 754.629 962.164 753.873 960.859 cv
753.134 959.548 752.363 958.258 751.535 957.011 cv
748.314 951.974 745.142 947.019 742.04 942.171 cv
738.726 937.463 735.485 932.858 732.33 928.376 cv
731.536 927.26 730.772 926.133 729.966 925.047 cv
729.14 923.978 728.321 922.914 727.508 921.861 cv
725.882 919.753 724.278 917.678 722.704 915.635 cv
721.127 913.593 719.579 911.586 718.059 909.615 cv
716.555 907.633 714.907 905.823 713.388 903.979 cv
710.305 900.32 707.347 896.816 704.537 893.483 cv
703.158 891.793 701.718 890.233 700.315 888.721 cv
698.919 887.203 697.561 885.729 696.247 884.299 cv
693.621 881.442 691.161 878.767 688.887 876.295 cv
686.665 873.782 684.366 871.679 682.42 869.676 cv
678.507 865.765 675.427 862.688 673.31 860.572 cv
666.342 918.993 634.451 1059.29 628.75 1089.22 cv
622.96 1119.61 603.18 1264.34 603.18 1264.34 cv
603.18 1264.34 604.146 1217.55 609.935 1200.66 cv
615.724 1183.78 621.031 1087.29 639.846 1014.44 cv
652.757 964.459 663.849 866.543 672.659 788.346 cv
670.004 789.747 666.603 791.541 662.53 793.691 cv
657.122 796.389 650.914 800.204 643.677 804.406 cv
636.365 808.478 628.523 813.77 619.849 819.348 cv
618.767 820.048 617.674 820.755 616.569 821.469 cv
615.48 822.208 614.412 822.996 613.315 823.769 cv
611.133 825.327 608.909 826.913 606.644 828.526 cv
602.12 831.754 597.388 835.023 592.804 838.752 cv
590.479 840.575 588.121 842.42 585.733 844.288 cv
583.36 846.175 580.887 847.996 578.573 850.065 cv
573.881 854.12 569.029 858.203 564.196 862.466 cv
559.503 866.886 554.729 871.376 549.898 875.922 cv
545.286 880.688 540.558 885.461 535.894 890.366 cv
533.641 892.894 531.381 895.43 529.113 897.974 cv
525.706 901.796 li
524 903.71 li
522.372 905.696 li
520.205 908.351 518.034 911.007 515.861 913.669 cv
512.599 917.662 li
509.497 921.781 li
503.315 930.04 li
501.773 932.104 li
500.318 934.229 li
497.408 938.473 li
495.487 941.306 493.504 944.096 491.642 946.952 cv
489.829 949.841 488.022 952.719 486.22 955.587 cv
485.32 957.022 484.421 958.452 483.526 959.881 cv
482.682 961.341 481.842 962.798 481.004 964.253 cv
479.333 967.163 477.668 970.06 476.015 972.938 cv
474.41 975.843 472.921 978.787 471.382 981.682 cv
469.864 984.584 468.311 987.444 466.96 990.377 cv
465.566 993.287 464.184 996.174 462.814 999.03 cv
461.449 1001.89 460.265 1004.8 459 1007.64 cv
456.43 1013.29 454.304 1018.99 452.099 1024.48 cv
447.986 1035.57 444.335 1046.16 441.585 1056.12 cv
441.224 1057.36 440.87 1058.58 440.515 1059.8 cv
440.197 1061.02 439.883 1062.23 439.573 1063.43 cv
438.956 1065.82 438.352 1068.16 437.766 1070.44 cv
436.722 1075.03 435.652 1079.37 434.869 1083.49 cv
433.153 1091.71 432.036 1098.95 431.226 1104.92 cv
430.398 1110.89 430.021 1115.62 429.762 1118.84 cv
429.533 1122.06 429.499 1123.78 429.499 1123.78 cv
429.499 1123.78 429.522 1122.06 429.729 1118.83 cv
429.967 1115.62 430.314 1110.88 431.103 1104.91 cv
431.874 1098.93 432.944 1091.67 434.606 1083.44 cv
435.364 1079.31 436.406 1074.96 437.421 1070.36 cv
437.994 1068.07 438.581 1065.73 439.182 1063.33 cv
439.487 1062.13 439.793 1060.92 440.104 1059.69 cv
440.449 1058.47 440.797 1057.24 441.149 1056 cv
443.836 1046 447.424 1035.38 451.471 1024.24 cv
453.644 1018.73 455.734 1013.01 458.273 1007.33 cv
459.52 1004.47 460.689 1001.55 462.04 998.676 cv
463.394 995.801 464.759 992.902 466.138 989.978 cv
467.471 987.029 469.009 984.153 470.512 981.232 cv
472.033 978.323 473.507 975.358 475.097 972.436 cv
476.737 969.539 478.386 966.626 480.045 963.695 cv
480.875 962.232 481.707 960.765 482.542 959.294 cv
483.433 957.856 484.324 956.415 485.217 954.972 cv
487.003 952.083 488.799 949.185 490.598 946.276 cv
492.445 943.399 494.417 940.588 496.327 937.731 cv
499.215 933.455 li
500.665 931.316 li
502.195 929.235 li
508.343 920.907 li
511.429 916.752 li
514.674 912.725 li
516.839 910.04 519.001 907.356 521.159 904.681 cv
522.779 902.676 li
524.479 900.745 li
527.873 896.885 li
530.133 894.315 532.386 891.755 534.631 889.203 cv
539.28 884.248 543.995 879.426 548.598 874.61 cv
553.417 870.011 558.182 865.47 562.866 861.002 cv
567.69 856.688 572.537 852.557 577.225 848.453 cv
579.535 846.358 582.006 844.513 584.377 842.603 cv
586.762 840.71 589.119 838.84 591.442 836.995 cv
596.026 833.216 600.754 829.903 605.279 826.629 cv
607.543 824.994 609.767 823.385 611.952 821.808 cv
613.048 821.025 614.117 820.224 615.206 819.475 cv
616.309 818.75 617.404 818.031 618.487 817.321 cv
627.161 811.662 635.003 806.295 642.346 802.142 cv
649.604 797.861 655.857 793.969 661.229 791.244 cv
666.237 788.559 670.219 786.424 673.045 784.908 cv
676.345 755.622 679.318 729.285 681.938 709.533 cv
680.187 710.07 678.086 710.726 675.677 711.504 cv
671.798 712.729 667.088 714.29 661.718 716.143 cv
656.345 717.985 650.313 720.166 643.772 722.641 cv
637.239 725.14 630.18 727.903 622.802 731.038 cv
615.417 734.157 607.686 737.584 599.771 741.313 cv
583.943 748.761 567.395 757.444 551.325 766.951 cv
535.239 776.434 519.65 786.765 505.542 797.142 cv
491.429 807.52 478.803 817.942 468.423 827.364 cv
458.037 836.783 449.884 845.179 444.476 851.317 cv
441.77 854.383 439.744 856.881 438.445 858.645 cv
437.129 860.395 436.606 861.472 436.737 861.505 cv
436.606 861.474 437.112 860.387 438.405 858.618 cv
439.681 856.832 441.671 854.303 444.337 851.193 cv
449.66 844.974 457.698 836.45 467.964 826.866 cv
478.222 817.277 490.722 806.649 504.719 796.041 cv
518.713 785.432 534.199 774.842 550.207 765.088 cv
566.199 755.313 582.69 746.352 598.488 738.638 cv
606.385 734.777 614.105 731.218 621.482 727.975 cv
628.854 724.714 635.914 721.834 642.447 719.225 cv
648.99 716.64 655.025 714.359 660.406 712.427 cv
665.784 710.482 670.488 708.849 674.394 707.552 cv
677.783 706.401 680.537 705.517 682.569 704.867 cv
682.805 703.156 683.037 701.484 683.266 699.892 cv
686.261 679.08 689.302 655.387 692.218 629.987 cv
689.178 630.62 685.351 631.417 680.807 632.363 cv
674.521 633.531 667.106 635.544 658.538 637.691 cv
656.398 638.232 654.189 638.792 651.915 639.367 cv
650.78 639.662 649.621 639.93 648.459 640.259 cv
647.303 640.605 646.13 640.957 644.941 641.313 cv
640.188 642.736 635.191 644.232 629.978 645.793 cv
624.728 647.25 619.422 649.258 613.867 651.151 cv
608.337 653.117 602.542 654.942 596.79 657.358 cv
591.008 659.696 585.004 661.949 578.982 664.524 cv
573.007 667.207 566.902 669.947 560.692 672.733 cv
554.609 675.786 548.424 678.888 542.161 682.028 cv
536 685.358 529.84 688.875 523.588 692.338 cv
517.483 696.054 511.338 699.816 505.214 703.666 cv
502.216 705.691 499.213 707.72 496.208 709.751 cv
493.217 711.804 490.143 713.75 487.262 715.962 cv
478.499 722.431 li
477.051 723.523 475.554 724.552 474.147 725.695 cv
469.912 729.096 li
467.09 731.362 464.273 733.624 461.466 735.878 cv
458.715 738.2 456.034 740.587 453.328 742.928 cv
447.851 747.534 442.78 752.505 437.655 757.292 cv
435.743 759.092 li
433.906 760.954 li
432.683 762.196 431.464 763.432 430.25 764.664 cv
427.846 767.152 425.355 769.525 423.072 772.054 cv
418.484 777.095 413.871 781.962 409.69 787.02 cv
407.583 789.536 405.408 791.944 403.423 794.464 cv
401.426 796.974 399.455 799.451 397.509 801.896 cv
389.873 811.789 382.956 821.389 377.083 830.586 cv
374.044 835.121 371.414 839.642 368.795 843.871 cv
366.337 848.194 363.902 852.24 361.851 856.171 cv
357.582 863.948 354.252 870.933 351.594 876.72 cv
348.939 882.511 347.109 887.173 345.872 890.351 cv
344.663 893.543 344.106 895.275 344.106 895.275 cv
344.106 895.275 344.647 893.539 345.826 890.334 cv
347.033 887.143 348.822 882.462 351.425 876.644 cv
354.03 870.83 357.297 863.807 361.497 855.982 cv
363.515 852.027 365.915 847.956 368.337 843.604 cv
370.917 839.344 373.511 834.789 376.512 830.219 cv
382.311 820.953 389.149 811.268 396.711 801.281 cv
398.638 798.812 400.592 796.309 402.57 793.776 cv
404.538 791.232 406.695 788.793 408.786 786.254 cv
412.93 781.14 417.511 776.217 422.066 771.119 cv
424.334 768.56 426.808 766.155 429.198 763.637 cv
430.405 762.388 431.617 761.137 432.832 759.88 cv
434.66 757.993 li
436.562 756.17 li
441.658 751.318 446.703 746.279 452.158 741.604 cv
454.851 739.23 457.522 736.808 460.265 734.45 cv
463.062 732.159 465.869 729.862 468.682 727.56 cv
472.904 724.105 li
474.307 722.943 475.798 721.896 477.246 720.785 cv
485.988 714.206 li
488.864 711.954 491.931 709.971 494.917 707.879 cv
497.92 705.812 500.919 703.743 503.911 701.68 cv
510.03 697.754 516.173 693.914 522.278 690.121 cv
528.528 686.58 534.69 682.986 540.856 679.581 cv
547.125 676.363 553.316 673.185 559.406 670.059 cv
565.625 667.197 571.742 664.383 577.728 661.628 cv
583.762 658.981 589.78 656.658 595.575 654.251 cv
601.345 651.766 607.157 649.875 612.702 647.845 cv
618.274 645.889 623.598 643.817 628.866 642.303 cv
634.099 640.683 639.114 639.128 643.885 637.653 cv
645.077 637.283 646.255 636.918 647.417 636.559 cv
648.583 636.217 649.752 635.935 650.895 635.626 cv
653.185 635.024 655.412 634.439 657.567 633.872 cv
666.192 631.624 673.7 629.518 679.939 628.3 cv
685.206 627.152 689.504 626.214 692.726 625.513 cv
696.249 594.411 699.57 560.893 702.379 527.03 cv
700.637 527.015 693.733 526.955 682.792 526.86 cv
676.417 526.827 668.66 526.639 659.822 526.885 cv
655.394 526.961 650.685 527.042 645.72 527.129 cv
640.756 527.217 635.533 527.26 630.086 527.563 cv
624.638 527.807 618.961 528.061 613.088 528.323 cv
610.152 528.472 607.16 528.55 604.134 528.761 cv
601.106 528.984 598.033 529.209 594.917 529.439 cv
588.687 529.906 582.285 530.386 575.741 530.875 cv
569.217 531.553 562.55 532.244 555.771 532.948 cv
548.977 533.55 542.132 534.644 535.176 535.545 cv
531.701 536.018 528.203 536.492 524.687 536.969 cv
521.191 537.556 517.677 538.147 514.149 538.74 cv
507.095 539.948 499.962 541.052 492.889 542.612 cv
485.807 544.11 478.643 545.396 471.609 547.229 cv
464.551 548.973 457.448 550.55 450.513 552.639 cv
447.03 553.625 443.553 554.61 440.087 555.592 cv
436.619 556.575 433.235 557.784 429.825 558.862 cv
426.427 559.987 423.021 561.037 419.675 562.21 cv
416.352 563.445 413.044 564.672 409.757 565.893 cv
408.112 566.504 406.474 567.112 404.84 567.718 cv
403.21 568.337 401.625 569.05 400.026 569.708 cv
396.834 571.046 393.666 572.376 390.526 573.696 cv
378.121 579.322 366.251 585.108 355.576 591.615 cv
354.23 592.407 352.891 593.193 351.564 593.973 cv
350.244 594.767 348.983 595.635 347.708 596.453 cv
345.171 598.122 342.644 599.722 340.21 601.371 cv
335.448 604.816 330.784 608.066 326.589 611.558 cv
318.084 618.381 310.732 625.212 304.802 631.809 cv
298.832 638.364 294.132 644.53 290.615 649.84 cv
287.098 655.155 284.801 659.623 283.363 662.716 cv
281.931 665.817 281.388 667.563 281.388 667.563 cv
281.388 667.563 281.91 665.811 283.304 662.688 cv
284.704 659.576 286.947 655.074 290.405 649.704 cv
293.864 644.342 298.497 638.101 304.406 631.45 cv
310.271 624.759 317.564 617.813 326.018 610.856 cv
330.188 607.298 334.829 603.976 339.572 600.456 cv
341.995 598.77 344.51 597.13 347.037 595.425 cv
348.311 594.586 349.566 593.698 350.882 592.883 cv
352.208 592.083 353.541 591.277 354.883 590.466 cv
365.528 583.795 377.378 577.834 389.775 572.024 cv
392.916 570.66 396.083 569.283 399.274 567.897 cv
400.874 567.217 402.458 566.48 404.086 565.84 cv
405.72 565.209 407.36 564.577 409.003 563.944 cv
412.292 562.677 415.6 561.401 418.926 560.118 cv
422.272 558.897 425.683 557.801 429.082 556.628 cv
432.495 555.5 435.884 554.244 439.355 553.212 cv
442.827 552.183 446.306 551.151 449.795 550.116 cv
456.742 547.93 463.854 546.256 470.923 544.417 cv
477.975 542.487 485.15 541.105 492.251 539.511 cv
499.341 537.854 506.49 536.658 513.562 535.356 cv
517.099 534.716 520.624 534.079 524.131 533.445 cv
527.654 532.922 531.16 532.402 534.646 531.885 cv
541.622 530.892 548.491 529.708 555.303 529.018 cv
562.104 528.227 568.794 527.449 575.339 526.688 cv
581.906 526.113 588.329 525.552 594.581 525.005 cv
597.708 524.735 600.792 524.471 603.832 524.21 cv
606.869 523.959 609.87 523.843 612.816 523.658 cv
618.712 523.321 624.41 522.995 629.876 522.683 cv
635.344 522.311 640.596 522.203 645.591 522.051 cv
650.586 521.903 655.324 521.762 659.778 521.629 cv
668.696 521.273 676.425 521.367 682.803 521.319 cv
695.558 521.271 702.844 521.245 702.844 521.245 cv
702.844 521.389 li
704.207 504.581 705.441 487.722 706.507 471.061 cv
704.744 470.326 698.582 467.759 688.948 463.746 cv
683.182 461.373 676.18 458.492 668.147 455.188 cv
660.125 451.87 651.018 448.258 641.095 444.289 cv
636.144 442.279 630.938 440.312 625.575 438.211 cv
620.208 436.115 614.658 433.96 608.916 431.834 cv
597.469 427.498 585.339 423.078 572.723 418.717 cv
566.401 416.575 559.999 414.316 553.44 412.279 cv
550.17 411.234 546.878 410.182 543.572 409.124 cv
540.243 408.138 536.897 407.148 533.54 406.153 cv
526.843 404.089 519.991 402.39 513.153 400.532 cv
509.719 399.658 506.253 398.89 502.799 398.062 cv
497.608 396.845 li
492.381 395.8 li
488.888 395.141 485.422 394.326 481.911 393.792 cv
478.407 393.23 474.903 392.669 471.409 392.109 cv
467.894 391.692 464.388 391.275 460.889 390.859 cv
458.267 390.562 li
455.639 390.378 li
453.889 390.257 452.143 390.135 450.398 390.014 cv
436.456 389.174 422.613 389.589 409.369 390.924 cv
396.107 392.271 383.394 394.654 371.627 397.963 cv
359.857 401.267 349.086 405.607 339.568 410.424 cv
330.028 415.219 321.855 420.688 315.026 426.031 cv
308.18 431.371 302.804 436.745 298.638 441.373 cv
294.498 446.035 291.633 450.029 289.796 452.815 cv
287.976 455.617 287.177 457.217 287.177 457.217 cv
287.177 457.217 287.96 455.61 289.754 452.788 cv
291.569 449.982 294.395 445.958 298.499 441.249 cv
302.627 436.574 307.963 431.137 314.774 425.718 cv
321.573 420.296 329.723 414.728 339.258 409.822 cv
348.768 404.893 359.55 400.428 371.349 396.995 cv
383.145 393.556 395.901 391.039 409.222 389.559 cv
422.558 388.087 436.414 387.541 450.498 388.251 cv
452.253 388.355 454.017 388.462 455.78 388.568 cv
458.429 388.727 li
461.072 389.002 li
464.595 389.388 468.131 389.772 471.673 390.159 cv
475.194 390.688 478.723 391.221 482.257 391.752 cv
485.796 392.255 489.284 393.04 492.804 393.671 cv
498.071 394.672 li
503.298 395.845 li
506.777 396.643 510.268 397.383 513.726 398.228 cv
520.608 400.028 527.511 401.671 534.25 403.677 cv
537.631 404.643 540.998 405.605 544.347 406.563 cv
547.676 407.593 550.987 408.616 554.278 409.634 cv
560.88 411.616 567.317 413.819 573.677 415.906 cv
586.369 420.159 598.568 424.474 610.08 428.709 cv
615.852 430.783 621.431 432.889 626.826 434.938 cv
632.217 436.99 637.452 438.913 642.43 440.876 cv
652.403 444.756 661.557 448.287 669.623 451.532 cv
677.695 454.765 684.732 457.582 690.527 459.902 cv
698.462 463.119 704.063 465.39 706.795 466.499 cv
707.071 462.089 707.332 457.697 707.582 453.322 cv
706.184 451.725 704.143 449.371 701.566 446.343 cv
696.407 440.293 689.129 431.586 680.625 420.957 cv
672.093 410.35 662.364 397.807 651.824 384.481 cv
641.264 371.174 629.867 357.072 617.343 344.007 cv
611.055 337.508 604.521 331.235 597.629 325.604 cv
590.764 319.936 583.614 314.862 576.267 310.618 cv
568.96 306.333 561.463 302.944 554.213 300.145 cv
546.941 297.393 539.874 295.294 533.27 293.714 cv
520.046 290.567 508.727 289.408 500.817 288.978 cv
492.895 288.553 488.359 288.844 488.359 288.844 cv
488.359 288.844 492.889 288.506 500.823 288.851 cv
508.743 289.203 520.086 290.246 533.375 293.266 cv
540.011 294.785 547.122 296.816 554.453 299.507 cv
561.762 302.244 569.326 305.57 576.733 309.813 cv
584.155 314 591.427 319.051 598.383 324.681 cv
605.374 330.279 612.007 336.522 618.39 342.99 cv
631.103 355.994 642.673 370.025 653.374 383.24 cv
664.059 396.475 673.902 408.913 682.525 419.417 cv
691.121 429.942 698.468 438.557 703.663 444.532 cv
705.266 446.379 706.641 447.944 707.81 449.269 cv
707.833 448.883 707.856 448.493 707.876 448.106 cv
712.218 364.161 704.5 321.223 645.159 300.478 cv
585.817 279.732 528.888 264.776 503.803 266.706 cv
478.715 268.637 470.03 285.04 476.303 290.83 cv
482.574 296.619 479.197 287.934 496.564 292.759 cv
513.934 297.583 581.959 315.916 581.475 320.258 cv
580.994 324.6 558.319 319.294 534.679 313.987 cv
511.039 308.68 472.443 311.575 435.777 309.645 cv
399.112 307.714 367.752 304.338 333.981 341.486 cv
300.208 378.634 278.018 431.703 274.158 448.106 cv
270.298 464.51 268.851 504.07 278.981 498.281 cv
289.112 492.492 339.771 466.923 397.181 461.616 cv
454.592 456.309 508.626 450.52 537.09 455.826 cv
565.555 461.133 580.512 466.921 574.723 472.229 cv
568.932 477.536 436.741 477.054 376.919 502.141 cv
317.096 527.228 251.483 574.508 251 620.34 cv
250.518 666.172 267.403 718.276 294.901 713.933 cv
322.401 709.591 385.121 662.313 417.445 648.803 cv
449.768 635.294 515.863 602.489 537.09 595.734 cv
558.319 588.98 593.055 582.708 591.125 595.251 cv
589.195 607.795 488.846 638.671 444.943 671.478 cv
401.041 704.285 342.183 770.376 326.745 791.602 cv
311.305 812.831 292.009 821.996 308.894 867.347 cv
325.78 912.698 368.234 951.292 368.234 951.292 cv
368.234 951.292 358.103 936.819 379.33 894.847 cv
400.559 852.875 443.014 786.296 456.523 772.787 cv
470.032 759.278 488.365 744.324 488.365 753.973 cv
488.365 763.62 431.917 808.489 414.548 886.646 cv
405.36 927.995 402.924 963.666 403.597 984.885 cv
386.837 1026.36 377.211 1066.54 380.777 1080.1 cv
385.603 1098.43 405.383 1136.06 415.996 1146.67 cv
425.03 1155.71 453.274 1174.52 461.485 1179.92 cv
453.958 1174.07 432.329 1148.86 469.066 1068.03 cv
512.486 972.508 547.223 942.598 555.906 934.877 cv
564.59 927.161 589.195 905.45 590.643 919.923 cv
592.09 934.397 568.932 990.842 551.564 1027.51 cv
534.195 1064.18 503.803 1093.12 494.154 1142.33 cv
484.504 1191.54 491.259 1197.81 497.53 1204.08 cv
503.803 1210.35 552.528 1229.65 564.59 1247.02 cv
576.652 1264.38 591.608 1279.34 617.661 1275 cv
643.711 1270.66 704.5 1265.83 706.911 1260.04 cv
709.324 1254.25 709.806 1163.55 702.569 1124.47 cv
695.333 1085.39 683.755 1033.78 704.5 1027.02 cv
725.246 1020.27 752.746 1059.34 762.876 1094.08 cv
773.007 1128.82 778.315 1176.1 767.22 1213.24 cv
756.122 1250.39 718.973 1264.39 718.973 1264.39 cv
718.973 1264.39 763.84 1265.35 801.471 1244.6 cv
839.102 1223.86 841.515 1220.48 841.515 1220.48 cv
841.515 1220.48 868.049 1153.42 854.542 1086.36 cv
841.033 1019.3 809.673 951.761 786.517 920.4 cv
763.358 889.041 729.104 846.586 749.368 836.454 cv
769.631 826.323 812.087 886.63 817.393 905.927 cv
822.7 925.225 841.515 993.249 853.095 1023.64 cv
864.673 1054.04 879.627 1101.31 884.937 1136.05 cv
890.242 1170.78 891.207 1205.04 884.937 1216.14 cv
878.664 1227.23 857.918 1243.63 857.918 1243.63 cv
857.918 1243.63 947.652 1187.19 979.978 1152.94 cv
1012.3 1118.68 1016.64 1125.91 1016.16 1084.43 cv
1015.68 1042.94 1018.28 1000.97 986.828 949.352 cv
955.373 897.727 885.9 791.114 850.198 756.376 cv
814.499 721.641 774.937 686.818 805.331 679.865 cv
835.726 672.914 862.744 675.325 979.012 782.429 cv
1095.28 889.532 1144.01 941.638 1144.01 941.638 cv
1144.01 941.638 1177.78 899.183 1183.57 847.078 cv
1189.36 794.974 1201.9 766.995 1172.47 736.12 cv
1143.04 705.243 1077.91 651.208 975.152 611.166 cv
872.391 571.122 815.946 556.167 848.751 549.412 cv
cp
f
2348.76 489.696 mo
2307.88 456.587 2270.01 433.229 2274.89 419.2 cv
2284.33 392.112 2256.56 306.084 2145.94 326.827 cv
2035.31 347.569 2006.12 383.677 1996.9 415.944 cv
1987.68 448.21 1977.69 478.173 1977.69 478.173 cv
1977.69 478.173 1977.35 479.259 1976.74 481.236 cv
1976.9 481.201 1977.04 481.173 1977.21 481.136 cv
1978.35 480.825 1979.63 480.375 1981.08 479.922 cv
1982.52 479.458 1984.12 478.945 1985.86 478.387 cv
1986.74 478.132 1987.63 477.785 1988.55 477.396 cv
1989.47 477.021 1990.43 476.633 1991.41 476.232 cv
1993.39 475.43 1995.49 474.575 1997.7 473.676 cv
1998.81 473.225 1999.94 472.764 2001.11 472.292 cv
2002.25 471.783 2003.4 471.206 2004.59 470.647 cv
2009.33 468.385 2014.46 465.934 2019.89 463.342 cv
2025.25 460.604 2030.81 457.521 2036.6 454.437 cv
2039.5 452.883 2042.44 451.302 2045.42 449.702 cv
2048.39 448.091 2051.3 446.283 2054.28 444.557 cv
2060.23 441.06 2066.27 437.507 2072.32 433.954 cv
2078.41 430.481 2084.3 426.678 2090.14 422.99 cv
2095.97 419.303 2101.71 415.673 2107.26 412.161 cv
2112.8 408.619 2118.24 405.336 2123.2 401.913 cv
2128.21 398.557 2132.94 395.383 2137.31 392.454 cv
2154.78 380.734 2166.42 372.922 2166.42 372.922 cv
2166.42 372.922 2154.83 380.813 2137.44 392.652 cv
2133.09 395.613 2128.38 398.819 2123.4 402.21 cv
2118.46 405.669 2113.04 408.988 2107.53 412.57 cv
2101.99 416.121 2096.27 419.792 2090.46 423.52 cv
2084.65 427.249 2078.79 431.095 2072.72 434.611 cv
2066.69 438.209 2060.67 441.805 2054.74 445.347 cv
2051.76 447.095 2048.87 448.923 2045.9 450.559 cv
2042.93 452.18 2040 453.783 2037.11 455.358 cv
2031.32 458.487 2025.78 461.613 2020.43 464.394 cv
2015 467.031 2009.87 469.525 2005.13 471.827 cv
2003.94 472.394 2002.79 472.982 2001.64 473.5 cv
2000.48 473.984 1999.34 474.456 1998.23 474.916 cv
1996.01 475.837 1993.9 476.71 1991.92 477.531 cv
1990.93 477.941 1989.97 478.338 1989.05 478.722 cv
1988.13 479.118 1987.23 479.476 1986.33 479.743 cv
1984.56 480.324 1982.93 480.859 1981.45 481.343 cv
1979.98 481.814 1978.67 482.283 1977.51 482.605 cv
1977.05 482.706 1976.64 482.797 1976.23 482.886 cv
1975.25 486.085 1973.78 490.815 1971.94 496.813 cv
1972.43 495.335 li
1972.43 495.335 1973.75 495.783 1976.24 496.623 cv
1978.72 497.44 1982.36 498.79 1987.03 500.021 cv
1991.66 501.419 1997.42 502.784 2004.05 504.169 cv
2010.7 505.446 2018.26 506.708 2026.57 507.496 cv
2028.65 507.694 2030.77 507.896 2032.94 508.102 cv
2035.11 508.234 2037.32 508.368 2039.57 508.505 cv
2041.81 508.669 2044.1 508.756 2046.43 508.803 cv
2048.76 508.865 2051.12 508.928 2053.52 508.993 cv
2063.11 509.064 2073.23 508.869 2083.69 508.365 cv
2094.16 507.844 2104.97 507.156 2115.95 506.333 cv
2121.45 505.925 2126.99 505.516 2132.54 505.103 cv
2138.09 504.716 2143.71 504.207 2149.3 504.022 cv
2152.09 503.909 2154.88 503.737 2157.68 503.672 cv
2160.49 503.666 2163.29 503.66 2166.08 503.652 cv
2171.68 503.553 2177.23 503.879 2182.75 504.013 cv
2188.26 504.174 2193.71 504.612 2199.11 504.893 cv
2204.5 505.251 2209.82 505.735 2215.05 506.141 cv
2220.27 506.652 2225.41 507.155 2230.44 507.647 cv
2235.46 508.218 2240.37 508.777 2245.15 509.321 cv
2254.7 510.495 2263.72 511.687 2272.03 512.879 cv
2288.65 515.265 2302.45 517.553 2312.1 519.226 cv
2321.75 520.899 2327.24 521.963 2327.24 521.963 cv
2327.24 521.963 2321.74 520.947 2312.08 519.355 cv
2302.42 517.766 2288.6 515.596 2271.96 513.354 cv
2263.64 512.235 2254.62 511.119 2245.06 510.029 cv
2240.29 509.526 2235.37 509.011 2230.35 508.482 cv
2225.33 508.034 2220.19 507.576 2214.97 507.11 cv
2209.74 506.75 2204.43 506.311 2199.04 506 cv
2193.65 505.766 2188.2 505.376 2182.7 505.262 cv
2177.2 505.175 2171.65 504.898 2166.1 505.045 cv
2163.32 505.076 2160.54 505.104 2157.75 505.135 cv
2154.96 505.224 2152.17 505.419 2149.37 505.557 cv
2143.78 505.791 2138.25 506.341 2132.68 506.779 cv
2127.12 507.238 2121.59 507.695 2116.1 508.149 cv
2105.11 509.068 2094.29 509.851 2083.8 510.463 cv
2073.31 511.059 2063.15 511.341 2053.5 511.352 cv
2051.08 511.309 2048.71 511.266 2046.36 511.224 cv
2044.02 511.195 2041.71 511.127 2039.44 510.982 cv
2037.17 510.864 2034.94 510.747 2032.76 510.633 cv
2030.57 510.443 2028.42 510.258 2026.32 510.075 cv
2017.92 509.352 2010.26 508.144 2003.52 506.907 cv
1996.79 505.562 1990.95 504.232 1986.19 502.841 cv
1981.38 501.61 1977.78 500.303 1975.28 499.504 cv
1972.94 498.738 1971.65 498.313 1971.49 498.261 cv
1967.45 511.379 1961.71 529.99 1955.16 551.332 cv
1955.27 551.433 1955.38 551.525 1955.5 551.63 cv
1957.97 553.736 1961.6 556.712 1966.45 560.41 cv
1976.12 567.761 1990.53 577.597 2008.41 588.568 cv
2026.27 599.572 2047.52 611.825 2070.32 624.909 cv
2093.11 637.998 2117.45 651.962 2141.49 666.44 cv
2153.51 673.678 2165.47 681.035 2177.12 688.449 cv
2188.77 695.88 2200.19 703.25 2210.93 710.896 cv
2232.41 726.147 2251.16 742.227 2265.49 757.694 cv
2272.65 765.419 2278.76 772.924 2283.69 779.921 cv
2288.61 786.927 2292.42 793.361 2295.12 798.88 cv
2297.86 804.38 2299.51 808.931 2300.47 812.073 cv
2301.41 815.227 2301.64 816.975 2301.64 816.975 cv
2301.64 816.975 2301.38 815.232 2300.4 812.096 cv
2299.4 808.967 2297.69 804.448 2294.88 799.002 cv
2292.11 793.533 2288.22 787.168 2283.22 780.256 cv
2278.22 773.351 2272.02 765.958 2264.78 758.362 cv
2250.3 743.154 2231.39 727.397 2209.8 712.515 cv
2199.02 705.061 2187.5 697.85 2175.78 690.591 cv
2164.05 683.349 2152.01 676.166 2139.92 669.104 cv
2115.72 654.975 2091.22 641.357 2068.24 628.58 cv
2045.26 615.805 2023.82 603.825 2005.72 593.009 cv
1987.6 582.227 1972.89 572.484 1962.92 565.121 cv
1958.95 562.179 1955.69 559.619 1953.23 557.623 cv
1943.51 589.291 1932.26 626.078 1922.15 659.461 cv
1924.83 661.051 1928.55 663.266 1933.21 666.036 cv
1935.66 667.695 1938.39 669.529 1941.35 671.528 cv
1942.83 672.528 1944.37 673.567 1945.97 674.646 cv
1946.77 675.186 1947.59 675.735 1948.41 676.294 cv
1949.21 676.891 1950.02 677.499 1950.84 678.117 cv
1954.12 680.597 1957.61 683.236 1961.29 686.018 cv
1963.16 687.368 1964.94 688.931 1966.8 690.48 cv
1968.66 692.036 1970.56 693.626 1972.49 695.252 cv
1974.41 696.901 1976.46 698.482 1978.38 700.281 cv
1980.31 702.064 1982.28 703.882 1984.28 705.73 cv
1986.29 707.579 1988.32 709.458 1990.39 711.366 cv
1992.38 713.36 1994.39 715.382 1996.44 717.435 cv
1998.47 719.49 2000.54 721.573 2002.63 723.683 cv
2004.71 725.807 2006.68 728.077 2008.75 730.306 cv
2010.8 732.55 2012.87 734.819 2014.96 737.108 cv
2017.02 739.42 2018.99 741.854 2021.05 744.251 cv
2023.08 746.662 2025.13 749.092 2027.2 751.539 cv
2029.18 754.061 2031.17 756.597 2033.18 759.15 cv
2035.17 761.716 2037.24 764.247 2039.19 766.884 cv
2041.13 769.531 2043.07 772.193 2045.03 774.865 cv
2052.86 785.546 2060.26 796.779 2067.48 808.125 cv
2070.99 813.855 2074.49 819.593 2077.88 825.365 cv
2079.54 828.273 2081.2 831.173 2082.85 834.065 cv
2085.31 838.402 li
2086.1 839.86 2086.89 841.319 2087.67 842.774 cv
2089.24 845.686 2090.81 848.584 2092.36 851.469 cv
2093.9 854.36 2095.35 857.283 2096.83 860.162 cv
2099.84 865.909 2102.6 871.685 2105.34 877.354 cv
2108.11 883.01 2110.61 888.675 2113.17 894.163 cv
2115.58 899.726 2118.04 905.117 2120.25 910.449 cv
2122.49 915.77 2124.66 920.941 2126.64 925.999 cv
2128.68 931.028 2130.54 935.935 2132.33 940.642 cv
2134.13 945.342 2135.74 949.891 2137.31 954.2 cv
2138.81 958.538 2140.3 962.627 2141.58 966.516 cv
2144.21 974.258 2146.34 981.065 2148.06 986.679 cv
2151.48 997.914 2153.11 1004.43 2153.11 1004.43 cv
2153.11 1004.43 2151.41 997.934 2147.87 986.736 cv
2146.09 981.146 2143.89 974.364 2141.17 966.652 cv
2139.86 962.781 2138.33 958.712 2136.78 954.393 cv
2135.16 950.104 2133.5 945.577 2131.66 940.898 cv
2129.82 936.216 2127.91 931.335 2125.81 926.335 cv
2123.78 921.306 2121.56 916.162 2119.27 910.872 cv
2117.01 905.572 2114.49 900.21 2112.02 894.688 cv
2109.4 889.233 2106.85 883.604 2104.03 877.988 cv
2101.23 872.361 2098.41 866.629 2095.36 860.926 cv
2093.85 858.067 2092.37 855.169 2090.8 852.301 cv
2089.22 849.441 2087.63 846.565 2086.03 843.681 cv
2085.23 842.237 2084.43 840.793 2083.63 839.344 cv
2081.13 835.048 li
2079.45 832.183 2077.77 829.309 2076.08 826.426 cv
2072.64 820.711 2069.09 815.028 2065.53 809.359 cv
2058.22 798.134 2050.73 787.024 2042.82 776.481 cv
2040.85 773.846 2038.88 771.218 2036.93 768.604 cv
2034.96 766 2032.87 763.51 2030.87 760.979 cv
2028.85 758.463 2026.84 755.961 2024.85 753.478 cv
2022.77 751.069 2020.7 748.675 2018.65 746.3 cv
2016.59 743.941 2014.6 741.545 2012.53 739.271 cv
2010.43 737.021 2008.35 734.791 2006.29 732.585 cv
2004.22 730.395 2002.23 728.162 2000.15 726.078 cv
1998.06 724.009 1995.99 721.964 1993.94 719.947 cv
1991.89 717.935 1989.87 715.95 1987.89 713.995 cv
1985.81 712.126 1983.78 710.286 1981.77 708.477 cv
1979.77 706.667 1977.8 704.888 1975.87 703.141 cv
1973.95 701.381 1971.9 699.838 1969.99 698.227 cv
1968.06 696.639 1966.16 695.084 1964.31 693.565 cv
1962.45 692.053 1960.68 690.525 1958.81 689.209 cv
1955.14 686.5 1951.66 683.929 1948.4 681.514 cv
1947.58 680.911 1946.77 680.319 1945.98 679.738 cv
1945.16 679.199 1944.36 678.669 1943.57 678.148 cv
1941.99 677.108 1940.47 676.104 1939 675.14 cv
1936.08 673.211 1933.4 671.44 1930.97 669.839 cv
1926.81 667.425 1923.4 665.445 1920.8 663.935 cv
1909.18 702.331 1899.27 735.615 1895.26 750.391 cv
1892.37 761.03 1886.73 782.709 1879.53 810.696 cv
1881.01 812.199 1882.94 814.154 1885.3 816.556 cv
1888.15 819.551 1891.48 823.365 1895.37 827.641 cv
1897.22 829.863 1899.18 832.226 1901.24 834.719 cv
1902.27 835.964 1903.33 837.244 1904.41 838.554 cv
1905.44 839.906 1906.5 841.289 1907.57 842.7 cv
1909.69 845.551 1912.03 848.418 1914.2 851.574 cv
1916.39 854.71 1918.66 857.955 1920.98 861.29 cv
1923.19 864.706 1925.46 868.215 1927.77 871.801 cv
1929.96 875.463 1932.2 879.205 1934.48 883.012 cv
1936.62 886.891 1938.81 890.835 1941.02 894.826 cv
1943.09 898.888 1945.21 902.986 1947.29 907.152 cv
1949.25 911.372 1951.34 915.571 1953.23 919.881 cv
1955.09 924.206 1957.09 928.49 1958.81 932.893 cv
1961.47 939.455 li
1962.35 941.646 1963.15 943.867 1963.99 946.063 cv
1965.68 950.452 1967.22 954.88 1968.73 959.275 cv
1970.3 963.651 1971.61 968.077 1973.04 972.401 cv
1974.35 976.765 1975.68 981.069 1976.86 985.331 cv
1979.25 993.854 1981.38 1002.15 1983.17 1010.06 cv
1984.11 1014 1984.88 1017.87 1985.69 1021.6 cv
1986.41 1025.35 1987.19 1028.95 1987.78 1032.44 cv
1989.08 1039.4 1990.05 1045.82 1990.9 1051.5 cv
1991.68 1057.2 1992.31 1062.17 1992.73 1066.28 cv
1993.61 1074.49 1993.82 1079.21 1993.82 1079.21 cv
1993.82 1079.21 1993.56 1074.49 1992.6 1066.29 cv
1992.14 1062.2 1991.45 1057.23 1990.61 1051.55 cv
1989.71 1045.87 1988.68 1039.47 1987.31 1032.53 cv
1986.68 1029.05 1985.87 1025.46 1985.11 1021.72 cv
1984.26 1018 1983.46 1014.15 1982.48 1010.22 cv
1980.6 1002.34 1978.4 994.083 1975.93 985.601 cv
1974.7 981.358 1973.33 977.077 1971.98 972.738 cv
1970.52 968.435 1969.16 964.036 1967.55 959.687 cv
1966 955.316 1964.42 950.919 1962.68 946.561 cv
1961.82 944.376 1961.01 942.173 1960.11 939.998 cv
1957.39 933.483 li
1955.64 929.113 1953.6 924.862 1951.7 920.578 cv
1949.77 916.305 1947.65 912.142 1945.65 907.96 cv
1943.55 903.833 1941.39 899.777 1939.29 895.755 cv
1937.05 891.808 1934.84 887.906 1932.66 884.07 cv
1930.36 880.308 1928.1 876.611 1925.88 872.991 cv
1923.54 869.451 1921.26 865.985 1919.03 862.613 cv
1916.68 859.326 1914.4 856.125 1912.2 853.031 cv
1910.01 849.923 1907.66 847.097 1905.53 844.29 cv
1904.45 842.901 1903.39 841.54 1902.35 840.211 cv
1901.26 838.922 1900.2 837.663 1899.16 836.435 cv
1897.09 833.988 1895.12 831.665 1893.27 829.48 cv
1889.38 825.291 1886.08 821.581 1883.22 818.627 cv
1881.45 816.872 1879.94 815.373 1878.66 814.092 cv
1854.54 907.884 1813.99 1068.19 1799.2 1127.35 cv
1779.73 1205.2 1772.56 1291.24 1772.56 1291.24 cv
1772.56 1291.24 1770.52 1210.83 1797.15 1102.25 cv
1813.65 1034.95 1833.51 948.967 1849.63 878.55 cv
1848.27 879.047 1846.75 879.603 1845.07 880.224 cv
1841.26 881.646 1836.85 883.671 1831.67 885.828 cv
1829.09 886.931 1826.44 888.331 1823.59 889.681 cv
1820.75 891.065 1817.74 892.457 1814.73 894.179 cv
1811.71 895.856 1808.51 897.538 1805.28 899.4 cv
1802.08 901.343 1798.79 903.352 1795.4 905.418 cv
1792.06 907.562 1788.71 909.893 1785.23 912.205 cv
1781.79 914.549 1778.42 917.175 1774.91 919.721 cv
1771.43 922.304 1768.07 925.161 1764.57 927.929 cv
1761.12 930.768 1757.77 933.806 1754.32 936.777 cv
1750.99 939.884 1747.62 943.009 1744.31 946.216 cv
1742.68 947.856 1741.06 949.498 1739.43 951.144 cv
1737.79 952.781 1736.16 954.425 1734.61 956.146 cv
1731.47 959.553 1728.28 962.918 1725.31 966.45 cv
1723.8 968.198 1722.3 969.943 1720.8 971.684 cv
1719.35 973.466 1717.9 975.243 1716.46 977.013 cv
1713.53 980.513 1710.87 984.181 1708.12 987.711 cv
1705.46 991.311 1702.85 994.891 1700.37 998.451 cv
1697.92 1002.05 1695.45 1005.55 1693.22 1009.09 cv
1692.08 1010.85 1690.96 1012.59 1689.85 1014.31 cv
1688.78 1016.05 1687.72 1017.77 1686.67 1019.47 cv
1684.56 1022.86 1682.67 1026.25 1680.76 1029.48 cv
1678.95 1032.77 1677.12 1035.91 1675.52 1039 cv
1672.2 1045.13 1669.41 1050.87 1666.95 1055.97 cv
1664.56 1061.1 1662.52 1065.6 1660.96 1069.36 cv
1657.79 1076.84 1656.3 1081.25 1656.3 1081.25 cv
1656.3 1081.25 1657.72 1076.82 1660.78 1069.28 cv
1662.28 1065.49 1664.25 1060.97 1666.57 1055.79 cv
1668.95 1050.65 1671.65 1044.85 1674.88 1038.66 cv
1676.44 1035.54 1678.22 1032.37 1679.98 1029.05 cv
1681.85 1025.78 1683.69 1022.35 1685.76 1018.93 cv
1686.78 1017.21 1687.81 1015.46 1688.86 1013.7 cv
1689.95 1011.95 1691.05 1010.19 1692.16 1008.41 cv
1694.35 1004.82 1696.76 1001.27 1699.16 997.625 cv
1701.61 994.011 1704.16 990.381 1706.78 986.725 cv
1709.48 983.137 1712.1 979.408 1714.99 975.847 cv
1716.41 974.045 1717.83 972.237 1719.27 970.423 cv
1720.75 968.651 1722.23 966.873 1723.72 965.093 cv
1726.66 961.493 1729.81 958.061 1732.92 954.581 cv
1734.45 952.823 1736.07 951.144 1737.69 949.466 cv
1739.3 947.788 1740.92 946.108 1742.52 944.431 cv
1745.82 941.15 1749.16 937.947 1752.47 934.761 cv
1755.9 931.712 1759.24 928.597 1762.67 925.676 cv
1766.16 922.829 1769.51 919.891 1772.99 917.229 cv
1776.49 914.603 1779.85 911.895 1783.3 909.47 cv
1786.77 907.078 1790.12 904.671 1793.47 902.447 cv
1796.87 900.303 1800.18 898.214 1803.38 896.199 cv
1806.63 894.263 1809.83 892.509 1812.88 890.761 cv
1815.9 888.969 1818.93 887.508 1821.79 886.061 cv
1824.66 884.646 1827.32 883.188 1829.93 882.021 cv
1835.17 879.736 1839.72 877.581 1843.51 876.096 cv
1846.47 874.957 1848.93 874.014 1850.84 873.281 cv
1860.21 832.329 1868.23 797.06 1873.46 774.463 cv
1876.24 762.47 1880.14 746.702 1884.85 728.521 cv
1882.65 729.241 1880.08 730.085 1877.13 731.051 cv
1874.55 731.924 1871.63 732.801 1868.55 733.92 cv
1865.46 735.037 1862.11 736.242 1858.54 737.529 cv
1854.98 738.83 1851.17 740.159 1847.18 741.662 cv
1843.21 743.225 1839.04 744.87 1834.69 746.588 cv
1832.51 747.447 1830.29 748.323 1828.02 749.216 cv
1825.76 750.119 1823.5 751.139 1821.18 752.122 cv
1816.55 754.114 1811.75 756.174 1806.83 758.292 cv
1801.97 760.552 1796.97 762.879 1791.87 765.254 cv
1790.6 765.85 1789.31 766.448 1788.02 767.048 cv
1786.75 767.686 1785.48 768.329 1784.19 768.975 cv
1781.63 770.266 1779.03 771.568 1776.42 772.881 cv
1773.82 774.217 1771.15 775.473 1768.55 776.902 cv
1765.93 778.317 1763.3 779.744 1760.66 781.176 cv
1758.01 782.613 1755.35 784.061 1752.68 785.512 cv
1750.05 787.045 1747.4 788.583 1744.74 790.126 cv
1742.09 791.674 1739.43 793.226 1736.76 794.786 cv
1734.13 796.42 1731.5 798.061 1728.86 799.705 cv
1726.23 801.363 1723.56 802.965 1720.95 804.677 cv
1713.16 809.864 li
1702.75 816.759 1692.7 824.165 1682.94 831.634 cv
1680.5 833.5 1678.15 835.463 1675.77 837.36 cv
1673.41 839.293 1670.99 841.125 1668.73 843.107 cv
1664.17 847.042 1659.57 850.829 1655.29 854.821 cv
1646.53 862.596 1638.54 870.632 1631.07 878.339 cv
1623.71 886.157 1616.99 893.77 1611.07 901.04 cv
1605.2 908.341 1599.98 915.178 1595.67 921.456 cv
1591.34 927.725 1587.74 933.308 1584.97 938.03 cv
1579.39 947.445 1576.92 953.212 1576.92 953.212 cv
1576.92 953.212 1579.32 947.419 1584.8 937.934 cv
1587.52 933.173 1591.06 927.544 1595.32 921.216 cv
1599.57 914.878 1604.71 907.972 1610.51 900.591 cv
1616.35 893.234 1623 885.529 1630.29 877.609 cv
1637.69 869.794 1645.61 861.646 1654.3 853.745 cv
1658.55 849.688 1663.12 845.838 1667.65 841.837 cv
1669.9 839.822 1672.31 837.956 1674.65 835.991 cv
1677.01 834.06 1679.35 832.063 1681.78 830.16 cv
1691.48 822.55 1701.5 815.002 1711.87 807.956 cv
1719.63 802.658 li
1722.23 800.91 1724.89 799.271 1727.51 797.578 cv
1730.14 795.894 1732.77 794.216 1735.39 792.542 cv
1738.05 790.949 1740.71 789.356 1743.35 787.774 cv
1746 786.19 1748.64 784.615 1751.27 783.048 cv
1753.94 781.557 1756.59 780.071 1759.23 778.597 cv
1761.87 777.125 1764.5 775.665 1767.11 774.214 cv
1769.71 772.746 1772.38 771.454 1774.98 770.081 cv
1777.59 768.731 1780.18 767.393 1782.74 766.065 cv
1784.02 765.4 1785.3 764.742 1786.57 764.085 cv
1787.86 763.468 1789.14 762.853 1790.41 762.239 cv
1795.51 759.792 1800.5 757.398 1805.36 755.07 cv
1810.29 752.884 1815.08 750.758 1819.71 748.702 cv
1822.04 747.687 1824.3 746.638 1826.56 745.703 cv
1828.82 744.779 1831.05 743.873 1833.22 742.983 cv
1837.58 741.208 1841.75 739.506 1845.72 737.887 cv
1849.72 736.33 1853.55 734.945 1857.13 733.593 cv
1860.71 732.254 1864.06 731 1867.17 729.842 cv
1870.27 728.675 1873.15 727.771 1875.74 726.866 cv
1880.03 725.404 1883.55 724.206 1886.21 723.299 cv
1896.16 685.19 1909.39 637.465 1923.27 591.509 cv
1919.75 591.664 1914.56 591.894 1907.93 592.186 cv
1906.29 592.268 1904.55 592.315 1902.74 592.435 cv
1900.94 592.582 1899.05 592.735 1897.09 592.895 cv
1893.16 593.215 1888.9 593.562 1884.36 593.932 cv
1882.09 594.14 1879.74 594.255 1877.33 594.554 cv
1874.92 594.838 1872.44 595.131 1869.9 595.432 cv
1864.81 596.048 1859.45 596.629 1853.88 597.356 cv
1848.32 598.214 1842.53 599.107 1836.54 600.031 cv
1835.04 600.263 1833.53 600.495 1832.01 600.73 cv
1830.49 600.987 1828.97 601.3 1827.43 601.585 cv
1824.35 602.17 1821.23 602.764 1818.06 603.366 cv
1814.9 603.973 1811.69 604.59 1808.45 605.213 cv
1805.22 605.941 1801.96 606.678 1798.65 607.422 cv
1795.35 608.167 1792.02 608.919 1788.65 609.679 cv
1785.28 610.449 1781.93 611.401 1778.52 612.265 cv
1775.11 613.151 1771.68 614.045 1768.23 614.946 cv
1764.76 615.81 1761.34 616.934 1757.86 617.926 cv
1754.39 618.951 1750.9 619.981 1747.39 621.017 cv
1743.87 622.041 1740.41 623.278 1736.89 624.406 cv
1733.38 625.562 1729.86 626.722 1726.33 627.886 cv
1722.83 629.148 1719.32 630.415 1715.81 631.684 cv
1712.3 632.978 1708.76 634.196 1705.27 635.557 cv
1694.8 639.707 li
1687.79 642.382 1680.95 645.484 1674.06 648.4 cv
1670.61 649.834 1667.25 651.461 1663.87 653.007 cv
1660.49 654.57 1657.12 656.129 1653.77 657.681 cv
1640.49 664.184 1627.5 670.741 1615.25 677.688 cv
1602.91 684.49 1591.3 691.602 1580.38 698.493 cv
1569.52 705.48 1559.4 712.321 1550.26 718.917 cv
1541.13 725.517 1532.88 731.75 1525.75 737.497 cv
1518.58 743.196 1512.49 748.372 1507.55 752.708 cv
1497.65 761.384 1492.4 766.781 1492.4 766.781 cv
1492.4 766.781 1497.6 761.333 1507.41 752.56 cv
1512.32 748.176 1518.36 742.939 1525.48 737.166 cv
1532.56 731.347 1540.76 725.029 1549.84 718.335 cv
1558.93 711.644 1568.99 704.696 1579.8 697.595 cv
1590.67 690.588 1602.24 683.352 1614.53 676.418 cv
1626.74 669.34 1639.7 662.641 1652.95 655.994 cv
1656.3 654.406 1659.66 652.811 1663.03 651.211 cv
1666.41 649.627 1669.76 647.963 1673.21 646.492 cv
1680.09 643.501 1686.92 640.323 1693.93 637.571 cv
1704.39 633.308 li
1707.89 631.909 1711.43 630.651 1714.94 629.319 cv
1718.45 628.011 1721.96 626.707 1725.46 625.405 cv
1728.99 624.203 1732.52 623.005 1736.03 621.812 cv
1739.55 620.646 1743.02 619.37 1746.54 618.307 cv
1750.05 617.232 1753.55 616.164 1757.02 615.102 cv
1760.51 614.072 1763.94 612.909 1767.41 612.009 cv
1770.87 611.071 1774.31 610.141 1777.72 609.217 cv
1781.13 608.317 1784.5 607.327 1787.87 606.522 cv
1791.25 605.725 1794.6 604.937 1797.91 604.157 cv
1801.22 603.377 1804.49 602.606 1807.72 601.843 cv
1810.98 601.186 1814.2 600.535 1817.38 599.893 cv
1820.55 599.257 1823.68 598.631 1826.77 598.013 cv
1828.32 597.711 1829.84 597.382 1831.37 597.109 cv
1832.9 596.859 1834.41 596.609 1835.92 596.363 cv
1841.93 595.375 1847.75 594.421 1853.33 593.506 cv
1858.93 592.721 1864.31 592.084 1869.42 591.416 cv
1871.98 591.089 1874.47 590.771 1876.89 590.461 cv
1879.31 590.137 1881.69 589.996 1883.98 589.765 cv
1888.56 589.347 1892.85 588.958 1896.82 588.597 cv
1898.8 588.417 1900.71 588.244 1902.52 588.078 cv
1904.34 587.941 1906.07 587.878 1907.71 587.779 cv
1915.46 587.364 1921.22 587.054 1924.67 586.868 cv
1932.68 560.512 1940.87 534.878 1948.74 512.125 cv
1945.12 511.906 1939.72 511.579 1932.79 511.16 cv
1926.02 510.719 1917.82 510.328 1908.41 509.829 cv
1899 509.298 1888.38 508.879 1876.78 508.367 cv
1870.98 508.089 1864.94 507.929 1858.69 507.7 cv
1852.44 507.487 1845.98 507.238 1839.34 507.095 cv
1832.69 506.936 1825.86 506.772 1818.88 506.604 cv
1811.9 506.498 1804.77 506.388 1797.52 506.276 cv
1790.27 506.237 1782.9 506.199 1775.44 506.159 cv
1767.97 506.201 1760.42 506.243 1752.8 506.286 cv
1745.19 506.428 1737.52 506.57 1729.82 506.714 cv
1722.12 506.978 1714.38 507.099 1706.66 507.489 cv
1691.2 508.069 1675.77 509.083 1660.6 510.291 cv
1645.44 511.646 1630.54 513.295 1616.27 515.678 cv
1602.04 518.173 1588.63 522.368 1576.15 526.866 cv
1563.68 531.436 1552.13 536.42 1541.64 541.362 cv
1520.63 551.247 1503.77 560.787 1492.09 567.648 cv
1480.43 574.534 1473.97 578.813 1473.97 578.813 cv
1473.97 578.813 1480.37 574.453 1491.96 567.419 cv
1503.55 560.41 1520.3 550.654 1541.22 540.487 cv
1551.67 535.406 1563.19 530.264 1575.65 525.518 cv
1588.12 520.845 1601.56 516.452 1615.92 513.748 cv
1630.27 511.167 1645.17 509.333 1660.37 507.785 cv
1675.57 506.386 1691.03 505.178 1706.51 504.407 cv
1714.25 503.919 1722 503.703 1729.71 503.344 cv
1737.43 503.104 1745.11 502.866 1752.74 502.628 cv
1760.37 502.492 1767.94 502.356 1775.41 502.223 cv
1782.89 502.169 1790.27 502.118 1797.54 502.067 cv
1804.81 502.089 1811.95 502.11 1818.94 502.131 cv
1825.94 502.213 1832.78 502.292 1839.44 502.37 cv
1846.1 502.429 1852.57 502.6 1858.83 502.735 cv
1865.1 502.889 1871.15 502.973 1876.96 503.181 cv
1888.58 503.55 1899.23 503.839 1908.67 504.254 cv
1918.11 504.638 1926.35 504.929 1933.11 505.285 cv
1941.28 505.678 1947.32 505.97 1950.83 506.138 cv
1954.01 497.091 1957.13 488.558 1960.16 480.678 cv
1958.1 479.816 1955.48 478.723 1952.37 477.42 cv
1948.18 475.678 1943.14 473.401 1937.33 470.877 cv
1931.55 468.293 1925.05 465.338 1918 462.027 cv
1914.48 460.355 1910.81 458.613 1907.02 456.81 cv
1903.25 454.958 1899.36 453.046 1895.35 451.078 cv
1887.37 447.094 1878.98 442.822 1870.35 438.332 cv
1853.16 429.239 1834.82 419.539 1816.48 409.84 cv
1807.28 405.05 1798.05 400.331 1788.84 395.937 cv
1786.54 394.841 1784.24 393.75 1781.96 392.664 cv
1779.66 391.618 1777.37 390.578 1775.09 389.545 cv
1770.56 387.453 1765.98 385.573 1761.48 383.785 cv
1752.43 380.277 1743.52 377.274 1734.97 374.807 cv
1726.41 372.322 1718.24 370.282 1710.64 368.639 cv
1695.44 365.329 1682.59 363.49 1673.58 362.439 cv
1664.56 361.392 1659.38 361.142 1659.38 361.142 cv
1659.38 361.142 1664.56 361.342 1673.59 362.305 cv
1682.61 363.272 1695.49 364.989 1710.74 368.16 cv
1718.36 369.734 1726.57 371.7 1735.16 374.109 cv
1743.76 376.5 1752.72 379.427 1761.83 382.861 cv
1766.39 384.622 1770.97 386.449 1775.55 388.512 cv
1777.84 389.526 1780.15 390.548 1782.46 391.575 cv
1784.76 392.641 1787.07 393.714 1789.38 394.79 cv
1798.65 399.11 1807.94 403.751 1817.19 408.46 cv
1835.61 417.991 1854.04 427.52 1871.32 436.455 cv
1879.98 440.863 1888.39 445.049 1896.4 448.954 cv
1900.41 450.88 1904.32 452.753 1908.1 454.566 cv
1911.9 456.33 1915.57 458.035 1919.09 459.671 cv
1926.15 462.909 1932.67 465.797 1938.45 468.32 cv
1944.26 470.781 1949.29 472.996 1953.49 474.701 cv
1956.59 475.963 1959.19 477.021 1961.25 477.861 cv
1962.13 475.604 1963 473.396 1963.86 471.259 cv
1953.87 365.239 1959.25 280.731 1854 264.598 cv
1748.75 248.465 1722.63 287.646 1658.86 312.998 cv
1595.1 338.351 1591.26 305.315 1519.04 398.274 cv
1446.82 491.233 1434.53 558.839 1426.85 606.472 cv
1419.17 654.104 1423.01 703.271 1423.01 703.271 cv
1423.01 703.271 1488.31 642.579 1537.48 596.485 cv
1586.65 550.388 1650.41 523.5 1705.73 531.183 cv
1761.04 538.865 1791.77 550.388 1764.88 561.145 cv
1737.99 571.9 1578.2 605.703 1519.04 644.884 cv
1459.88 684.065 1406.11 720.173 1413.02 780.098 cv
1419.93 840.021 1432.99 872.287 1452.2 887.654 cv
1471.41 903.017 1491.38 913.007 1491.38 909.935 cv
1491.38 906.859 1462.19 876.897 1552.84 799.305 cv
1643.5 721.709 1697.27 670.237 1737.22 667.164 cv
1777.17 664.091 1829.41 666.396 1811.74 687.907 cv
1794.07 709.418 1661.94 769.342 1610.46 820.815 cv
1558.99 872.287 1505.21 929.909 1489.08 948.345 cv
1472.94 966.784 1451.43 1015.95 1513.66 1083.56 cv
1575.89 1151.16 1644.27 1219.54 1680.37 1256.42 cv
1716.48 1293.29 1771.03 1329.4 1771.03 1329.4 cv
1771.03 1329.4 1806.37 1304.82 1920.07 1268.71 cv
2033.77 1232.6 2037.61 1220.31 2046.83 1182.66 cv
2056.05 1145.02 2056.82 1056.67 2028.39 982.15 cv
1999.97 907.629 1951.57 811.597 1990.75 827.73 cv
2029.93 843.863 2071.41 956.796 2096.77 1012.11 cv
2122.12 1067.42 2105.99 1165.76 2105.99 1165.76 cv
2105.99 1165.76 2156.69 1142.71 2238.9 1037.46 cv
2321.1 932.211 2372.57 847.704 2384.1 711.722 cv
2395.62 575.741 2395.24 527.342 2348.76 489.696 cv
cp
f
3275.44 1197.42 mo
3275.44 1197.42 3272.78 1204.64 3262.52 1203.12 cv
3252.26 1201.6 3241.99 1159.8 3215.77 1099.38 cv
3189.55 1038.95 3150.03 982.325 3141.29 946.983 cv
3132.55 911.641 3153.07 909.74 3185.75 915.44 cv
3218.44 921.142 3264.8 986.127 3289.5 1048.07 cv
3314.2 1110.01 3299.76 1157.52 3275.44 1197.42 cv
cp
2834.99 934.441 mo
2819.79 945.842 2819.79 936.723 2819.79 936.723 cv
2825.49 889.979 2854.37 848.937 2904.15 815.874 cv
2953.94 782.812 3007.14 773.309 3004.1 799.531 cv
3001.06 825.755 2931.52 859.957 2898.45 882.378 cv
2865.39 904.799 2843.63 927.961 2834.99 934.441 cv
cp
2754.42 728.848 mo
2803.82 701.485 2879.83 646.001 2977.12 639.16 cv
2977.12 639.16 3008.47 640.301 2971.04 663.482 cv
2950.76 676.042 2912.51 678.684 2843.35 705.285 cv
2774.18 731.888 2714.9 799.531 2677.65 805.612 cv
2640.41 811.694 2705.02 756.208 2754.42 728.848 cv
cp
3630 652.841 mo
3622.4 572.276 3626.2 488.669 3588.2 426.345 cv
3550.2 364.021 3469.63 270.534 3373.87 280.415 cv
3278.1 290.295 3246.18 345.779 3208.93 391.383 cv
3171.69 436.986 3144.98 475.861 3126.09 486.39 cv
3119.49 490.068 3113.97 491.588 3109.39 491.803 cv
3114.87 491.561 3119.31 489.585 3119.31 489.585 cv
3119.31 489.585 3119.21 490.696 3119.03 492.738 cv
3119.45 492.604 3120.66 492.224 3122.59 491.614 cv
3125.03 490.824 3128.65 489.756 3133.16 488.224 cv
3135.42 487.471 3137.93 486.637 3140.66 485.73 cv
3143.38 484.781 3146.32 483.756 3149.46 482.662 cv
3155.73 480.438 3162.78 477.857 3170.44 474.936 cv
3178.09 472.007 3186.34 468.742 3195.02 465.162 cv
3203.71 461.601 3212.81 457.7 3222.21 453.614 cv
3240.99 445.409 3260.86 436.271 3280.77 427.192 cv
3300.69 418.154 3320.65 409.118 3339.94 402.052 cv
3349.58 398.549 3359.07 395.522 3368.3 393.588 cv
3370.62 393.187 3372.89 392.646 3375.17 392.4 cv
3376.31 392.25 3377.43 392.099 3378.55 391.951 cv
3379.68 391.872 3380.79 391.793 3381.9 391.715 cv
3386.33 391.455 3390.59 391.421 3394.7 391.271 cv
3411.09 390.784 3424.76 390.378 3434.33 390.095 cv
3443.9 389.947 3449.37 389.862 3449.37 389.862 cv
3449.37 389.862 3443.9 389.995 3434.33 390.226 cv
3424.77 390.592 3411.1 391.117 3394.71 391.745 cv
3390.62 391.931 3386.33 392.003 3381.94 392.3 cv
3380.84 392.387 3379.73 392.475 3378.62 392.562 cv
3377.51 392.72 3376.39 392.878 3375.26 393.039 cv
3373 393.3 3370.75 393.86 3368.45 394.279 cv
3359.28 396.281 3349.86 399.377 3340.27 402.954 cv
3321.1 410.167 3301.24 419.366 3281.41 428.572 cv
3261.59 437.82 3241.79 447.136 3223.05 455.514 cv
3213.68 459.687 3204.59 463.673 3195.92 467.317 cv
3187.25 470.979 3179.01 474.325 3171.36 477.326 cv
3163.71 480.324 3156.66 482.973 3150.39 485.259 cv
3147.25 486.386 3144.31 487.44 3141.59 488.415 cv
3138.85 489.351 3136.34 490.211 3134.07 490.988 cv
3129.53 492.572 3125.95 493.663 3123.51 494.476 cv
3121.07 495.269 3119.77 495.691 3119.77 495.691 cv
3118.98 493.229 li
3118.67 496.772 3118.14 502.749 3117.46 510.465 cv
3118.01 508.244 li
3118.01 508.244 3124.03 509.783 3134.57 512.477 cv
3139.84 513.783 3146.23 515.549 3153.58 517.246 cv
3160.95 518.899 3169.26 520.765 3178.33 522.801 cv
3182.9 523.654 3187.65 524.544 3192.58 525.464 cv
3197.5 526.381 3202.59 527.405 3207.87 528.085 cv
3213.14 528.85 3218.55 529.635 3224.08 530.437 cv
3229.64 531.034 3235.32 531.646 3241.1 532.266 cv
3243.99 532.608 3246.91 532.833 3249.86 533.064 cv
3252.8 533.299 3255.77 533.537 3258.75 533.777 cv
3264.72 534.286 3270.77 534.682 3276.88 535.093 cv
3289.08 535.936 3301.49 536.792 3313.89 537.646 cv
3317.07 537.936 3320.09 538.326 3323.19 538.66 cv
3326.28 539.013 3329.36 539.288 3332.43 539.919 cv
3338.56 541.027 3344.69 541.998 3350.64 543.515 cv
3353.62 544.207 3356.6 544.898 3359.56 545.584 cv
3362.49 546.39 3365.4 547.191 3368.3 547.989 cv
3371.19 548.81 3374.09 549.531 3376.91 550.421 cv
3379.74 551.306 3382.55 552.185 3385.33 553.056 cv
3390.92 554.731 3396.32 556.668 3401.63 558.486 cv
3406.96 560.257 3412.08 562.252 3417.1 564.094 cv
3422.12 565.909 3426.93 567.89 3431.61 569.719 cv
3436.3 571.532 3440.77 573.445 3445.08 575.225 cv
3449.4 576.987 3453.48 578.793 3457.38 580.482 cv
3461.29 582.154 3464.96 583.813 3468.42 585.374 cv
3471.88 586.917 3475.1 588.397 3478.06 589.79 cv
3481.04 591.168 3483.76 592.442 3486.21 593.625 cv
3496.03 598.308 3501.56 601.158 3501.56 601.158 cv
3501.56 601.158 3496 598.371 3486.13 593.802 cv
3483.67 592.646 3480.93 591.406 3477.94 590.063 cv
3474.96 588.704 3471.72 587.259 3468.24 585.759 cv
3464.78 584.237 3461.09 582.622 3457.16 580.996 cv
3453.25 579.351 3449.14 577.595 3444.81 575.884 cv
3440.48 574.155 3436 572.293 3431.29 570.538 cv
3426.59 568.765 3421.77 566.839 3416.73 565.085 cv
3411.7 563.304 3406.57 561.371 3401.23 559.665 cv
3395.91 557.912 3390.5 556.04 3384.9 554.433 cv
3382.12 553.597 3379.31 552.753 3376.48 551.903 cv
3373.65 551.049 3370.76 550.364 3367.87 549.578 cv
3364.98 548.817 3362.06 548.052 3359.14 547.282 cv
3356.18 546.633 3353.21 545.981 3350.23 545.326 cv
3344.29 543.881 3338.23 542.997 3332.17 541.971 cv
3329.15 541.381 3326.05 541.139 3322.97 540.822 cv
3319.89 540.526 3316.75 540.161 3313.73 539.921 cv
3301.32 539.208 3288.92 538.496 3276.71 537.793 cv
3270.6 537.452 3264.54 537.125 3258.54 536.683 cv
3255.55 536.478 3252.57 536.272 3249.62 536.07 cv
3246.66 535.874 3243.72 535.682 3240.82 535.371 cv
3235 534.813 3229.29 534.265 3223.69 533.728 cv
3218.12 532.985 3212.66 532.257 3207.35 531.55 cv
3202.03 530.925 3196.9 529.953 3191.94 529.089 cv
3186.98 528.22 3182.18 527.38 3177.57 526.573 cv
3168.42 524.629 3160.04 522.847 3152.61 521.268 cv
3145.19 519.646 3138.82 517.961 3133.52 516.713 cv
3124.4 514.492 3118.66 513.096 3117.26 512.755 cv
3115.75 529.969 3113.58 554.799 3111.42 580.378 cv
3111.98 579.879 li
3111.98 579.879 3113.15 581.208 3115.33 583.7 cv
3116.43 584.923 3117.8 586.274 3119.39 587.954 cv
3121.07 589.568 3122.97 591.495 3125.25 593.496 cv
3129.72 597.583 3135.46 602.262 3142.33 607.312 cv
3149.2 612.367 3157.2 617.785 3166.1 623.479 cv
3183.9 634.878 3205.29 647.386 3227.86 661.439 cv
3250.43 675.467 3274.13 691.148 3296.75 708.304 cv
3308.06 716.867 3319.13 725.763 3329.71 734.878 cv
3340.27 743.974 3350.5 753.162 3360.19 762.253 cv
3379.56 780.437 3396.79 798.32 3410.71 814.375 cv
3424.65 830.417 3435.31 844.597 3442.18 854.91 cv
3445.63 860.06 3448.13 864.243 3449.73 867.144 cv
3450.52 868.606 3451.11 869.733 3451.45 870.52 cv
3451.64 870.906 3451.74 871.217 3451.82 871.418 cv
3451.87 871.63 3451.9 871.738 3451.9 871.738 cv
3451.9 871.738 3451.87 871.63 3451.82 871.42 cv
3451.73 871.219 3451.62 870.912 3451.43 870.529 cv
3451.08 869.75 3450.47 868.632 3449.66 867.185 cv
3448 864.313 3445.44 860.177 3441.91 855.095 cv
3434.88 844.911 3424 830.935 3409.82 815.162 cv
3395.66 799.375 3378.18 781.825 3358.55 764.02 cv
3348.74 755.112 3338.41 746.141 3327.71 737.24 cv
3317.03 728.346 3305.88 719.681 3294.48 711.353 cv
3271.7 694.667 3247.87 679.473 3225.15 665.873 cv
3202.43 652.243 3180.84 640.107 3162.69 628.91 cv
3153.61 623.316 3145.4 617.958 3138.29 612.901 cv
3131.17 607.855 3125.16 603.122 3120.42 598.937 cv
3118.01 596.887 3115.99 594.908 3114.17 593.225 cv
3112.85 591.883 3111.64 590.691 3110.64 589.657 cv
3108.35 616.854 3106.15 643.944 3104.81 662.723 cv
3103.84 676.203 3100.88 711.939 3096.88 758.595 cv
3098.92 760.455 3102.75 763.94 3108.08 768.785 cv
3112.16 772.553 3117.11 777.127 3122.8 782.375 cv
3128.43 787.681 3134.82 793.618 3141.67 800.236 cv
3148.55 806.813 3155.91 814.044 3163.64 821.747 cv
3167.46 825.639 3171.39 829.638 3175.4 833.725 cv
3179.34 837.884 3183.45 842.062 3187.48 846.442 cv
3191.51 850.827 3195.67 855.223 3199.7 859.84 cv
3201.74 862.131 3203.78 864.438 3205.84 866.753 cv
3207.85 869.114 3209.87 871.487 3211.89 873.867 cv
3214.94 877.445 li
3217.91 881.107 li
3219.9 883.553 3221.89 886.007 3223.88 888.466 cv
3227.71 893.503 3231.69 898.465 3235.35 903.662 cv
3239.15 908.758 3242.66 914.063 3246.22 919.298 cv
3249.6 924.653 3253.04 929.943 3256.1 935.406 cv
3256.89 936.763 3257.67 938.11 3258.45 939.459 cv
3259.19 940.836 3259.92 942.207 3260.65 943.576 cv
3262.1 946.307 3263.54 949.026 3264.98 951.727 cv
3266.41 954.429 3267.83 957.114 3269.25 959.78 cv
3270.67 962.442 3271.95 965.163 3273.29 967.817 cv
3275.93 973.147 3278.53 978.388 3281.08 983.518 cv
3283.54 988.687 3285.94 993.74 3288.28 998.661 cv
3293 1008.49 3297.24 1017.88 3301.21 1026.53 cv
3305.19 1035.16 3308.66 1043.16 3311.83 1050.21 cv
3314.94 1057.28 3317.64 1063.45 3319.87 1068.53 cv
3324.24 1078.73 3326.74 1084.56 3326.74 1084.56 cv
3326.74 1084.56 3324.18 1078.76 3319.69 1068.61 cv
3317.4 1063.56 3314.63 1057.42 3311.45 1050.38 cv
3308.2 1043.37 3304.64 1035.41 3300.56 1026.83 cv
3296.5 1018.23 3292.16 1008.89 3287.33 999.122 cv
3284.94 994.228 3282.47 989.204 3279.96 984.07 cv
3277.36 978.978 3274.71 973.776 3272.01 968.49 cv
3270.64 965.854 3269.34 963.162 3267.89 960.515 cv
3266.45 957.864 3264.99 955.194 3263.53 952.509 cv
3262.06 949.824 3260.59 947.122 3259.11 944.406 cv
3258.37 943.057 3257.63 941.702 3256.88 940.345 cv
3256.09 939.014 3255.3 937.679 3254.5 936.344 cv
3251.4 930.948 3247.92 925.726 3244.5 920.44 cv
3240.9 915.274 3237.35 910.041 3233.51 905.011 cv
3229.81 899.886 3225.8 894.99 3221.93 890.023 cv
3219.92 887.598 3217.91 885.179 3215.91 882.765 cv
3212.91 879.154 li
3209.84 875.623 li
3207.79 873.275 3205.76 870.937 3203.73 868.609 cv
3201.65 866.324 3199.59 864.053 3197.54 861.792 cv
3193.47 857.237 3189.27 852.905 3185.21 848.58 cv
3181.15 844.261 3177.01 840.143 3173.03 836.042 cv
3168.99 832.013 3165.03 828.071 3161.17 824.234 cv
3153.38 816.64 3145.96 809.512 3139.02 803.025 cv
3132.12 796.503 3125.67 790.647 3119.99 785.42 cv
3114.26 780.249 3109.27 775.739 3105.16 772.027 cv
3101.52 768.79 3098.56 766.162 3096.4 764.233 cv
3084.53 902.337 3064.24 1128.93 3059.2 1165.88 cv
3053.09 1210.73 3061.55 1030.21 3068.85 908.886 cv
3068.01 909.507 3067.1 910.193 3066.09 910.948 cv
3063.55 912.851 3060.42 915.116 3057.09 917.954 cv
3053.72 920.767 3049.85 923.832 3045.75 927.372 cv
3041.69 930.972 3037.3 934.872 3032.65 938.996 cv
3028.12 943.258 3023.35 947.754 3018.41 952.404 cv
3013.58 957.183 3008.52 962.044 3003.52 967.125 cv
2998.57 972.253 2993.41 977.344 2988.47 982.653 cv
2983.49 987.917 2978.49 993.169 2973.7 998.447 cv
2971.29 1001.08 2968.89 1003.69 2966.53 1006.26 cv
2964.19 1008.87 2961.89 1011.44 2959.62 1013.98 cv
2955.06 1019.01 2950.76 1023.99 2946.64 1028.67 cv
2942.57 1033.38 2938.73 1037.84 2935.17 1041.96 cv
2931.67 1046.12 2928.45 1049.94 2925.6 1053.31 cv
2922.78 1056.71 2920.32 1059.68 2918.3 1062.12 cv
2914.29 1067.05 2912 1069.86 2912 1069.86 cv
2912 1069.86 2914.24 1067 2918.15 1062 cv
2920.13 1059.52 2922.53 1056.51 2925.28 1053.05 cv
2928.06 1049.61 2931.2 1045.74 2934.63 1041.51 cv
2938.1 1037.32 2941.86 1032.78 2945.84 1027.98 cv
2949.87 1023.22 2954.07 1018.15 2958.53 1013.02 cv
2960.76 1010.44 2963.01 1007.82 2965.3 1005.17 cv
2967.61 1002.55 2969.96 999.887 2972.32 997.21 cv
2977.02 991.824 2981.92 986.47 2986.81 981.096 cv
2991.65 975.685 2996.71 970.479 3001.58 965.241 cv
3006.49 960.048 3011.48 955.072 3016.22 950.183 cv
3021.09 945.416 3025.8 940.806 3030.26 936.435 cv
3034.86 932.192 3039.2 928.184 3043.21 924.481 cv
3047.27 920.829 3051.16 917.624 3054.52 914.705 cv
3057.87 911.74 3060.95 909.431 3063.45 907.475 cv
3065.92 905.549 3067.86 904.033 3069.2 902.988 cv
3069.94 890.789 3070.67 879.257 3071.36 868.697 cv
3074.64 818.906 3079.19 746.809 3083.22 678.217 cv
3081.51 678.931 3079.62 679.717 3077.57 680.571 cv
3072.06 682.837 3065.37 685.588 3057.69 688.745 cv
3050 691.861 3041.32 695.376 3031.86 699.212 cv
3012.91 706.822 2990.81 715.702 2967.14 725.214 cv
2955.33 730.025 2943.12 734.989 2930.81 740.233 cv
2927.72 741.536 2924.63 742.844 2921.52 744.156 cv
2918.44 745.504 2915.34 746.86 2912.24 748.218 cv
2909.14 749.574 2906.04 750.934 2902.92 752.293 cv
2893.66 756.532 li
2884.4 760.781 li
2881.34 762.257 2878.29 763.73 2875.24 765.205 cv
2872.2 766.69 2869.14 768.114 2866.14 769.642 cv
2863.15 771.184 2860.16 772.723 2857.19 774.252 cv
2851.2 777.24 2845.44 780.526 2839.71 783.701 cv
2838.28 784.495 2836.85 785.287 2835.43 786.077 cv
2834.02 786.885 2832.64 787.748 2831.25 788.574 cv
2828.49 790.246 2825.74 791.906 2823.02 793.552 cv
2820.26 795.151 2817.65 796.928 2815.05 798.657 cv
2812.44 800.386 2809.86 802.098 2807.31 803.791 cv
2802.28 807.284 2797.53 810.944 2792.81 814.374 cv
2788.25 818.024 2783.81 821.575 2779.51 825.011 cv
2777.37 826.73 2775.25 828.419 2773.18 830.08 cv
2771.1 831.727 2769.08 833.369 2767.15 835.042 cv
2759.42 841.685 2752.18 847.609 2746.17 853.324 cv
2744.64 854.724 2743.16 856.078 2741.74 857.39 cv
2740.3 858.687 2738.93 859.957 2737.69 861.25 cv
2735.16 863.792 2732.84 866.126 2730.74 868.234 cv
2728.71 870.415 2726.99 872.436 2725.44 874.155 cv
2724.65 875 2723.99 875.842 2723.41 876.63 cv
2722.81 877.409 2722.28 878.116 2721.79 878.75 cv
2719.89 881.312 2719.2 882.884 2719.2 882.884 cv
2719.2 882.884 2719.87 881.302 2721.74 878.71 cv
2722.21 878.068 2722.74 877.353 2723.33 876.566 cv
2723.9 875.768 2724.55 874.915 2725.32 874.058 cv
2726.85 872.317 2728.55 870.269 2730.54 868.058 cv
2732.62 865.917 2734.91 863.548 2737.41 860.966 cv
2738.64 859.654 2739.99 858.363 2741.4 857.043 cv
2742.82 855.714 2744.28 854.337 2745.79 852.913 cv
2751.72 847.104 2758.89 841.075 2766.55 834.312 cv
2768.45 832.605 2770.45 830.931 2772.51 829.259 cv
2774.56 827.57 2776.65 825.851 2778.77 824.101 cv
2783.02 820.601 2787.42 816.986 2791.94 813.267 cv
2796.63 809.755 2801.35 806.012 2806.36 802.434 cv
2808.9 800.695 2811.47 798.937 2814.06 797.164 cv
2816.65 795.392 2819.24 793.567 2821.99 791.924 cv
2824.7 790.232 2827.44 788.528 2830.19 786.811 cv
2831.58 785.961 2832.94 785.072 2834.35 784.244 cv
2835.77 783.431 2837.19 782.613 2838.62 781.796 cv
2844.33 778.529 2850.07 775.146 2856.03 772.067 cv
2859 770.489 2861.97 768.904 2864.95 767.313 cv
2867.94 765.738 2870.99 764.268 2874.02 762.732 cv
2877.06 761.213 2880.1 759.689 2883.14 758.166 cv
2892.37 753.777 li
2901.61 749.397 li
2904.7 747.99 2907.8 746.584 2910.89 745.179 cv
2913.98 743.777 2917.06 742.377 2920.14 740.98 cv
2923.23 739.622 2926.31 738.27 2929.38 736.922 cv
2941.64 731.493 2953.79 726.355 2965.55 721.373 cv
2989.09 711.53 3011.07 702.342 3029.91 694.466 cv
3039.31 690.504 3047.92 686.872 3055.56 683.653 cv
3063.18 680.395 3069.82 677.554 3075.3 675.216 cv
3078.48 673.835 3081.26 672.634 3083.61 671.615 cv
3086.25 626.467 3088.65 583.216 3090.28 549.295 cv
3088.11 549.633 3081.59 550.65 3071.61 552.203 cv
3059.2 554.098 3041.47 556.781 3020.18 559.825 cv
2998.89 562.878 2974.03 566.282 2947.4 569.873 cv
2920.77 573.489 2892.36 577.234 2864.07 581.626 cv
2835.79 586.046 2807.59 591.115 2781.77 598.322 cv
2768.86 601.912 2756.56 606.01 2745.18 610.628 cv
2739.51 612.979 2734.04 615.375 2728.85 617.912 cv
2723.66 620.434 2718.69 623.031 2713.9 625.478 cv
2694.79 635.32 2678.87 643.521 2667.72 649.261 cv
2662.16 652.156 2657.79 654.432 2654.81 655.982 cv
2653.33 656.77 2652.19 657.372 2651.42 657.779 cv
2650.67 658.187 2650.25 658.419 2650.29 658.415 cv
2650.25 658.419 2650.66 658.18 2651.41 657.759 cv
2652.17 657.34 2653.3 656.719 2654.77 655.907 cv
2657.72 654.306 2662.05 651.959 2667.57 648.972 cv
2678.62 643.046 2694.41 634.579 2713.35 624.421 cv
2718.1 621.894 2723.01 619.221 2728.19 616.592 cv
2733.37 613.954 2738.84 611.455 2744.51 608.994 cv
2755.87 604.159 2768.19 599.831 2781.11 596.005 cv
2806.95 588.327 2835.19 582.771 2863.45 577.871 cv
2891.73 573 2920.1 568.784 2946.66 564.728 cv
2973.22 560.695 2998.01 556.885 3019.22 553.483 cv
3040.43 550.089 3058.09 547.119 3070.43 545.024 cv
3082.79 542.89 3089.85 541.671 3089.85 541.671 cv
3090.47 545.425 li
3091.22 529.444 3091.8 515.697 3092.14 505.007 cv
3091.51 507.2 li
3091.51 507.2 3086.96 505.856 3078.98 503.505 cv
3075 502.3 3070.14 500.973 3064.61 499.196 cv
3059.1 497.34 3052.88 495.247 3046.09 492.962 cv
3044.4 492.389 3042.67 491.804 3040.91 491.208 cv
3039.16 490.556 3037.39 489.895 3035.59 489.219 cv
3031.98 487.872 3028.25 486.479 3024.42 485.046 cv
3016.72 482.279 3008.76 478.932 3000.49 475.583 cv
2992.19 472.314 2983.78 468.533 2975.19 464.805 cv
2973.04 463.87 2970.89 462.93 2968.73 461.987 cv
2966.58 461.002 2964.43 460.015 2962.28 459.025 cv
2957.98 457.036 2953.67 455.04 2949.35 453.043 cv
2940.72 449.042 2932.22 444.769 2923.78 440.71 cv
2915.45 436.45 2907.19 432.364 2899.31 428.205 cv
2891.43 424.04 2883.79 420.058 2876.64 416.099 cv
2869.45 412.219 2862.71 408.437 2856.51 404.93 cv
2850.28 401.453 2844.66 398.123 2839.64 395.24 cv
2834.66 392.277 2830.29 389.745 2826.74 387.574 cv
2819.61 383.293 2815.6 380.742 2815.6 380.742 cv
2815.6 380.742 2819.65 383.233 2826.85 387.405 cv
2830.42 389.523 2834.83 391.99 2839.85 394.876 cv
2844.91 397.681 2850.58 400.925 2856.85 404.307 cv
2863.11 407.719 2869.9 411.396 2877.14 415.167 cv
2884.34 419.016 2892.03 422.879 2899.97 426.92 cv
2907.9 430.957 2916.21 434.915 2924.6 439.044 cv
2933.08 442.97 2941.63 447.109 2950.3 450.974 cv
2954.64 452.901 2958.98 454.829 2963.3 456.748 cv
2965.46 457.703 2967.62 458.657 2969.77 459.607 cv
2971.94 460.515 2974.11 461.42 2976.26 462.322 cv
2984.89 465.912 2993.33 469.557 3001.66 472.691 cv
3009.95 475.905 3017.93 479.122 3025.64 481.761 cv
3029.48 483.13 3033.21 484.462 3036.82 485.751 cv
3038.63 486.396 3040.4 487.028 3042.14 487.65 cv
3043.9 488.216 3045.63 488.771 3047.31 489.315 cv
3054.07 491.479 3060.27 493.462 3065.76 495.221 cv
3071.28 496.906 3076.19 498.165 3080.18 499.31 cv
3086.58 501.092 3090.78 502.261 3092.21 502.66 cv
3092.46 494.292 3092.55 488.007 3092.44 484.275 cv
3092.44 484.277 li
3091.01 482.48 3090.37 481.069 3090.37 481.069 cv
3050.08 357.18 3027.28 269.014 2868.43 285.735 cv
2709.58 302.457 2655.61 484.109 2626.73 554.795 cv
2597.85 625.479 2577.33 704.525 2612.29 810.172 cv
2647.25 915.821 2692.1 1045.79 2772.66 1122.55 cv
2853.23 1199.32 2944.43 1258.6 2974.84 1281.41 cv
3005.24 1304.21 3024.24 1358.93 3024.24 1358.93 cv
3024.24 1358.93 3047.8 1337.65 3116.97 1294.33 cv
3186.13 1251 3289.5 1218.32 3318.38 1192.48 cv
3347.26 1166.64 3381.47 1131.68 3373.87 1114.19 cv
3366.27 1096.71 3351.82 1014.63 3320.66 957.624 cv
3289.5 900.619 3259.86 836.773 3226.42 807.133 cv
3192.97 777.491 3161.81 728.848 3224.9 738.729 cv
3287.98 748.608 3357.14 829.174 3385.27 900.619 cv
3413.39 972.064 3392.87 1081.51 3392.87 1081.51 cv
3392.87 1081.51 3456.36 1029.83 3491.68 977.386 cv
3526.99 924.94 3589.72 831.455 3567.68 827.654 cv
3545.64 823.853 3524.36 807.893 3467.35 761.529 cv
3410.35 715.166 3319.9 657.402 3298.62 640.681 cv
3277.34 623.959 3259.1 605.718 3281.9 605.718 cv
3304.7 605.718 3428.59 643.721 3483.31 673.364 cv
3538.04 703.005 3547.92 726.566 3553.24 741.768 cv
3558.56 756.97 3563.12 837.779 3576.04 821.314 cv
3588.96 804.852 3637.6 733.406 3630 652.841 cv
cp
f
3107.68 491.824 mo
3108.2 491.838 3108.71 491.83 3109.22 491.811 cv
3108.69 491.832 3108.18 491.836 3107.68 491.824 cv
cp
f
3106.38 491.747 mo
3106.41 491.749 3106.44 491.756 3106.47 491.759 cv
3106.7 491.778 3106.93 491.785 3107.16 491.796 cv
3106.9 491.784 3106.63 491.768 3106.38 491.747 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 16.0.0
%%For: (MSI) ()
%%Title: (y2021-06-26-09.eps)
%%CreationDate: 6/26/2021 11:24 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj4c_f(T":>Z^q1P-g';'_a_'##W=+QtW4^#D7P!6m)n$S.EqaJ(K+Pg'j!'h44Z#>j$2f(:@pZX]iWUL+6eI<Z9e?\QV4&
%C&G6'R?)bH1N2#VP]:0icFB#0bC=,9SlB&sg8?uXEAih%T=r.Dj1@#eZ*KZATA2-Gg:$2(iI%EM4fQpmgT<rEdVc6HC5l8@0sg^h
%Z(?5I4HscARJ2tMXmpaMV,f,fb;6[<J$2\N<=4`:8[4HcZ5+D84[/eT/PjIgprrGNDrX6SFt0&CbYQ7@UgL7-%),VCq7kUDY:>=X
%G,J@,<#bMVGL8:W&a7S'Q"En.OMM\g[et&E^<GXg#K:S_U[QG!Hca=Rh$f%JT@mtRV9Pn>H'-AO=lt51QQ>`;P5ie]pj^'5fh_D0
%ADE-An(HRCiuO/'#cs!JbL_c"^cq>k#E.^i6,DC"8[DIa<4IjpAQ`0nE\d6(*,"*K&'nr^*gHW]6_TK_-d'Y'<gX?VN9s#\,gO?]
%.(3s<4ON']b&>hQmu*S]Q"%;P1AdPVF`sebQ$maa$XD_:);Fn<X;aQfl11iYX0c3bWuW?u^p[@Sl$9%/WQFf06PX?)DYsJDpi"Vk
%\(EaCFG,Ji[4ZW:0b[^3G;$NTS&ITBi(;\9A?/k4ml'$Addsm\HWes]A'd^-kLq\sr5Wqk_H=24-2SV&0%f-uIOFU"J/Bna&VrKS
%/NgYqWZG4,Mc&ht8B$-gkOhl`gumhHa[GtY/h%_Kr"CIXR$e=&3h8l+=c2V5XZdhg$S2+%#HqI7QWG+RfUOl!>S2gkMm1\LLZ[@j
%+8elgkVg[hfWb+E+V.Q<)#0Ht][6,A^$T!)^0GS6]$66260"=3bi['-rCZ3HV:94dA@p$QXo32/a5+u+-eE?%\UjFqp#Ma\epi'?
%g\a=jja5n$pDNqH$dBK2s$70FqpOnJT.lM7Hgf,nX3J7X9MT9PWata+H'Ws&Ih2&+1s_)#&3\Pci0.q:3ZlQr[/+hWN@Ou!bTc,_
%JLdAST?tdF=DRTe.^__ZmnZ,ZMY2#PD6_Vb1RIK4Z!M6Xpr2-\b"[.`kT%0GEs=NQ$o>I4p]D%HF*bH@;r5/irCpm&'Fm\lD39^Q
%lkpmSTAC3`lnIp/W`Kos7q--]olBru'?C[V5nXD%oooA<)X+6Mb\ZIgPPmtQg-4K.CbqDDg2dU-TAKak#`mN*ZOS9'.4U_d3O*^A
%I)a2CG,?p5*7`FX=JTT`HqPg8Roi;ZFt0Wj<a?$flF)a/]8];Imh=Gqq\k"70FX=FJQrKkoW:=16LKM/#bB>W@g0Qks6/fdUNo5I
%E1is>jFG_4S(Xt\CUNG9X4TP7QN#P@3!9"8dCJ[q"ng*p':iY]qY8LX>qk/8$EHQd3PA$HiU?lm`P4cG0eA3b3)MYAU9=tsN9q,h
%jl@g)TSh%-nlec;W1M4:\LRC9!`O>XT:OktS^LAIZb#$D[]5TC$kJa%TNW.2T%W@/3u*H\p+TX^`4-bLW:fWa37)VQkk:='JI;P^
%pS[!=$+q72O7VsE!__:r06c9SMd+hb&$aLYS6;)khEBbD+\i&&kGon:r*o!</&#30bl2T[X36k$6IStX^Y>^n.%$3Y\Q5bU\khRh
%=t@'3FnTc0$QJb6s%E9jo-]'XHoYuegs%D:aH6)4i@_k[CL,EPcO7>6M^R4G?N$eIAmC\l7uAVj0tJZe^Qr=@8!WAu;('=TP)eS9
%SDUC/c;BJLR!tf69S76@5YUG-PoW]V)%T9C^7jDY>%MS]03;p1(&.'qQWGc:=;<mAV47"bl,6?+[GM^3W)U<r(AcOGeE@?*Op*jI
%YG9r;fd_-%^K&^$lsT"=C&P-p?bNQ>@_5NO<PEZg2q+/!;uK4o\9_Y_;\aCro`En7LQH/;N>q.GWl79:Y$P52ddG]7(qZSR8nE(k
%SF+M^I'pttls?MF#3L:nj[ZU*L^.7oa@<Ma.LM>7YpoXSj3;/cqF.u8aHiOOW"u\fkdF*KFnL+1X=2VN7P6?pNK[tL9i!Bq\GW.*
%&:%PEJVAL5+L<nIji1a9;cdl7Q8<[F`mL(CVQS]?X!j!#m7!f(^+R]9MHuc<B.cX*@Hu$1ICZ=12tc:0^>.5)]C*Dg]Q4Op\TE`H
%GCRoM?N+30j\1Ip-_AUUjgRj!kGVL#r'!h\V/d("ST;I8>Er4IWF4jrpX'mS]!_R>fc8+Kp1rKB/Caluk4N2mh6%OZ.i5C,]Q&!"
%i@1\0<ojp^X#+T_!uoB-`!ttLA*g&)EH':-F=r]1$'t69Y&,AZ49\>BQ%$2CCooV\m7spXAm`hI1,=MqV-i07+3d9gnj<fO5;K5B
%epsDjN`k@U\_iH#G!(Ofc_%U%_-PN.</XCHe'dZm%Z7+*:8sUu5ssJ+3rNtK"&cAR]guK/#7>n7[-9]5@A_C2iuY5i;lsNQ@hnT1
%]$:"gMIl^0j;;C=;6>%#e&>>LIblo)N8`MJAnN;Rca?CPr*Vctln\aC%Em6hN_1Dl=I*IP1dDDWkL`M6)<`n,ek0B)N\:`i%'@>b
%TmN)7%;E3"nHbC[RXM\ZSO71s8%44^X4fQpWH?SL@402QrdZ:4H`QoToAq2(?$(>?`7-dG/`Mh\D>fSfn"eHT4Kl+%/"krkU7Lq.
%G!5T[Vp8aTjmu9eCJkmWN.'n@`>Z`YE-C&pI-bWJjR]Q8['A=ue5fb<b(!?#Z`\WqPFYEfB"_1q=1`0i39`E&bq3":Ol\Il1TskO
%<f/d4'pi`AfCD`'O.V.c)m/670)/*@K#Z.HRB!Ns=(BiJH2XN`=Q?uYWUfm-H)K8fQLm4oGD_p<jN.'$:20VW!MA:"fP>^c4r%^i
%]<%p/s.$mRr@(S4oQ:-.SaPB2j1S-FiCU;A8MN=@IR1e=F[h#3P.%rM`+A=MQtlQb/?X]kgeYaePG>6X/ETI0eS(*a.?^1$8&]ef
%;VS2#pe*S\Eh-ha):eRiV+?"5q"i9"11G$_YI9q.@]=rd@<u6r:8Gul.EZTY;MPqEl1BH\/T^'L4nS:0"nQ4B7%/3;CQ1=I2C_-h
%D/sIB#VHtl=ZT<-Xm\"k1#DaYc)Khs]_E]dO,^j&VhjV3Nmst/b]PR73Cm;MF&9!hdT%F?7^o'?p9W4=K8CMA>=/bjGL1)pUtH-!
%)q@"7NHtr?.[E]_PO9a=pq[+CFro2>=qs(0.99J%=7Q0TC"Ci#3iZ31WqAt=7EL%Y==`?cJ5\#!hfVnV8q@TZpFCOb$SLH(9cNLb
%16m'G__[\6:32>Yp);I:MRD?"J#6>*5_`%=PnI>8c]PcH.@.;I3D9VP9YZ^9(<(Um,aFsmqcP_b"rFVj8(1(pZ#F5Gf;TB/c!i"G
%Hnh`k)5m7G.aArV=\j+"g]Wq;9Rep=12B`Zf;TN3c!i$=oLsK]8d]5l+gi_tQtlP7;6GWC/7#/WPVe;detPiR;>qB_Am1*JB"lP*
%"Xr!/(+#58*.&WISSD$M/7qckos>Lr%'gq4>*MuK2YL$uSSD$M/7qeUrh%E_9O^^jWkJ<2ko/Yi:A3dpW@GQX4#)#I;bYJ+r7"l.
%EX(.\rkdI1?ClAXm/=g6U.M_!Bd/#TRsmhU@G/'cn`:k*AS.soIRL@C;n\KK"B2uleSA*s2A(7PXX,Pt\9>RD=p:BVeS8$bp@$RI
%;m:GI^tMbg9sr]i>,r*EK_@lsh]=_>U`dM2bpuRh!cTVY5;#Fa</a_:?n+WE0cK$hhob^C$M\_jY>Wp?%J1YU)Z/.a[*X!hO%O9$
%<r@#W"D8drNL*k7PK&;89MF1%/^k(p-Kr=.C;!k4W7EX$Q.2KG]On"maeu_'@\E1gQI]s52O(8/2,SRk>\22-rur.=c$^P[RnuS[
%2&Ub_Yqia@s0a]Rc]W[As";D0R;6o1ino.DbIBj5s++rF_Q`?Kq5qO4<'N3'0h)$)QLf#Giu\k(rO:rp`r:dA8r4F04]Z<f1`L<%
%L:4Z0l)DFscUOl><g2'.U_ZK5-T\u?KP#0ZctR%31;t.aasde%_&K'aOCAZ5o[WI;eQ&&d\7hF#CTp=m@(*)+UQ\:tN<P_8l^/S/
%O1fE.0r$L$2Y&5$^3D5gj<Q&rIW03QVANumdVkTSS`YFB1]KOgM[.:^Q`'Z:C&W=Fs.0-)`mp!9k'u&uRf=BGj?a('Z'J;)YA):+
%6r)&bk<$raN^Ls%Re%PNn6^g<Di+q;g>1>2+S))1GG,Oi*uV^_.l(h*2:Qu3=&lCE*-Br#eOEh@9KeA)3:k(e<qg7'<bqV^ob)&j
%_kW66QnRF0e.aDqrP4fd^2^VQL1.6I;+eNrBnWSN+&=+ldg4V`6M@UBOJO_Lf-!aFrP@-+%?i5G>WQ\$.eP*=<g=uY+k=KMdVmZ*
%XjU?e<Q[so<j@*^13a^%S&WeRes/<G!je/\r09$`2UHYYl7P]6VW**+-f*':5;kKs`06c;%b'L>FDWsFZUS,fP#k.`dhpDfAG\2J
%&)(o%8ck2\57iQ/qoIu;Iej5NrQu<4j+eE&Iq5Vs3/LKs1&9;fdC=sm&igfnfoL,OWmec,2"370]M&D\e%j-`n1sE_(DCE.^l+&d
%0`Eg:]M&D\e%j/:"^XZ2V63Ubce&A^G)Z#Ld1N0iHI9\(3D0090)@E_0M9SHfp>F/\KG:+fu/-:@GEN*8984ZoWj;c/M)=(h=t3p
%TD2>+,Jr`:m:,b**7iV!Nj1p?)TVC#LN,85e!l`EfJrl']/B9d1;,uA(u%$`Ja%L:_"7a+3k]rUHMc-hf^rNl:XRHbZ/#,&qBIlt
%R8%Zse+?W=aDo&B4-`$&'/K*ufi.fFAGIDi3`Im*a66VUbo0LXg+#1D[s3kFPW''^g6E/DTiEP><*b\7o35J[^X3;]/%^-kSUke8
%RHs]Zfi&FKg3IB'[QegjLSh?.,;e$:(6Je\N=\&%Y*EH.8!S0R>eQ.B>E5%^3PSY=W<r]$^QAPrIp!b$HJ.k*0TBR9J;5q?@uM]6
%NikYf,L%.(EK%0qF=0fFVf@Z0*+RcIAfA^W`\AecNq)T.coT-F'kGqP5<ENn9:]PZ7AH<K/6eaYOrh<q8$\r=5?uGh[b!%[]-ggg
%H,$1:3Bc#?</\&f.BXZE0=EBb<on\;;D4kd$r6I;e_9;JSPHRk\gRnE'^n<%h.eOl^('`VR7O01A519*cY4/9h:;M4\nK1-VYCUa
%:*YbWC5f]D4D6TIdd.4NND:3`07K?rr%u+^l0#u/;o#0M^\;GgmF0&4WH[aYk^l#`Ec'1L$N076>Pm6F8ASg@"fJi%UiF1?G^M*.
%RkQ"Zg)iE;2%>eI5jL3>?ga1k$0,@YAR2KKY>i]5(45_+%V(VnkQ?s\Msb$K(IaWN=2D169.-M`@%"eq]JY\e:Lk^licY4"G,E"/
%e<_,fe4dQdWAcd/k/Q6UR<ipQDsi,8c)#s3fA2q.L?2hm/ln?)IkJ^?VXE6hSX[33;g3-Ec;!-*lg<!BgXj679=K^sGNo%kjjKu/
%cIA[00:2*DUJX3k("8QClgE)qE"aSn3eltl@gkTj6A@4$cD:@Hgr/)#0teZMHEY6ihCC=t`EaSIp!6m)0q)Kl9n8c5i:Z)YX]RVj
%b%O_K=Y*Q7IkIT*K=3jkf$Zsc9tsQq?-;'tSesI[\XlA)UB29N,,OMW75t8#`A_9Kj@h'X;fj][Xk)W'O/pl*[nZSbje^&P\%Abp
%@]?Y3.],Q76et8OC8l]0.daNrHB7Trb`@L]2X:55oe\kgkpJs.]&/QHSZAo]T5gL<9]lp=nFQf]#PN'f,PBC2:5iINs$OEM4Q%6U
%\4<MrPJ:"M]*J1m9P(da9O.,&eWXmN/6&h9W7F=I2M+#9IMR=R=(ue8e)`FLIca%s"?)7EQq0'#!Zr]&S,*3eiTqd6'BU#*.@KSW
%+3d9gnj<fO5;K5B?<9*MKm"+1m=+7hQ%)i*jgZbi.4CVn:c--Zs7f!*N'<VB:iu(kpt)W5q1l&se:p_Nh1'Q_;AeubM_6:ng^J9C
%'mlc[_aSkLTf%)T]nS@IlZe(T.tt$PHr6N02;"[.6a9YY*1^&,?0sjR(,C;'GPnT'FXu%F<BJsSl@j5GWGrnfKf1fKj09-TDB.-l
%_pgY@JqGfZ"u<kXRG,[&[uHRg6(\).i4+B1T;+IpB0Uk1/1-N)Y2LBbfB_%tYN9]99lHCF17c'.M6=M(B7_kmKO7Dp;O$-<>gkA=
%3o&"_k'uQBlEsm1>(0-i?:i1/OK>]G>3ka$qiZi=$.]_OcL^rh=W;9:EP4%$\1X`KkF[PLV$p)r*?"J#iKB/q'Gu5aDoqd";5TI,
%BBt%h*d3dr5J`[[>eA_$^VXn&O<aQ%r&OI#!N?3<d-e<S%=#aJ#h&W%pI)m_+60qh&u$)<#q&H)-6>uj2hh4uT[G;h>9f)VN8"hd
%MYh+2G9WcF:*rD-L'rHo2Z,PaHc4X6d&iX@9r&]<:/$r_1KNYLZe>2>bsorip@VL!.jHVUTo4PEp:IG9]mZ")QP@H$kHA1Tj+e-`
%N.'49a+3>@i+UrBd3@ghki9>3@ED`V<h"CpJ!FB=-'gcn`:>;#i!4`7BdU;t>C1/YEpq&1f]JrCmmX"c/YhebQ[.&o;E:i0#J^)r
%5;/ITq3b@"bI'Am\>m+lN:O(,pq=tf^b)n'3l@(5AEq<-+sk!(HJ^AP4a$)Pr\$:VXr\=Yoo+&C(j_hbB>O5.49)RV:9ep=j,^$^
%gIe_V/IfCneMs^:rfG#^C0N:=H1$oW&=PF:Y:?A<X'@+F>O?)p1Jir#ma#8>@qD7SVf1#WHcEKLcSHY->FG%8o&VBL.K:u0Hn[uY
%fPG_=X<,F'bJ>s%L$`?MF7-V?C6a,@$<g]K#*(CM"=MG,#,^6!io6A5^5UT3^"f`5/m?-]_uC9@@'BS?jeV37UJ]4Y^2@$'I]Lu-
%b'IP)RA`p./a8Z4IEN5FAqMcI,*sB&`t:@FA'5@pKPcS`o`pl*50ZL/='p:i\isnmB@d'\Pe*6@I[U+=hC6GA;;-p0KK]o]kFLm0
%Ze!aRb&=u18Gl8ol4r"!ZE5e\qt[L6P7Kf(E/">QWuqoAQ0lPV_uJG6)"^&*bP_ung'Mik>fl*nq@qZBVpGr0T>JC/%j(_3J)kYn
%?[.lap>mClD]&D3eYa(tIr([_[UPp8D!fbBHb3C\F?1.B`qFlXH-^qe--s%^/LC`fh^&H_r>5)Hro0:ECmWGBdd4#iNpgW3q<o'r
%gN;7XkterN]cVkES+?QnYgYs5J!Q`gl<aZ\!lF`ocCZK]N>dQJItQ\G<9ltk0^HqA9&5\']ot*mKT\-<$V:H1&q:D%)U^=tLRdu/
%`Md*(pMg*2C7'M7/Jl7lRCu8LVjY6Og\(9sDoGb(kt9i)3oc,KA!+IX["n[OGZ"ik^Y6SiI^MZ0\8p[gE1BMJF`&`G\6lAuLF9:.
%n<^l+1HUlI$a(hq63k.&P>(N@M/oSN3jY05'NG:n;b9HISK9d9r4#X,r%5Tc5i;*>Gc\7$D0HmGA"`gM.Z5pfMa2?fTd#9V3V@kF
%2`k(WVZ*d^F1juPIIR+NnFm'!noh-=\iskV?@9pMlhG@f=a3pqeh1,#Pp[&$NBbHODpQI1S;lRM^N*U]*XC(qN6/YIh[d#1&33gp
%/)B[#F".:,cp%:@]!5gX/^*[e>[aY)D!+Lg5MA<tp";plo"oP:2`_"!2Cf$'X]G,al?!^fF7u<45o*FfRXsK0f8g0D&;rI_o/N^k
%MIjV/s1i1)^HIuhAJ7$p`H)-pfjlBQ]2G\/b2C5t",!3X2)e)&2iHd<Igd'QP@FFa[)fVDNR$d;`EG--B\0Nu"j5))ehh]MWRRlS
%qGY^WA9-L$,P.qfmSmB?s&Ml*S(k179X;CVEF$6H7^nRACc/fKbPP>pNEWScam:8O>fCRAVgHIPB!GKQA_P[uDQSD]T[-?r;J^LL
%)oYi<e,N.!^2?5l%a(*+`>5W,OEjjL11"l>^>h6$Kqi3!R9_aohnrKka(&1oDY8SrJa^5M`EhlI3F(6]E"5rmma&]ZgrSl*9u;L_
%`VOMlp.h5bp<ZiX[jpc;laKJu\+3$:ZW=5PMYkq-[?H+[gZshI]mI"RE=0;%b\",/fI\.F1>@e#O&^K[AA-RH0@jH0Rb_/Z^[K'l
%o*X&n:i_<*hJG(S^[)?nH*\q*Is!5`@5]a<P8T1[oS*MYT3'`:4_Z$7AmSJjPImB,VMPPd\t,](`"e@.;=C4G8dfkB+e-.tgq(O;
%Y5Qc4l]4\"6^\AU*>C[fF3n-g#\gDEY@K]"Fm!RY0[R40mo2*;5)P3rR'hRJ@#k?EGF[D9FDJ:;W,H3IZ8VM:jXf-0.^r3Q,*:,e
%%,UQ\>6K"Y2ClOBC?KL1$B=p3Q:O!^g"R+HW:qAjaqngI;q?Dq;L;=.aMKhSV.'m=d:S1*YsGS&]X6,@a:Iqar-fI=0j]83JP*=b
%;oBCOLHe13%qVX*ZV)6bU.%P@s%SkIA6aeda?)E-m-rphbs[X4^K"H3U^m5Bl,$iBnJ&[^j<K@;"#I&RR7GONS;hp53?Okpb15q%
%J,ju24!^4h7SM)BdQ#%=YYSZQ*8%T96j=IM&Q_9=<C=f.6ZbH>GKV]%c4EoX(NnL"92Og_YT*G;e1\J^bud!>)+/h]:=K3,``h-R
%\Weecieu[V;.eGtUXpff3SX@Eg'm]p+HA<m%+$@JEQis2WFHIuKR0E>\s[<(&n>Yi;fQZHe-g^"^[SA1T5BIB&ccorH=CO`iRPnN
%m>>fKj(`XB(4(@c.&ZsM7)u^h'hklT79;5+^ena3k&eAVqZ"WOP%Ot#<6"K]cqbVX)tehQAjDD_7HgH1JFdB1ePnNH0Pd;KB"M!b
%Q?=b([R[7ea$k4$DZH;7d^N@C&M$_ZVk6DaI-%:F+n,.fDblkIQK`V8HdTsJ2ZX)eT65M>NmiC]4o<=,Zgi`4LOpLhR'jSbH<*g0
%2R52+*(fT,#M#uJ7M"[9;:Z40n(enL8*%VA+M,5#HM32h&N1=$;pOb0RE;o@*ORNX2`tG3#O;ihjCns-ghV^lQOMG!QUk@=h!'9#
%(kLN,i`r0(b*@/CYWh8>3L:'P^55*[3[T23%]ZqcE9hn"db_0N:5[:H2:_2FS6^0;Ps+@V\;Rq_)Kja,%Xd6Yeq'tegEET-FI?kr
%[E@/lX""[i3/mUXm<Kh?or-:7Dr8)c[i6pL3Sq[,(E[6Bk<RKF8IF2&L#$uU\Mr6-*Ik\1V<q0e<r2D#IANK,p%G5p/=ei]5RrC2
%$W\\q<\$(,OMc1QC]VeuPN-JU%RbcF?:MDIY>4L0#%fgEhZJIM8RLHO::8OeTrd:HX6@o3<'F^?.:%&p<;5>`?.Gq(C,E-Z!shj@
%4+C8Fej02bQ1'DG[U3jY0AF;A1.2Q])O_AR4+lk1Wq2m_3Su<[qan&8gcdTZ'YXB"8^Vg&-KiLu6+rI6f<3JLg8WadB[e\8IH];N
%me:8?4`@g`ZJ<1/I4c:LBD8GlI$\\r4'Sm.((mIS]GH[A\2N_)GR,>/o[L&]X_)(U@W-h\lT+4^4t6ofY$=FJoW!#k1tQ;fI<qDF
%hPkDOH+O$:Ap2fin&K!8F_eB[a,=d6K!'lA\mEb2R)e1\cQsSh6utdu0mK&"'sXRo)3=F&SrI@H16'0mmE;r14j)T&ObZjG?@bA[
%M/&rm)!lFmXd:YM(@>Z1qY"(Ls%M<Z^#"\8?de=6(SZ",Ln\K_)ra8O1PMt(=#i4bI%&mDfuhrBi.^dJU17?_Vn3bUCaXi'##X<(
%^f!50q5W"!j#2pnTr?D]T9fVaIa:LHkXlq"J`h<QEKt5Tng[Ncn=fjEC<N=0]Br5);.B%cHlkG:4IN`&>3P]Jg"Y%A.^eY9l_)\l
%q;WWCC6g,mXc]UU<j<(WRjlq3-3/L`Ooq.1H"n#_T3P$]@YWgb;kZ#:ON)QD]^))c;S4MgNRJJ\4ZBf$HFP=0\T21eLlsEY-lX:4
%UY4&1fPn(cBk'B6V-a\OikdAjN'%Vn4"m.FH;ZitSt!*k;GEl7\Xh91NQBFI9$#39>OV+5m>pu`]R>$;WVCB!WI&u-IV$'tIWDf?
%=MOC5E+<eZc>'bSD>tNeI^0aE>$QNirogoeG]E?(S`e1uDCI-<3R=H<g[f;c<]g=5IlM*>]"IY]HZ/_r>dM-!Ic`3&CR1;FDmY[6
%:HL(^:L7ok5O^-aX4;ud9)3;scJb18D3j)&$c@@#Ahj4fhT:9E]]+@,T?Ec^2VYd%S^,X]8&;<F+n,C+G3)rqc<GQgrkNikJ*q!b
%L@IS)k2jWZ\_Yg&Ru?/bfPg<Onq5u>kN0[+p>g[ODPgX*>q[;@CIkYGf=e;(ro!D&E2C!JHae7(En"5T$:!01'`!&:?a;W*00a]/
%kH,4>PA[RQ3W.<e:Ue+%2p*'u<p$/q^ZK_%Dq/tCmu$50]I*V9HbZpgnmB\F*dN**%rsJomJACek.]\Z?G5sAYZg;JHh?IbXeV^j
%WHa@teba+eRn*<igKH"[Xm3)s(TUo7Q<.fWO71<%mXONa2Ks%g`rbZ]00MI=jYam&S'T9gHKi_srJ/^c(;c82&$'-KcouDiXjVrP
%s*2rZ%9^h<D8-\*Km,$*>Lt>X<`^)pZH;h3LU6SnQ'GO_IA1M%^H&X5](+_0gU4TEa,,oU`lI#gUN!X2jo0lkjc>>FriOKdpJH?.
%QLlT8G730r0mFYMXFjK5<fZVQo7fQgPW(2ko<%3OL#Ra>KcBbN[.'La?[Uf\llrX<p2=hnr8[dO_?9Do_:uA1g4+6_mAl90]QZ8e
%KATi++$EesF7PA&+.@c;5('S6rq>=ZGI'5<)/j<0:L59Z<hB#^n@:aeHhQDKoW!.Po5C_kpIO_"V>]$S4p9b8\_[1mqtYkuBA_<u
%`B1i;"T,B05'W7JH^*8J.Wodd^QtJSFr_AMO:+:f^EjDU5HMQqqRG:TOtuJ;[sg@*Nu$9OXXD5f]l2sBG1Oe]WJk&oHiMKqV74$/
%(g11O[V+KIZf8ZF>$,[MNa@'jcegqK/k(5s(!$mAS%HG`LqfIWk4$e(8Y;):2]"j'CR4BQm*6C;21*;gl7^;peubq^oI/@1/2-C6
%DWZ,7G.M=cH"o8C8>#8J]@IFum6[_!cW5+b8_&5(<sl:CRs.qpJla&Fp8nSons*6kcDk\F>jBR%.FKH]k'Cq6WD/t20`SN\OaWP?
%DgVqN7LSF_7Q]L'T&mDpX?8/;*^#E5qq6G/YZa59:JH/\5-1s;Jqn:AK*RslLEBQgm,!&5C(g(UR7Cg=^OA:DOa"Kd!+k1o#E*L>
%BBOWQ?V*H+Fk3$@pZ)&JP5!rM9pR[?E3**peUXZ@ro:G.pX[?JrjnCFMmlJMVI/-_P<H\\nEG_+a]f9?M,&-RgR6<5l^b`[8T*_W
%e,2Q*iG:db34SQ*aR)00*%o"Zh'a&iU6k?02%T+ZCS,neBs,]<?9!Yn_;[Q0phm`F3rXRiGln5H<`Cr)qr=5Ad?P72jBgB*pBLN.
%/3XYGGfL2!*Snp$T"X$\bA.;=HI?5?GrNCL[CZ0^f,c[jpMT.)Ed,5+R=nXq_VX)f7pLiui-Ig[bMPPWD8HA<E'.ZV"s1N,Ap(el
%2Rcn:."m!D<^clAYP0,%$s\7NgR29KY?%\Wb?3O/FP4o'HhM!an6jMUbAXq[_g?On^\`D(Au54Nb$r+Lp'!=4*`qfUbASk2k^TPG
%[[ta8XNA6"/(QMgSC:80h`m(]e%8,u<a6\^ZO_'JD;ZSd[:l.Z2LDs&4S_]8h2So>;"Al%#.Ed2At&tgp\:#$qNf_ckfhZ2c*b@o
%U=\<gI*G7^oG@\Zmlg45\=>M,d5bWY15`f#PMo+o,lYHgZD28K1p2b?_;hGmA0u`uXd]hl*PR7qc@1.'nG(JXecY10qQ]ta@r@Bs
%gA/p46HBBb#Df#urG^pg1<PqgIl0U*FijX^^h0+j$!g8D1RoEM$,'lLVZ4\,$)rY-UAaq<.asK-nEQ]=k\>D_3kUn<gVPi3Vds)q
%gVH,ERZ#hY.c0r>@rlTpI==3"\U;YUoMV-A(^WV8<fPDfdZk4rYj,hoa3a"N<$*kKm#<_^S\\sLi/`qRhMUjaXh$GSMWei1[oUV+
%+a');N:THWO<0HK%L-(dXG5KN%R35HFA,'%^O)ab/aG2'ole+MONQVBl<e!iZF5YR^`3(B]>7P=M+b]PFKHbCcPk&pU<^Na`Xp/#
%HLB>"iA1M)c^Lcu7rJ(GZ[-'5[ZBN-lSIjR!`o6P?i[HR?d:b^ludL?/MC8]2t!l_H1rShD=bLP@#P,^E8$9ilmK!1hk6W3XRc;j
%kKT%+Tm='Zg_!5)pZ$tq<k.d1Z]K6hIsjpB@<bB<ks!1(U;g+^>aq?InFFmHJ+j.SZa*ZS]rLP6cL#^3:=eiO0$FfT>:V8F1X3l$
%G]gLaT'71P543mGD69sW'A45PFYZ?(EDqG6L=\J:5f0AGlW:Xde'hCoVlb;QcPn"i5P_sSHhR.Z0XR8&l^?f+p/\#$0]?WJ,,Y9:
%[c^h)06]!#pF?M0'%[2[L#M@DQ"ToFQgL>tlLma,bdHo?$H?B7k/YZYV$gQTH-N"ke7V`3:*&kK\ZJ3tgY9EllF1/0l/6+7:n[8?
%>KHC!CDac82__l>5&;t[GGk/F584sgN-;lSO5O=tE:>9*3.L\-^>Ypckc4]nXZNRRpYW/,<$+8.2#B.(WZbI*=L^S"k^1KL2M:n2
%rIeAtDfotAb-7kXDg6A3-5ZIt[i['2pZ5f[8I^\Mh`VhM%0i[J+'5&9b*'pA$X`WL`VK3$iIQ7@CQ@MXHd>KKqsqb_:T&RW_eEo.
%Mnd!M+2#>&DH6B<H09'j9gt34X?AMS)QOMJo&0637Ih0/^3mY=X0>XnIW]8^P:0jj#BRX4I#Pqjk0oT^gWQmkpEqUf+JAU\-MR)M
%cC70"DE7Nech!.N<d<EUhmPG8m5Op6o]b:eoALO5Z[29.`o?qel[*sbIsoVb2J/S`*'_1k^jl6S0>*4!b'[>PFroN(J'eW@=Gu:)
%RO,%M^Au)7o]%-7$I="p5Q,>c2=pN0Ln!(apE..!IS\h))_Nd,H[et!bbH,pK5]jpf#ur]D]Z?WjjuG#mK5E,iG@,FJFO-E"a&JY
%UNVtc*PW:'/$JbHPVI@9CO8d&IsL;OSa8U<c1,R.QO^U]hf??4Msoa:M`%R)C"\d94IP[&lI2F:`7&IT`kb)kA,!S&-=T(s>"UMm
%LOtVS9=!X^\_Hq.YHi5G(_=gn@XJH90&59c/J[jU#Nu)]pRgoF*AU&??sqd7!ARp6gcH]OYr@_qVqlao<I'%=n\qutT$>suDAMN<
%-CQ>638aYjW9+oQ/M/=q]i/&nWdOULP.&X%f(0E33dpnPLZN_\::;4[X:<".(Z*;8fDQiQIaqc:IkNbu0O]Ct"%*7,hYJ9F0>@Bk
%>rm59J%3/dXtVi"l>Lh8j*ek>@Ds>4]ap]Rn,[lR\luH"c?DmdLEDiQQ0-XE0h-+te%:;l-i\#Wq9Ap9_`,!J?*Sd<IpLg8lC[YQ
%]6OO8fB+!t]/b@$pMm=B?+YFj7@@iOiQSQ?fD&t1??kue\%B0ZH&Uq4:B//sEbdl,k-eVKHsWn'M%4(Jhql9-%%nZL:Ce7pD`7%j
%D#*_7Yd\_]E;H]^U[KS9dt]lJ^HX>NqHmXF]")LhH'l"3]U:QmZH^1!]>&fe0?c?6];NBLpGY%$rYRe^Mb1[N?`BSu#Jr=<++d"@
%>ORoFR^%9aEMaiP7_4?%bJq4'Ha1b'\\.t@CmP\(Gq8l5Vm'>2NcVi.U:jH_DFKjIpV"/N\Fm/I9cI%iB6]9dNJF?S+%:GFcZ?:5
%QbT/(OB_,&lGMfPji,)10mF\N>@2f`qW;c.2?o#O#p3,>+7gGJ=5,7^>GlOSpV5Lp+i_HH=dXX6GVag>WR*@"fkb2"f^2hGo^(2b
%62pB)B.mM+Alf-]<U]U9;E0K[%OqqWhT#kFJ">6pP<W1(?hhtfL?1J*B_V5(4,(@P[s)A:pHPd.q:6uLCjD>Bl^bH^Q$]k.R`4Ia
%h2f,&h:jlC=Q]-CDqn&#e2"\AW@Bq(o@!kJo&Nh[2>:7Xj73DKK8'6YY29UCl?qXPgtHWuN*dUFhUe#+=ltTa@2IRM,(-B%oC]ZM
%*c-2eMAu6`Gko1N-IP:4[CUMXS1uKDa*0R?=1n8d?U&i2ah*aOXTne7NA@"%`7GuI]FagJXYD5S_/]YOnL4O8Z=)S',p(![\3J!-
%*Sks;\GL`ePC*#[/e>VfiNj?^I/,%Z)p3EHgh'">D]Kqn[BZam`n)Gb5\,5P%opC=?SoLY&)sLpr;OCp9YC2/oq7DIeSd3tHAZFP
%!_<SL^0"\9P^iDn_1H,UkN1!:@Eh!'/M-$jh+W"bmAq.Vh1acq+noXrQtcEmNFHbeN%1iEh\GF(IKd]Zbs0sm\I-kI/4gB7]%cZ]
%b>r7O2SQn4\8cH4(-hON*f:u#+SVqXj5Xf\>kd+A?$/EMh=+(#r`YmRQ,5>!==VO4SE/\):G6T#o%VK7$8YCPoZZ(4iNg)d_<VK*
%5tCLFO1Ubbb_8-f<cdiXPN<&@ft6F^#/+oX,KTdSHEF_jL$dH2cC8*b]f+X%rsYH-T;It*T)6;t&.+qXJ+7;t2HQE\#J9/Z@Gc?6
%L1C05f/VKq2s=FN-F2_3Sl9m5!;,:E+.5F1IQ@5`cMFI3RJ"mg0[4T]TQ=bPn6&k$q,cPhVE0R-KB;:lm+0R:!TneEbV]b%m`kuf
%Nk?8"1mVq$=Y<_6dMnCj$_G'R>jGe!iiuEaR_.8Io?VI2TIFfF%goYhf&OT;-Hj.$F:2I*E]a0C"*H#_i9'"@aj'&(!.\7%deqr8
%cb@*OCYlW5MW*",XmOn=pU,(n_"b&0`_!QiG&68.VH=35?_>Z_(ScSa`<QZ8Y!+LWhE$/4';,rVNJ5g7IcJQJ(&`;o^\tfGr46lh
%jlHF.!Lqp*ZiNkkpr,>Jmcm%X^o>]c"RsW=@:0T=A0[`%q^ui8j$h9b;ji)Mh0E)3h/-1n]^CZe6K4(;\F/^(1)l'2c*#St^4"aB
%c>SqSG4JFAB+)eYDJ8/]="BjR0s,S9Dqmlir=nMHF)^O/H/R6rgt&S_\8O"oo%otjbgM>2W19K'44_Elo`qD5,$Bo@QI>3\M_Ft`
%_UgHd#rp2sjlSc91=X4ab()@"`%*-GXQ,@N/)JP5%rO=E"eB:sLP<EFG%(/'eLu!!Z6Sa`iSp4$43/i+5J9#Dh7>*Z_(4Z\4*MUJ
%rV"o2/m<1;:kp/YDkm)F\UF5.c2=oGT>0P>&&-icDjktT?Tg-u#>NSkT,*$trN4gg+31^mG[F7<'_XS[k6oIW._ES9]n#Z_PYL-r
%Cl>]-Sj/+nKlcSG+/7ReC\t`S\+rDkG4h(HlRB),J+X5ZW[tJ.CYTD!59Q6%HM$aDpHibE\[hLJh/*Qj'8,5T*P]a`<f>#oHe!gJ
%pqU19XF3(\=R1Ytfk!ZaJ#<9N<Qmo'fpdedXAaa#dC)8m]3h0]'_:'"e!huoL>83C([AQo@Sq@<XrK)XQoD82e<#H[luotPjaJq?
%C.:#CbF:$]h#ckXf#ipH_ZA;%3pb]YPW%TLSU8o>r#.]oIeS*6Ym-UtmQB-,S,9j=6_8EqqB9.m9<@Z].Z!f^qn8p'rHFN.,'K$=
%XM<Y.I\jpJM9uLVmqn/C/3Xbj5$tf7ZsGqA/:crh.-tU(=#d*a8C_uGgAtA=#[VG9(IVe@cP:'Y=n/Y%^7*50]l@EhY!G-.mGQ7`
%K,cI2@:h<#4>hAe1H;LUqnli*J'dt<T7Nk\"5cT>Y=+0rn#gl@bqHV?+7;UH(-kI-S[DAik*KcIM7X_=F&/,0HZO*@:TpWSd-b)t
%PUR[qkj.Nm;;i"*kg@bQHNQ*Woj$O(HN>E;>PZUqpU>lThgJM/ppBhYH(P4,cLsoI`m5$:en5=c:3qAQGYi=.c/tYT^Z?!?]%6\"
%XgC;oAm)uTkHS_b\To.+^BYnU?mnMD3F#ne1>g@DY(h;_R?kf(?^NM/)S&J65<Bn)S]r`<07A;_'%T!bmJQ.bcOSq94141(A2I.(
%gLUu8l2t2\&5$4Ygg8lSp.Ls^2f?ZSK&CA90\DqGs1qjM0u(#5<%f&;N=XpTA?o!MhL!4JXkrht#BFnc?KlgnqK9MIPOIC2]k<8H
%E,nmIJ_0eb#e/+3mf,H8QWFZ`jQ1Zj8BM$n)mrk9`uH#"b[3BSG](nX.N,_eKtZ?&+I?&h@f#<#djYVq>*i53-c>A\W[H+iU7.hF
%G4DfB0m)42MWsP8Iahi*n&f$`lt*MJ<B2%hn-*oAf2Zm&+P43sI)sYs?4EF2R,'p*Zn%PRX-2]e<AN]=AYrbti!/"\k4bWC4ju%_
%L@$SD1YD`>HnO@ZPWi`;D1("i*DPr^a_"kg3O&FnXj7Fcr+DdoC"D@m7Qj[!=7H`tTn=EG_Y@kOT?@YIhHWNVg`)n=9?M>p(oUEU
%<-\\ZR&Lhn\Nb'Y9<m0O<D.Z:7(ZYa_Lsl5H(GB0&#O8'mh6%OA_)inre.<=9XfJ0Mm9T)n9i*D130?oD-h2n+k`)HZ/'\0fmcr&
%r17B<<D':aitQog#KKceJsSj+%%U#%;#5?>6IGf2.HgHt8-r5QIH`2AA.$X%og\2EeMsPhKueSjjI'36bHulX2hLoSlCDcDbD5ZA
%DTM5n-ZmWsNq-]S86i5[9Nh>pYHB<YY83UR5>8J*q([XTQBIanE%Y6]Ik1CAgqXN\gjZ#Br92p6rZ9DTe87Kp6$19<NRi)V`MH^`
%Y1.4Q(H\,*5:`kbGFDdNkH"R1:X?'6EiPDa[q@?skiJ73Lc"TrF2Q.-,13&Q9s^ts/I`bJh'gJ?<Y)4D6Q?od39@OrkF[\oT3,_/
%/,0-S%;aB%*%pM*]\^=[HH'@^[KHO2qj$UC+n&;1JCjcTYt,1#%-;Ge%"oQt7@1:BH+IsFlBgu3.0X\DM3ZOh:3U9uAMXR\rBkV5
%En,`8<*(PT[QR*fDU_=RZ%$;6:6Bd/CG%ZdHlA'[Xo)2$O^_UJ5fE#.pP+uU-#Q;GH?%J(+iuP&QRi&_EVZlU^7F1F,Tsm?s4Y9s
%T"+D>Y06If.39HCSBIM@Mi+(JmSW^h^L""md^T]TRI(L>[$Lh[#qdPNFpF*+48r5qP4"UO1K9^XWL`H@`2QW&]Y]u3']!hUqRk;)
%K._t=5BQeY"k1'B'"6!8:Ph/%!-)]6/%$S%4brXY8tjg2Sc3C?l\!ff,mOd$MSE/_MuQ_@e`T\5s)XHHI,:"iV:XFlCoPhL61Erg
%j$ru,KAS:AFgTOi3+I;]2\chtM/SU57<JCmg]^X%eS7/\&>KKCQd2#h_!g0NqJh`;r4E@Bouk-HZk1[MYNa^%a*6lDOMO`?i1D]h
%"s9t:qnN&Ap&Vci\sqBSPBo!no.IJ#]oa+GcL1YiY3tfdq6[SS2ksohp>iL1]c5HTiB@)k%Y+NAh=$^.RS`8k#BF8q<scKYB&K9H
%P@+=<^DqQmI<2XK%HFO,HS/M!UR^4&4N>2js69+S5Q7]naU_Y$HVp%#D:cnR8!]F"/2-(c]dV+YSqg?.)hl.BdM-442g3U2A=Zib
%nD<fE_U-l:iYA"Cj;Ukfoe6?%1UD9]muW+W]AV6;,3@!Bh__O/frKbgbYK9h#"lIR>r:_?n+F=FUH)Wt#g#H=`,V`f)+7WRZXdfo
%i+@D`oeX%G[:2']9;K%.a"ekuQ5M]CSW3"rcBRB1O_dI>76.'6og1aa$oZ(-f<n!P/2nLNnmPku>kZkEnZ:aRo!PRT[I(%93aThr
%U9*I-+^EpNqL0-/*"HR1;imo2#'"0>U9(HZLXKW8=YCD1n=0&k_&j`\m'tJ>`c:?)lUQ3)/Q3dgD&G?k6.*ae0(L5\,o5Lpno6i!
%Z@6IW_Pc'0%V9OO-WC_QbMPYbYh(!.c24[#ZJFgldrQL%4p5lV$i%4_.#OjZ+(Z\Sj'tBBNW"B3W`/Jo[YlYEKfVOe/'NZAeoP,Y
%bK\bTj-%iA9\0s"RCBl2++$c&EPcN/=jeKu,_A?d)4ETQZ9Yi9Rpjui7],JJ5l`[nY+#kP0?=Ff73H%VAAcde19laSQ!M0PLpYjD
%,K,ZRR'ZtLar]3<0T^(&T[M)J]b$JF<Y9MF[s]pq67bnq.?D&@S;HU6j`Ami8LTB$!dLu2(/YHJ,g6o/R0%f^EBmi=L,eLP&NClg
%*&igIc2dh+Z!]X),lsIH[W(XaT9WIJ(0`r%-LmA-!VFK]BF?[?"HMNaqli<%^#CleO=@oso)j(;WBs?V2@VnJKkDtV*us7n0E=be
%L,tIcR+7(]=:sD+Ld;*\^*A[A_WM]'KZl29?[DOpHPY^/>33F->=C-^*]rAZmR6p6Kl(*G!o\jV,0r_3YaqhU6=2\pQL)!"*S;X#
%-!<QrH/B4*n=Zd+n.Re3[q0Tg4t9Iq"N#<QU:Ne1W#OgFJ-mb/FcEtg+t*R)I&LL!arq=ZJsDlXfNn?2P&N)jk&!Dlb6m&jW&*n"
%+plM9AMlMS&N"&"iH,!aT/6_E&mBsF*D^;+ns/?7R1e1q?MHMNI6?eO;MbH;.at$l^jJOXTj+f'ln9I"f:q5sR=rPi&^Y*R1q]A9
%ZGl1?*bGmr[Zu\d9-tWIBU.720t:+@Mi(KP`W7U0<1OjL)nGf7fbI?d&Qh$`aYa[;3OU:<o)p3s0?!1(..n]`'bTJm%RIF;*'hDt
%=q3Zt<S5Y#CC44X=JU1JLa:R#&6;oM'CC[L7>+.g5.d*tISgZ=.!t5!:DP6-&UMk-dc/C,<odiQ5GJ$!$B&_$m)f5m5%H3]"8O^H
%E37cI[Lul6JZ]7Z"/'Wrg%cK9+ts-9mL`kD=HTum&m&%dji;$?a`99j\HRs9''H4O@t12NKp;]];\n-HqeQPTciFSDI0ug)nkS7c
%K4LLnQ%ds8VG%V[;mZSt8V$iPZ@0Fe#:L.K<);T-Kt3)+SNYATYmjp6;Zf,(15%k35:!_U,_9[*aVTAr&KTrP+o[GiS!5,P@REQV
%b.PWBZP!uq!Z7S%3(-:bmh#GO^P1k4&[>*)$VcZKjs-Vs?,u(UYq,\rggRb)+:B)fE)LAe<6EoH:.mFV)hfG=>Yh4C1+l2Ea5>Yi
%;$2@T(]Fmq[G!>8KKLh\18^Ot_0[nD&rVXPTs;T%n5!=OUr"9`7<-FEg-R\JLcCIJJR&h)La&<!"a3Si,$%F>W5nYBHqK4_757j[
%$EHO[/HIgV&;1#o$!A9U\.Fl@Z_)g-o)XObE)B/ZUn)>o&bQn(5Ts1hLk6:e#<R^-K`MDp*<etYdtt<JXsuod):/TZo,V0SMM53I
%Op_Z:_Hi=+#'12m6k`+Dn#EJkr<2/BjOdP\=6@IrEeV!,"g5S[nnm2?<uDYJC^I4T(Hk7k!L+0_@%0=44SdHeQ,UQG,_Ic]Du_j$
%HBkiNH3lBa*TZshK$!'2[r?jbNM-OYKBhAs0s(.S'HU="F;<_#iX6LfN:;3;``/d$L@?o\T6il.#=/]M9>CQP8,t5.G2&!)=I-aG
%Ln62u:8!F6-]fDQ(U=iBjkGlGb6I"K#)08gcrq%$E)bLW/Vn!@aKhM^?uj,c:](RI%q6^q)9i?^.b.P\M_^XF,%uk?D1E\\!jSG"
%TVbiP?Y"[P/Q.6+oH:h8eV+J6Q4$m>4+&.q(jAi<P[#"i6#`AlUU1gI'OdYL<;9@-5n&N;"@*6J7N[-5n7r0`:jMo!1b@D`9(Zej
%6bWr8#i39roe'jl%W0i^iB<;5iYss+4s6Y@BMV$I`#t02XWa:'*BOJ2&;9:/kXGe%%VW!N%HdnCLgKgid0.-3Sr'3nD8JCl.o<"&
%=b'3TbQLW#`j+5k!C\oKJ/&ok$em.j5X6O05#;:,UDW9X:ffb=$n(rcH.Y?dk5i/pQ'[ia\;S^gd%/Sfm7AGZMp-]@[[05qJIu?E
%NNEtk(D%5%0%mHt7&H7PK]7l;nj#/R^B,Z:"]Fm-fGL[i^'j]=!!4]$9gW!M&-*e@5W6hB/2#nDA'C5ZiZ/#9*c)tg]FFX30?OOO
%`b:O+L]]UmK]FV\"D6pG#c6H,&A<orW5-aR/>>'XAd[b?ncm4"ZD3_d8CEQ4A7NuW:#JoY'\V6^"+'TL*DQ($W!qZ_i@D1hoV[)e
%%If$=RYZ%(^c:6dBGfXB0E>PuqApJ6L7&6\[af#B.1Kd@fC\@e#K`2S"3s?7_04%\#=@[>-4:IT&QQeIA=>ml"6D.39V7SNbOPJ3
%1(th,*VMNTA4%b2qBTa,7F22GXptN^eVBD:!>T/Yq8E]35s\0QD%ok'@C+e<$m^l[MVfmgaj#PUMk.dt[UR^HCoki,asbiOgP,c]
%`o6H&PPGj()Yk't=bRM7&eRJIHJ7^f`6=rr@[K-`"ZAMg@J[baI[7DZ5D?4s:kU0k%,.j&c$=Pc.R%Ne$/idX(3d^G-I,IW=mQaU
%FuC#:$4)2%CMQig5e5NT!Jg!HZ1F*/m%SUdf<SPDNgK)?2aB3XlU=:LKJj'u2Goib:BaV1_d(j@>qru$SR`#XL7I=o:*O_0J`#t?
%,@.X[D?*1%CgLM#^S.3?V#lK@[5tP^(_4lD?CoDB+&Ip1VQ>u7EtF9"*82BjaqL5'X5L<nZpQ;R5ir&9>6$rS-51eSPkHok3nbA9
%9I0+'_2g^8'oI2dEZ3C<a+<YoXH;"a>7tuNiKAJ^Z&It1*CXlMOmoE!(G__YRT-Z$W6\:g8e9ciaCP]WW@nP\jaa4;iJfkjE"TRl
%#QYTrQZT)_;k+C&G,.kOgg-UhjDYc\>>9X@%:D:ZG*]1n#oUQ(hZGgW$pM10kc$`]#Ub?DDEg-T?=LI&(a:@e/l4C3NG*og>67&7
%of5S\i=jh>g]V"K8)^6Y.4;)o7RRe",AIeG;".T,mKHL)`'WsMkZ'eO>S85a@NucU+PN)-:ORPl%VhM_GlUdeI>gHR<P2W\;h5g+
%@a5d'0nR`(\5n-iL0/DG$"5K]VUFis*$"bW>9Nd6:%AelmeqM".$hq1*>*h;Lc2.Y"#:2k*#oN?Yr0l;Ut2e6@i.Nu";u#['SJq!
%MHm)ajZt)-@ujks5ENj^>XZBZTSehlj:k`R#RVgmnA/.m((2h@5UMpq7oU?MMK*;iC1D*8kp@)llt8YI1:3B6fJF)Kdl-PQ!_I.8
%87pcM$p5<;9#Jr963bpsOTf)h'-]1Q\(PtP=B*:^A'Y9#4@!mo@#(K:djl^Op0@/"if8"D=nRtd%HKkBEX$+t*[E%%38'&-Bjcuf
%$g^&Fc:X>(-W>cMFTEIqi?>636@4LuE.:9IIDd.VRUnC^$6m,p35@^+'WZ94]-B9aThupUln][s"i0$up.d=QF<h<[]K<E5o0i,<
%:9J>IRX+6@,:[.>_@Y%&N(C@)V"%YkVO2U%J?on-"c?-<`GL7R84t#@Q)=q@',,qT6ug7bW9W$@<Up\mYp,2UY^g`M3:9pU+a/g+
%#X^@")%*O$mi(g'M]In1KF*(aMUZ["!I#UI_<8rq"j8Yj`/bmJUda#Ga9[cB;<WpoW'q"Z7)O-[HMCH<G+_-827"o%Z(<jDS;%U!
%Z%ta2n&34:7gt:&2F^8?bQF\he("TX^fCqFX_bIKO]WcYd2^RM6j^X?EH!H5B44=fZQ`9]]=quX*!]4%p"C6G<Hs.`K;N`%E8uP4
%Qa$V@Q*D88^8#EIr=C_ZOJq(c8"1`Yjq3-e;%Nui%QdF%VH=]6`!\AO&pV;OK=[]l_4D:b#BPRBbcmA;?N?Te</uh'>&`J<2:sf,
%IR\]Jh[NPp_[("G=TXTT7>R3V!Ft'hjU4pEXp;CY_#-+h)le)>,6qPVb;`mgpSh[qZcH7mQQqdR.Zefjs,9+3,`,qh1CdEe.btZZ
%N^F6iP:+3aP&@=4(JP^HdZdn>9mfRf9e`DWN!KJ70/J-LCuA^I&>G2$"dS(TE8D)bQ&0kS_;FG9Lrn+qKZXlka"5fh:aj2fr8_N8
%_!nCT*le"I.g&t/k+PGO&(HYW,G5VM5ggE^'LP;()$aOC,UBY!2X4+/"NdJRJWpn6)VPbQGDqOn`eVZt<[<A)!b8/_X;a>LSWa<b
%QdL,(DaG>\Kh,cDlq"euT*6Am7Q'.qqd<PM/Q5<j,eMtRD!+;X6ljnt)uJbB+,9Rt2A(WFN<h0E'GTfl_MJV^MP+1,KRj:mF'StE
%o>ko+8r)%$r-^E<//Vs`J2=QB#W#*EJX@=DOBD%?6kgq=r@SplQm'uR3l]W<p'_o#_7+FJKA.<B&sXpF8#5B05I:n!JW#/sKNf=`
%!fP!iWY<;=f&/!p7.[QmCM\iQ4e9&=6D5NJ"PCXdTC?n)pY.u=KFOXg@q@%_s6@&1itO><ktt-O/QA)0?l*>?,N&T:!a&o)K3%T<
%-aNj57=_I'neWp'&3pBF_0=O%9SnUY"pCP8hZ_>aq"HO2Y4*@3XWTrk6L2L->O"sLF"i.q4sociLCgKV]$Oe()mS\L3/T5I>mA:S
%//(PhZl3ofU4l0]F\_GOd*keom3m56"W0Y#PPZLQ%.PWX%:G5.!/I>kO9g5_GQ<t7MOKGPKrSF8mTc+hcgjb?gkRflW8NNpn@V"P
%V2tP-lY/io\M(N.(1\%&1+g<n@ap=7#VPWYXCIL=2\W!(V(r<"i`HN'XGO49<5C2=RU@(\`!G:a/.mK=TV!&c:a&(p9ihssO>8W1
%!J5D*QAGeVNj"OpM.i6F_qh\ZkCEm]2E'(/L&uBH!6u7@;#p`=KK(T*5SQ@tBBV&S(i!.V5prTt(\Rl4F6$*s<.ucpk@/<ckX5.*
%_NY.FK02&G`HFol4FeFV*T3brlH19Q9X#[(Vf8Z5,fKMP5kt[T"6bZ8#]&O*Ld8!#i5%:,<#.nB(b4('!9?"pjjar!a)$Sh=@%0[
%hC97n&D'9%A0*IQ>-So)>DmL=OSO.K,"OgBE@YC18VNq9*!f%rCdHdA.9b@@^dI<<Z)<K.(tZY<*!D??"$u!MeI])2_^c9O.s+a'
%MCJpr`4NOFd(uHOm1<Y^0S)_D@?!oF\f%](VN*8$bi[mVEIL*U$W/A>#;r[1\dW-6K[)47Ue-F=(r69?%C2HHr1k/U!gpF_8=%Y<
%()_c;/[&f$_G6;M0n@!5[Yi0ENGq^.M8g;`TVI*(I7PUM+r9Lu^#2OoOnQYY$3G$DQ@W4=)F\cM>he0X!FT=H<,,*jJ;0@&IZ,@h
%89bjZUREB'0nXIhXO1nh(l2S1RK7&aKLoP.Uqh[Z+g!pBB0^55*+up-6H-aj^g`f:M3&_YmUG^@WQl%Z[3D+(`hZO+-CHKdT:jRi
%-IWPj2rGF%+f&]U8dl#WYme-.oJ$j?KYjhdg+tK]M&=$"nH1!%`6.(`LoudR&H^'9$uCgNBj^sGj[?2$6(rnJ:MuiI+79U`l0:7I
%`]\GA,VJA,^*[$kOG,fXD`+!O6;EVIi7m3h7T?tOF#uZA8BXR<^`:aPn.VjWUeRG@c,+%\>&FG3jlq+s8!S\5dIEp/$=NG(1>q>j
%`1ge"-O:u+gh]`;n;c6R+AamUhef.0"`bi(J]qd/Kb5qX<C,*%,s&Is5)m3\(e5LdYSadEFVL[fA]$Q+A]aLR%E]:Fa6[LY9S=.H
%aJO+iD9Wr4I+L6#e4&#@^_Y=:Q\l!eL0FjX7JN<G7].cC$L_YDPgm-1LfZ@h@j`_l#`E7S")*k-N@a_<*"f<WaC1H&834m-P\o?(
%Ke-V_/YuslC/DR%)o1`B7M(+0RDO_&<p'R&?YI>fd:=Wp;.+_m#=1b/$3r&3^fEu;9:N'ZFG;RSEjJKi95&,7*tBWm>LMkP?q)@X
%:t_H,VT'cGVM(d3n>UeP<(g,6i?>J/F[<lN=qBRP`"K<Z/.=3JR:Ku9h1lh"'YoI`-[?6`C`*$<R%7e"bmd@l`.PAe]u9g;@?gOH
%KT-QG0e5r=c$QhVoY_?g@/*2bV_CqXpRE&%jR?Q8@Kp4Nr5`J9$NdOJ_kdnLQMu+oJ4Y-U;%:BB%kFNT_?I9b2pO%K%O%CM72g)F
%cNjF`Hj:/s)M+A;dtEf(gj9LNgQ#Eik;2jo3)5cZ&3XJ<:/_9fp'&VO\.nc2>=EVP'LkmF:?3^C#;Tl?f)s[r1jLQk'X?"],V&@P
%X`3eN#cl%LaL$5<m$eEB-Pemd&;:,ZUm>YMUC6ldHBB@DED/1m!aYt$T]PZn56SXGF[rlom[s!\C/qX8/;^f(d#b>k:0M>$?/LMs
%f8=Al"*3CS3IR$Oq>-nE%i5m>&>Z9,O3SYAg43Ts!g1MI)&-NT.Z4_/qQ--+1m,Ic$7(&4c\Fkr1%QmiRGff=.h"ZQI,eu;aE'hj
%MD;XG4m=1+:>ZZ2Eb(l?M;Td-J8n\rj9lB*Bb$8cYYX=60o-64BI_nA,6kb$Ro5oHmXciq27IrI:8SLl,Jga\+?,8<`EH)ljC/rl
%:&)e+)@$aT8<li1/mS]saH@np_tSBWI:P&RYf`uC[N-PJ5O_A+(g-r64-Gkf:(UY_6oXUmGuWojO\VZSQDO?lT(fLXfImbTF!u6P
%d'STGDtJFZE0AdK$Y;KNL[bhPd%Z&;M5QA)ISrsln1p3'*YS/VF2!t+ZCAX)T,Jp\-Mf./6fa<sKLLJpq(X-DU5h0`)P;/X[ak_?
%l9S:HKnu![-)`@@!"BLkn4X-.'D@!23Z3hsUF[_LUG2OVWJo[<lkl)k;.QX-*A',%_t?`A0sHc*<Io*0UMg3A9G6!cZku7,dkqmB
%W?mdlbQl&g#3;Q)Mg-.H29L[9;+Sg7[NL*P@AF!c>ejf>QM-`nK4csj60&p\aX.?fCn%ssa;"GdJi$SLnuN<A>0+*Z2^j$S`^Sb/
%,:'%:M&*Tq@FV@8n?lV43N0l%eo+"rMLTP*,+(7?&OBHZ:Ik%Z9>ib&6hAQ+"td].K,ls:Nt);V6FL#f;ZDW98*HIHE9r+U8=%V'
%qM?7$%/i:5(L.7%)ppRnQRH-=\BjPM%,!qK*gRbL7)9^Qf.rJ:lu,RR0-A][$<X+D^d4XdhW0tV2BWJ6=%BVAXa^G>$M/PcI-R[U
%8V&9n+D+)*.95n'Ub:t?/N7ZI;+"g_;9*JlP*nuM5W68#H7j5L1Na-Md^R%?7'oFP4B')u0kDd\A<IjMeVH$Q7M&l>lN#L4H1jr-
%UhC.ek"(^+HV1;*`(5Q]1,ND(Bo0ekIu[W<)f";alA%[2<Rk?s]22Fp*VL\0k^B]r/sEckJLhRjedFVcPbK_J>uT"8e`q1>Y0a]T
%#Z(4PJ"dNt\3Ps:<RE!h6tPRPVLI#jAqG,)*,07EiLKAS.5t68YSIYNqeuTcZ`kmYdUhi$7u]B-.P7?[<R[+65[P?G!/G4ghDW1^
%b`S`e,IZ0\8JCBfUVmGL!MhuF^W@OiTKQ7iBfo0NQ4,JDY"<,ieFmWgZ_PK4%+_`Z:mt5-_6SI>\7#\_<?N`kM?=^A&3YdcN7NQ8
%YS]4ofLGoAg!D"-lfh*1p<WkE=7_%jKd8QR^<[]R=9/+"XO9Dj2[>8.76q=@)PMb!<qF645"Jh2MCMHE:$_'NF/,C$O3mAuJY)XU
%J[uD-@*O9g!<=]Ai>OSM0OW8:UHj!RM[^A3-b>i9]&i6t&S].F&#LOY/Jrp*&6DGd$&A[>0'=sk?lK5@]ddkI)`6e"[8%cfch@4&
%<`PC9dnG;,@b3>/*0q_'A)RU)5n@YF9"YuG:+\nq5p$/XCp1PZ#0?jeobb>j<<8;'1%E$!qC[8r\4(dJ<!on7%H2/e!]elN>VOWF
%1[#.ZUM#CALDH;'W9aeR/?;JubsfE1M3)sRI2'=-K;K6+FL7&:a[KS8U<oTXJ28*=;SV>@N"CEI-HlR)bJWib\koPH.bu;c*.a*j
%j;=>\fRd`]4B+@G8KQVuOTg+iAKW>4?/s6c:/&tEeRfkH#;B;]K:k\]H5t#/;10WfXEG&uA<?/%OE`ir&E9(V@hE+0GsfEO=fjru
%H!l4R5>kR:Y=@&hTYSZ,jZP#&NYroRs4k+[&`A_%.HYu?PaU`E<W^)DQPDP!PC<pWp!m&&_=q%"!9_Y%cqEZ\;!5_V_/7f`\erP6
%D%if<OoU]Unr\dQ8%i/d@pCoNZqPTPcQNmVLmGr51Xj>I"WGTmPm_(A#[fCNK"qUaa#)2`=>YpH(pF$;,?l=Q_Q^WVB7(.h1[5TC
%>!46B(r6is8;2;I;o/Xq0djoYPLL".6X"7J;PM.f)O,>(G7R6+nM\<=,L6M?UH!f[!8cK@J6R=saHsFYUt'%Q02oMCKL4PuTdi,Z
%c@PJ4P"U@Q81c8O8h4*/2!b-&fE#RnKVY%[k2SR97Dk/AZi\99MHPr`gLE#-i^V%O/5/<De`;%DMpp]pSmm!-kCc,Pe\I$>mJ,fp
%P-cB?U^ofq/:BK7-#AA[1N+J;hD.]d+_8G[W.3-HoLU=cd]PQ,U%(6D]Kuj)/)ZeUA5rZs8JD>V]"?1!q$d0h)@_XBqPgq"1lOe;
%V'p`M?3LQ`_3gP_RGoN#"E]QY4HOoq2)O]goTIO@I:Ep%#%\b\Nir`n,4!G+BclMOFPZF5!]laNlnua!i(TbU^>KU(VF%<=i^$$U
%ktaVqEj](c0W6EUA(WN1e*A2Q7u5Er'V(7(CR(7KU^_dX2<M*)8=[82%1_nPF+DJTkqdro'Eec8STrZV:%[Z]DJ`dsNlh9Y-1P^)
%;2hS2@Dk50`W<_KnU8MY"K8m:peouM0lZ#J5R&pam"Z=C^c(+V"EgDh:jAnnhB:1l/;*"em7A!0,m>&f]EhIT"c6612P\8=IW^U$
%dpd!@>SHZu_M@drE/[/f+%9c:P-d7sX+IX3fI%J(XpMt<:#6s@^.r_FOKF?)7NhqX\&MW4?u25OB/-aYd>)nP<&'6G=peSI^;bD+
%FG;_`jPF&!^q;kWhXPPjOsu6LjpXCq5$5s!ZQ_`pWoHF-`Fs*.&91mY`qD9G)k'H#J1N:I"/lJ^DmK>;+s0Y=$J?3gNl!R0Wtj9<
%@jS!Ne=.YL!!c+uWK/Ml<a\I&TIuD];]O`Re$8EI=K$jWS%r[WY`=_&JO%uf,kjgPbO\$J$4F^#eGpm+:aUa+C[_V[5XAou=-4qJ
%Kb6<?#9F6a,I4[?*_=+Z*_h<T63Fa6'1%5l/K4WlKP5r^5T)X."@t5W/Ck>Nbg^6Y-ZU-6_l#pYK>a.pk?q1<!0].lLGjp]h#Ns=
%M[!/A1GfU1ROLFKS0uA9Yeu_71u93c3a^TC5ASsii0$"Z#,3Ar*MCQu1N%T=7hWUj*o"p/@cB3c4pqC^&X)G`^fcU8Z;<YA7=72u
%`s>#%eDTU`#f[aF?l@+r<C_^=<I2(REB]:UM1]2LA1&*P@,V[U%POM;'([Xo'',oTRVaCsJZ,BJongP<FOW\0<6qb:a#+kK6D=9[
%;du5@=,78q*#^BOdp^\eW<9#9Q\SDA-d<g3C`ZZ=1ScPiRjr!,LpT1BPZA6.%NS</PdO1d4_bRT^!]'i1'LarDZ/Uu(`j8SC#p3o
%7seEc6sH%GVZ;S+@qO@\6rK5dS8N.<NeSr[MunY!27F2REiCpW8A`@4LF$,$n*qMIa5N]"Z4,G(=p^lj2!]tL397Tj;.hGJ4/"nV
%gT%NdP+0ul385O"[Q,-;+D<0?Oe2&82I2S8KXq43fYK@0#SRo'B8@)>KeXhB%M)m"4a,G/Vhgq-OuP3EC*SC%4PB`.VCQG)[&[fa
%=@IqWii"hfoUB:MLkS?hJF3%-*JcR#9"15T`VK\>aUc'+/"pq(/Do#GmZp-A,a7C0?JpAl,q.8XO.\4=;\aOj]$dMfm#bqK]+;EB
%p:u+_?hn<sh1QH\0aa15[$Zs1l1+0!,rb6VY-B:Y*KLAd\MYo=p'b)LM?Bal6\mjhlh?_50MDtB(Lq'#?Lq/.NC3s&>0nR4XsQnF
%c/Z')%`Kn'h^IndS5:oI0EGFr^^anBWKDk%e-?6[`F<Bu7r(/b(':,:!:T!k>t]`sU;"!d-=g/J*["jU$DA+O`C`!XZ9it.a]UMO
%7CqU-FIX>=QBB#q#Ka>L_Sac,*c+2o6*.;9\Sl4^6I^`M[Q,KX<YR()q&DPV%>JM=5=C)S0Emq.0Zs#D<4m3/&aH[#ILsj_#K^Cr
%Jlo-E&6f%Q[8&FjB2IJWS&NSt%$;CJ:tnYD*-%Ul8u+-IMZe$]*6-sV.CAD\E_7ES</`$u=j0nlp=?">)UOHfjcJqB/<M)eEub?:
%,k2/D?:]Yoah]pgp"7jlHRm2Upd$*?87jTHUJYTdbQ?/Lfgp^PjCC^#,]UUl9Z"akih:4r"hd8CKK'lL5tm`T9c>,CTj.ZN*:4k`
%iou!oL<WGm9uFp$&!04lGSkE'3eGFgGl$h^0_Gm+*N=+DJ32!`!Q^[]*DH)eT`RD0ecT7.`,C0F=Q0h[gn(\]:G=[-9`u9Y0khPc
%UbH8/UBR+D8ST_WCJ<UU;<jlel[Zcs:(Lpa4Oqb+#17MYWY:kPlB!KQ+`Bj4J\Le&ViNe\XbY/C<(oDm;De6[B7+LqFdMi.^`@@r
%mHPV2%;3O;*Oqu>LGRpTF&;KA2"-))AdpT6S$9<gR+WG']Kn[(,leE2bFWR6H[^!E-/o.*\.(kW;uj!:n.&\d<2ItTgVbfYkVca&
%DEq&0&sZjrB*r[2J6;p!'W7rM(?tW6L:.hZn.lUkJS/]u/VCA$e24kP2uu$QN\hEll5S=XB(R,GplHZZWOss=BkI./`#eb7b#oQi
%pNkA/J8i.H#.\)*?m-6:SGL#k5/o>A&9uN)O66%]=(Fq"[4!%MEh:+E6QWT3ali1W]B?_O'P3oWe[0kN2^Q+mS;1;IKK;s&n4g&_
%T-hWfZYb^&2uoJ%Z,i;f]Li>b9rsalm(?CXjq'Xo<*n=pPs[k.R$A3TCbppf3[]6HQ8so(nIjTH:A.O4`,#r6V=[Fni[(I()Z.j%
%M*=ls1.k-F7Sf;CU;3T/FaS8MMBVbF[D3(JBKQZ"*>.feiT]X,6A4InfH=Zr$lL3bj>58CP!gmr6U8a(CpRn#JrY#Q[lXbPn/uhl
%P`^^"GROpV0'5-h%Hi[:EtTY50k`-TLeTn&MrPd>hZpoSWFXR@ZOA^eRPK*h7B0PF%R=E2T@aNTieV`:_Hjs$#QV0W<q'CZUluO_
%'&VAGdfk,S$<aJgO&1d'=!$I<Z/0I'_b(l&_JQE\L2T]*8;b?Z?91E\6nBh2$rGdGC!?oZp9Qs4j\Z?62`[g:f=2nR,>3W)PCt<K
%K]@Ii;eo!dQ)QkYLdEFQ9S-n:qon%6P^-qaPN@P5`n0m4-5<3GiXOH_,r[rC1P-g385"nd%%i23og$#`Jh@groX%YEW(+kYbE=u)
%Nf!!sC@9M#n;-<G+,6_W"A!=<IWAfr=H.@eH+]0\eKCnpE_kGaLk0)m0SKdHP/'j+^j=(XD[MG1L1i4-3RB;boAGT(nt"25-csm6
%T__I;cbj$:Y(iYkUF_Me;,cm,QGo#':N1<Wr5;&&R\ORA0@5kGPd`F<!s,`1Vh_%9/:6o39[QrnQc1gUkQD$:kS]lN22dcfS3lb<
%(0Mih`V:.>Apjro4A65:U&NiCB1$LLf';daIAg'.-Ea<e6ZP/a-rd)deTq]McT'e!kR/m5CuTRJp<bXOguB8a<pWqs8M=h0]bMoW
%hB5c5[@+4L1.7pk:EsB0LSf#^M_[C`0qeej($'YE93M^UF:`7<+*VrAR42HOr?s=m^^4VA$s^^N]Vqq\kmQ#U+L.i(Vugp4[[#3t
%$*]f)PUpU-*Q._WncdM'j1)$7iGf'$X])#FMke.38us70qQuAiCMP,_!ASF\\l\LUk5;eK`s,He^!2KRRo+JMe#)o;Qr'7q3Rg%X
%hcL]QZ2BG<"I\FDgEH_FJO>SF\?)^ZUU>Q,0EisHR=-Gt5Ui+tBi8bFA821Ycs/hem&?F9!$PC7PJ-WA#*pR7+UZF\)L`,(jC(ZH
%2hrRUlBo%N-3+OcAqV3">o/0p^0H<;+UU>,!aMZ)9+Q:$e\V[:e8ZWtXN.2?`8hbk%Z0^MFTns50j,>dk75t_E3l2LEu5uf*A%0O
%j02;fl_5fG1\D:ZJ<:V2BWW'2:!HW;mLKrI71:lT)28$:&VQA\"U&'&lmBmaeHs(b/I%s@L.%Vc6@"J).=6ZEebojqF&J1PR]%e<
%/kSl@Tha"eBnEg@#p?A?%qpkg"U\Fn&KkEqQtoTM1O&qW7SpL/d5RpX#^G0-XD!?rEq9<FC7/T5RPjO\Ca5h*1RT:'pC'W_\JA#J
%5MS'QJDRh41e2X?i92W)q)m-&!Eds(/[XcaAiPXs,^^RJ=)a;3O+Zn0RQ'^n;QCNo^i>C8^*rQ<#3%sF3@$I,[03N1JlHc0K_><T
%T1>/V'4uASj+dHDNlS&=cXSAs@S8;:@T8R3C@d=;,_D*t).iAr.N"id,D]_5L>P<_BjN(C437Yh+ej@EiANN>4HdM$UfKFK/_5H0
%7ko=^oVCgapS:@d20'NG.JZ`%i6^*13hns$5BE-ZTSp)oT8#99-_rSu)QqgAW[5hEKF%F9q*@V9CJ%JOK`n'[-<*6Q(;"O,ZlU3V
%UOKo&],<t7JB-,,qDbZa+DXCa[0@F$Q3b4O=:7):U1s`7&Q7i1Q;P,!2O+B1a=mi-VUXfV))^!$K[mhIaCh1j,ndddoe@"#YJ:O5
%_$X1e[(ISJXt-djiT].uM>OHCE/-EQm=dM\6"ETJI>>oPe6Ftf"_#)MNDq$R93iP?P^"NK&b1<8GqWY"JSGY7[Z[O?j-W-IQst6$
%)4(AFkTP(OTX!_96=KOl"Zco)<EijO"s+pK.lDkXR+6u#N,X6-+c0M*%Fm^U6#`B3;j+7qI0-"#a!?1Z]L[rP&b1np73@s#3Df!9
%;G*a?(c<GP!a+TrCh"fJOS*<hSSVID]cmH1j+^9I>mL2A6c@#U(d1UNW.g1)`7Lo1;@A=:A_TTpe8KpfA2TED^W2iWJ_fsD2'B2o
%U"8YK6"@tG2OC[pg0q\58QZEZm7,P0Ni?)G5U'6i!M3]C&hk#dKj)J1Ri;D/%XQ1V;2Hs!hbbB0Ma*&Qop/@G?05Kjn>(%m">1OG
%inO_'BK?s;eI95@n:iPC9D.4GCFdOL['QSp:2L2`.&*XTO0sl%@lT#gGgmSBVT-i$P@HRC[kkUqc+U/Ch'="tZDO!J9H[f+e3lgh
%pc8`^R.alEi6de5iOg?O3^K49`^%n$QbI48PJi^t2h2*C1XmDf`1YOXfNH4)</kD#,Le94g-HG1-AQ3k$u1JVI=Lq<E)_A.&5eVL
%;MTQHQ")r'Mp5Z27JVL+-UNP4]!"4,9pd"+an9.@;Jup['*/4)BotQF`EF;nAFi%tZOa-+_9j@e3F!OZ@+5c>mj<0]-lgZ3)*"/\
%$aO_B"2Ni+hP;?4^0^(pW6*Lsl5mLUTWomu<_l=g&^mBHA#$&#:#n*R%]8?a1[:DTeR$&52WHbL:UO*[ae:91ipACPE!V*NIc;3=
%[S%.Lpu\,0*,RfD`!TUTKXr@'$ZR33R&O;IC,-Pa14lS;Y]"nl:CDV74dN--@_mI`c;2nj(0&.\4)d./rAN7Q;@"+dJa4m;aO)?T
%"Q!F[VcY'l8jBFEFF!;/bAg2eLduA@oms,*b6aAqC/f<NlB>q:&SG]m-LB[<Ba>TSqt,99V\^2=TN5U+O>IFjK:ZMA\9S?1>C%DM
%d#nTIo@4f/0SjM]`UIe?\P\`))Gp7+<IYKRam#LH`X7^8#Zf(4g>(b>/0\(K$Q;;_N=[=4V:U\\:_>(k7,Ut$0;960Z?+(I&%(nc
%V.`^=j23lmb;!.C-[&5C%"f0T3fbDB<f/RZU#uta%H@Sg'[9GA5/Vs9ct=LC;Y,3(Rik;_(K&&RfYCUM,hdS+5VJ-a;+E(+jZ1&H
%Jn,3b9C@$6Oin,f[>5?"UN*4DN3I[]QB)J-LAYgr#:5&ge=aTSO%$Q^Jo8dAb@N\Z<41JcdBkOpj7C?+Q4Y+j3\VA2euQ3P<f^2n
%CEX&oXf4ks24ZEtmA*5oks-28_%R('8:E3SDC)9'Qr.p:"h4Kq$,Ved-g8)eNq!*tK;&Y;I,8n"KShgZ]L%eCV8CNlCMrZn#1ooo
%0Y&J"MmscP#gf5,Ak!S'jW\`P@P[I)#.qmp$'Cd%b`J80^tT_Gj4c0;lX<[cdr;$>O6aR^jT]3\2M83uVWhC<3#%K[o3iqf#<Y&f
%X9F2?#$L`&ReCi@HIEu=C4:d$:na^,-kA.4RSdXkD(#a'd/l/'*f*8K-[&1`$R$==/.aPaAKYj/lNqhI"052P37`/>#\Ct`EnDa3
%ne-n7nS0D;'atch=<'JVl6dkt)QZRGZtE94HH1V,H_I*BIR8<7_g0HUW2rJeEZTm(c/fEtm]73GGT(LSe>YlfL/#r7K-:oqNdF0q
%aQO.Ur]3MWNbcjl(b+Z>h";:-LS9(*I"u$bkG^r2cPB?rqDM=iJm3-`@g*"l4ETs;(SueF.2m^\iJl)]RqgGY-SX4;"TGgI$J13?
%>$<e"W#%TfZ`Md=8c0^Ao*;-_'5hIkkt/Ls<]@S#)d.rXB*t:L'q4/<"(%$tC1?kqK$^%@6WIh73rbhT2qQSk>HTc1!dodj&<I$b
%MqL%$@EZ<dRUa_f:``c*/l6In3PH)f\PB+2ON>>plgM-I1Le:9@Sis#h`>l'7QGO*fFl(WF.gg5A#sNaqVT`Y_!);%3j919Id+4)
%q_V+=&!eAldG0Jek_l_?kepoU;U;hARKjl)`!kCW_oPJs`u-]`r+,)L*us%@*l)X)S7:e*mZ)#8jGLRn2iYt<)$?G6@?JQP0m5m"
%afV;/B_n_egZJ@og.<D.M]UJRgp,FoB_#Xe\XSf@$b1A?#W+1'+.huof+)RL?L?'Y40DBjkpD%"m74:Ub$AmL<k4.e+8bYge\+>K
%f"">!aE?8EEN@;ASfM\e;"q2IbLc-e+ppO&.'o.A5+)9%\EG':LM#F2a4IP0@"Y8I[6[?NHb4g"Tb2#u.2:g]]QHf@n1?_:0)U5t
%U5S*jk+;%a;pJ^V;7\#2Cm.t1\B*#T+er'?bq6T"A?Y"OVcMNU4j\7MXNacR34>GN(7a:0=P40X:GqS";>7B@,Nt+.cLsMl3sCa3
%33p0=N_5.+F=*bV[>'T;[@)2Yd`$^M6Stueb(uaLH4@JS2k*WBEX*anOooGeXeS-?K.[ppJe?9G^B8O/N.b0K?eO`C4lCn7>A;3&
%LONhH%cpSF@3^>l1AUA7@4Q>*4:C@G-GqV4^E/#XmP^EoBpf`(;tBdJ$%P<SJn[R\XNM*VPM@%WN6m=9LU@i:`[\_*bVK2s_@?"I
%^B\"W",IH92ltm`:4<&JDVn@p@Ddi\3At=O'bY/uXUI'WE!ap;:Z)'t:h^A2Co53+W'\19/'L5iGcEo/^QV->&!ERH!T);SN\R;N
%0O_Vq-Dk=qQbbK?VUq2P%Rd"b)U*!cL)-d2n]enng^U0E?_iFegMu9?.Kru4Y^/htbR+C/TZ:%cr[N8mjr>H*Zp[^*Wnhg*)#=;t
%<6HY3h=K1&gr(X9O$p7c@@uICCPFT!L_?4f>=&=X)-5#k10f(+S'ui6^KH$86M&_a`UKG:(aAoY`#9^=ZB)5R&S'VL(ur=[$uo0]
%/gSG/Pa8'+QuaO<7_^)%"UhQs.M9*'[%77Rlc2@rY9/^@dt-,)NnKe9inX>,X?Z;P/_o8[7rX/Q47^"`)Ys\gg(KIqk;Q%ICKS(:
%4U:KO4^e>g?\CXrcc8^-91UA[^G+s_X%33uO\D\%c1d7f"(!Rs/tdBRU,_\\Q6nMHW,X+8O40AInA:H$U0?TO[iC/h'GiNj\6KOa
%;Ki_Z:Z$fZdiil5#huj@9k2V")-5nR!O3dP9hHWYgbZ$S]-5T6s2X[r4VOD\Ms+Z'&9VJ5TtC\W"_ah=1hrch\GPR>@uU0QRe?$u
%&P]NL2L?#$0m?h//'%WJU6Jd'gEa>+XLM\Vm"Is[oa&CgLoGu:bU"Q5<qDt2TM-/Vg0W/)7c0t@&)1)b]l$SqqNBD2F+]*u"e/V_
%?=@L=2d1Hu9/U0-Pue;5Y+N-<M$59J_OUmN`1tesZodd@oGr3rfMr#:dX,6/>D9^>ONO;CohqT,^`P8$qA\#E*L*jgJO_9K8Kq%?
%(=.e^P+$Qp\k_pY8j<B$pikZOk!O;#1J5HWl2[u8rH_R+C!3pL\%hY:H62cRl3-8"L7j;B8a/g><:R+@9D]"ejOp28`Z3i,P2p-2
%TVoXb5MaiBKU1jfX32.5c9d6n!_HBG,`aW?06W#d9E,Ho\?Q81M@$qEP9q+P`B2rB7M9l@d$21tZ`Pt<RQsEs0c=K1@Fq6H7ZX>-
%U(2'R'GoH/C&rJSZGRe\[/jThC>k%E")`t8XYG\S-h,Vo"+!SedfNWcepO#r?Z>U6CS,"N-U-"r1@p63ODZo,)Am)GE1iZ?\gJ6D
%2=!8M"6Z^RSA$A68$<9VTUd!!b7>OE:*iIm)@VVlle!oI.N480FpWt!IBg=U1:Bqt];T#Uo"C<^!2<>!lqZkF>[1sb<UFCrasN\A
%b6Zd9RmCuT9&]#/X*BM/hP*<_1$Znt[r!`UF0X.N`GC[>n"BVX0lJ:&,u<%_"VL4"d`e*f[!eXmQYtH*JJ7<Gn,AP[^3RSha)-N$
%*#,/i\^u9S-#tSZ"[)KK0ptCIc7JH=WI_L!>pVhB,c%N\qU?NN&LpDhlEn_g8"De%o=F3CD'O1DSuaks>+SQ%CVJ&oM>4#8&ANBe
%A($0NGjHP;g?EbWclSTkLJY(l?g_[@`1"]__V-^tdM!8=m3Ca?549_mhL*\1FplQl^JJtb2*ro=)L?\fHVIO2$[-i$FB'](L)@ic
%fabCk!?URkO+,\b0'%25$9\Jl&0p<Ug%5EZI!EBhVaZ.=/,8P03q9HI'+1uu`7/=+RD=;,DTYK"<>KoUAP--#@mNNq>R/3kf0ug/
%D<HVI`_8pYpN=6P.tD;,qBC9OC*/gd>cUU%1TXVnWG\b]S?fOq>?YdM4a*Y?+$6.sfB&Ud-=IW4ffd"PSZr>`RNL6:!:T7_W#7`H
%D8Lsq9u^!R"*_n*N")/54YuDGFlFcdO!An[VK`:5GbNsS>)XM"@h'Ze4[9OI0TNi_GrV>aR8OC%:=RDRaD+,%nrT>0"Eq>Q<Df0!
%X/t:Ds%Za@jJ&:pBX-$X0^>\uj,W1'8X&4S_&Hp$34RFg%5lGmeWcOb=AN#X>-m:C=/&D"KL?Z][&AHA@Buf4efu^j@4qhuSTV<7
%<1K>tpQ1Nkc[OkFNbh#aSKM;q)VnH+##aV:&m'HXFX"(fpF,Sod$L.IVr:`)8O;f%&WG$)j#c=s7UI%Al_<k7PC7#MIb]\?f1fe:
%Psr`&dOQr'D*8HR#C%lON2%Lk)Z-McZmjhAc:l/GbcVQEl7m0RW?,IqRQn%IcP]lhOsl\_.Djqt<tB4EmOFDH.cX#lc\6"Yg*T0K
%;r0.(^%sN)9'Y.7=kY#<d\&p)LYJ8>(uTUBfLKT]\>fCHg"`n*asG>,k#+"i8q&Ma9ZZK.d/f06gVOP9*@c.._9e'a-J6bp(8E1#
%*GF,)`?rTo-''GW$>^V0'u1>+"UJlmRCIRH<N@j#qWjpq8'Lq/bS_6LN]Y\?=(#+GICV8IC*pF[Ej]GnIe-$FLAdr.[\g*YKe6-I
%ZD`H[GDT/T4`F%S$Pd;DBEun["&U67!c+k00.gP%ol5V6B#`Utlf)uu_#BaOH;=C;JT9Ps5.j_X7rpbO]ea2;M,ln2(W$f;Yj.PQ
%KA8iY#L*oTQ:O@qj7Um7Q7l)-k!JC&:Eu?Qi$dOVlrOrJ1U(sq5a[6r^MQ];gboomR2'_"G+]jQ<A!@%(_b!W10BPm6tQSQ;Ksb^
%U(r9E5&,If@X0\;XuBH,:bh@cVU6SYYi,f+!3h>R3]s6_MOjgk9<dWsG7!6Q1"LA4fqJ_28'VXl[[E$p9!>k$&e3S&\(:d+Xj\3a
%=P8[lr<`L#nt<t+>0rJh)KGX3j$^;g]g`Tmho#T)7>b8kSnDpX1iOY^/YP$93p(HgleSVfR\X^n+-!F/Fk@YGf%Hr5#D%o>fX@2%
%gfnIn@*PK.>Fql9/2TmDST9Be[7'Oqa&-=EGL2CQePE<)TWEjf.M`qldQi+B?"ECZ4"/8<4m!M;pmjA;.,-pB$*f?9:eR&/PMh"J
%$;hQP_c;7fSe7.hChLbH=*2ep\u5tcFX3[S?)&Q0"sTgr@0^/2`>k;u`X*oPJKFLjg@LB9m3k>VAVEFP&ASGF.90h1/LbK]%:%L(
%h*._]$lLKe0Qg;s&p!JAN:sg8/iN!m-JEWQeIG_%GIS;Tm40:kQ!Q%2j=6eW\>a_ZV'.#p(OdTjnq#kE8(e+RgBC^f+Ug4PV-,c>
%>p!jZri,p@Weh?^@Vdk(a)$5O2(ATC)SJ+K#@BD7dN\s+W(TeS+[f,9;/b'TG^;CV&>S>:GZfb^[P^]1U0eRG-%FX@?a-1\YU^!?
%.`"K.5#'2l`%#q*jL_N@n]2"m,#h@a0il5*8c5%];9,rjhg5KCR,P:`kJja2]D?W=.I.PIJ+i,UNc`p)4M<&o*<j&l0ic@RpD?+-
%nC/VTXPn,[9LRniT0Sk%]kDr&6Z[\)#Nm;4=[),nMDjlsX1#NB*FGTQNV5*0BF[[n_kuhK6on+:5lJ(]OT<]FD[H<,QXa!*'+DRE
%L/AENbYL`PM]q4i%Kl_EXts\^91j<1laIjiS<Y8`iT1D^oU*Cnnf&J#.$=[DQ%ho]BLRn0Z`6d/8DtYE!_?^AY;m>)_9#(8Da^K.
%o*9nL<t7(h5?*0oXX]J6-lEjCi;dm.@77G"[HcrZbY/Usa!4Ig(]Qq`lABJH]6'n&M;UA28SXmc8qu#1A2qK4:[k$>;d&>p4Nl)Z
%)&P7AQ]FVCJ1$4*4O>JAOp5hmWlURS0jN=*Oa`sMOQUt6.8RpdLJYA#D'[Es%GedS="+lY)/YU)J<!Ti(aINK7@=E0XtsVY<,R;9
%pH>@X"qLcFQt;oZd1rQji-o<A@]k,BdPWcCB7SL\;-2/\Qkp0cVCiK<l,c]-7(dqpVd*-YL0pDob-%^'O[sXX=T'9(Wi(kdU%W#j
%$@]-9a3dZXiOFos>`mAhLnT!u*]NV^*4<26#S*iKWSq=./dba<QkT1sDQso30(n?KUi_V:jl/276'LpGn_M06=$;g42r![qC%G5^
%ICaLGgbA=emOS(8p+c-cotA97TW`n6h2tdF*0A9'.^OAtbDt5p$7/f/W]rOJ1f^>u7ScVdcQ<9dATO`>cK//(0p@LhE%MK1LF.i&
%f$SY#hSQQd/auMNEIOqM@m#YZmR?sVh8$J*<jJI6e5mR3o'i]c2JeJ&"c7\['>%Y6o#gLJ&R/YjMd$QD]L^V`g<PNK;</`jP^A4#
%rJ)4Tc$spg(m9BJUIUVB=l<_6)jC>ke5$gP!Jm=\DWL$l=L4bdrA4K#C>Tak#4FOQ2DH/5DJ5mrP]Eq"74kMTX=712(/1Y5jCngO
%TqC'k5nB"]HoE4pkEhFaf*T#doVE1'kLa5g0m\mbf92%.%XlaD@!;MS&RbM%6I719hAKU[k4%?g(.b@kP_dfC5NEs`3Rc<MJM%Q%
%m13,!\T$qHciOqXGKb=%RN;:ddCiq&A%-laILKs_4Vh:(`NcT,K\RS`O>HBNI&=FkJ&l7-nIW8EBMKAu[I:phDuZ:&DXte%)t8o(
%deVc6$8W)l@c.J?h;tK5=XKYbJ=>:qD.DZ^fSEBiI:]Bu@-;QDBdkS)(,cO7q`^jh>5EW5lG4J^fbZ`brfM2@7fTVa#KJHBdB*nh
%j9\nuOP8#dCd"Lm.h32b%^>YCL!3QI9&#KkUl;4T1q$ESRT^P.hQ6*d3BcNCT#>A5#42d*jm^8GF)3-,$GiVi#5tO_HLl$RLCk-Q
%P9Fh+JAMQR!g]U:$:oMY!G-'ZhdNf;Wt4HDhQN+gLTOcT6EpW"7KfiOT4NORrj4WRYms9`_.&C4W$$%4HW8@Vj;J2&Aq`Q2noLXD
%F9k4;JK]$=cd/ut<30*h';k@A>S'>qW"oHsn02GiJQD)kV\Gq%CFCF6cc,>_NIoXg?GoX6d&P"Y0YoSAkCCS@Di&(>,1dFBBO!WM
%R"WN\C2I+#E.("b<TenZmkfS,=\sT=2O.QBVif0/U<6<KlF-=Q[Y,%>(4f3>:i-`-Ug1pim5Q\^6VpSr)s8_uGjar-jDO`D/='W:
%\f+Zg:sjOOFVsLC2Q6>"e-kfo*\FSGLK#O2",kZrB*gn%BA723<4BOb3-4`OWdS`!KUaA5d8g1_M'Wn]3G0XiVH\*&`=>e^-CTEU
%Mg-[&KKbDij+XBXjSUkF:ecioLjiQ_]8BD8oSN9EKq#`&m[`)p9G!td_#SI$Xgu$!gc:nnE7ZE[I25':[#)_V_dafVWbRHX*_l<r
%AOaYi8=DiqUgKm?ArR6:>cS41/';<rqhQDXW!`/!K;%@I;l`7L.li49SfBWmq*dT+Kn:5U*=a(X]]?eHB6l??.;hO@s5T_'pVI::
%jG\]Z<W0VDS*TAjL/;@DE=sS-:4L[h^]]F%.h&g`IUJF-,cGNdGAoala6Fj'KXM>XMe1f23AF"ikl74`:\S?;j7O-2;^etK/g(Hb
%pX0Dp4"XI28!nl#5QrF@e^`#k&*T^*1K1P1ZP]N"3X]P*[cEk]4tB*LRhij-gA8`Xi^&?gM?fIB,&*5n6@h.l!q8oshD!9gE8)02
%R^]\P`N,)m;pf/inOg/a?>59Y60l7P28^#1o39HB;;a0fLSp>.H`/'?J$g4GNMQqCm.PKlE\>VJ3TAC/MK]g>4E>NLn,dNY*7X`(
%2ojaG%,'TqJ;K7g2/E;c;DhJ2`LU*\h:aei72e27(WcbC9FQU)#]l)+r$\b[[+\BAW$:hKGHb$(JrJX_!DajWb'>)iqWCp%0o.qC
%/=*aqB'=K/MaXJ-ko#Qj3QoOF!E>nN:/1ZZ8e[)3?,W/r,1-q/5@>DGc?lU_2<TCS#L-8@,&L&0P5>oRh=m`-A"&&f:k$Hj#3n-l
%IhXd(#bl8L#gI<`@o1okS;=]1,77@@JtLo5rfWYT"U_XAkQ6ka.-m0E>iqPG:cJJ"Afpr`#GeGu_,(gHNL",.-<=/f9B[F)M?B-p
%qm,S<;cn0@R>5gpWWZ>dF#'7^*)dfiSg\>Y):)^Nm;/9sDR9]%CFYcfEg?CqP*&0?ZCADGCt7O1'JlA##'[-fS%3q<C'$?t[cnK?
%e7W*i7Y50=Lo>+(/7I+QT1A(REe:'idt0Sgg5Sd=brEa)%0m048Trsnp+51A9VQ6-7,_WH]2!D^7UbHG3Ak2^90+6_ff)MB'Sl;-
%OjH("U*jkj&Ifu6E+)Z`E-upmVj1$c?7hSnh"R1#:H4rs/R%91`lG.6k!>_qgOZhrkQ3NY+rJ4mO%H`OaH\Wonc3;^GW2WZQf/Su
%#%-RP]./)`El)9]\?$@[(1Gh7]5%0`$R9[]D/EX)qI6\k'SiT4E5[RL:<\()6^PXB#kf]A(7#_"mirZZ)SFhr:%\RJNZ(8N:<*f1
%lsdW*1ih<qfYV`a!L%g</b8ptZ''_g[FSL.+Sro;,KZb%c!h2Z.E*ICH%oW\Tq"dU^;aAK(`jr3I/`6[r\;^tEEL0,@`n6JC<Sc@
%R.s3^c_L>"O]U>b]BQLH^i9eSBHE<-UYc\c@$'lN3?p)Oht5kjDfdur&,VYOfB5+p4tR/k]Gk.KHn2F^F;mH]i(Ir)@>BIu-n_CP
%P7V=4nh=)W&ajPu8'E'a0GJEYJY<P"#`I,%o`J6HZCW?hj`^]89LH7qB0L5qAfP"oYdO"A>HhCmg@b:HMf"[=Cme].Lsc?oS1?s/
%24_#;As2!!P%HO<!i#;SAc@%^`#iu-d4mae"uBA5?!ZoDYk=kOp&<N/\a?25nAIS<O]N6[:[N6&T]]pqgZl8cA$tU\1(c1`YI:h%
%[AS#m%$.6;/Xp%^R'(QP4#*`O'PjbX_hAF-`:ljDSIB.Fa&MhIXqd+[4@KMPaP8Eo.tLr[d@K;d"M+UB>V1q?I[&(k01Qqgdo(P&
%6M,Jh+TJC(Si9n?Wc*iBf]I;OgWJ6Q`&-YE>cQ=K_^Pk3)e1,FL*POB[[ZqH4<.ds.R2WP\4)Co)IUf4Xaa\kNQA$VeOiYjUs.h1
%cX*kqI>ea-'8(+fLUrZ;Bs/;(nXXPG"uN0ac.#diY!(--$T.;D@Bph*Q[]^ua9/0TGLu`m69LTD#@OP$\Cj>4Tt\=r@P&9Sgc`V^
%:Bbn'>u`d%i0Sj)_)OqBKLYNY=#$[jeh$>P`J>T)8[g>"ObUW`B6eq*F_OV)3_,@!>'AEOd+?)$@/ce*RMY2k<]+tRRgt=GIk>ou
%f#Bs[_YbU"_DbD/9))M%52jin@YQEe.Q^OnQ(u'N,:Jo=aET]lTjXS4YV;Vm:C)\X2#MRZ4A,dfe<-@@^N.HCKsB/\!U\$Zfm<3(
%DRupQfq&N,!On.(pN#+X9EU?GjU;42.hArc./pZ7Y+Mb;_Mh+`#83Yi`[T5hHKqHL<i901i(tECi8UWK2=(t^p0>@t)HKun@7?p\
%!?KOqYPHQXP>(&rS@W+@@A)DWGdg,^5qu6M@1qUJ@k/q]lZo0J.#)6I:ABu'a:F4>)A/qlc-Tj9]a")W)S]kpK?pDs*U5Nl@\gK3
%(tW\lK%^COI*"fdg"[)4U7&uG-mMbX2L77&dp]n']qh5u]Xh#1DHY54cZ?O+2S1Q\Dipeaf!Xm:[@V-]p^[PUhcF&=SLCO6f7bq!
%!Z?l'ICj+t3A=[eQViR,PQ$eTW;]6[Y>o+(?q!mgR:kZqJpD"9aa472;GkV&C!\Is)1Wr)iP.2p^s9WVCM*%Ls7;l_WVlUrs(qP-
%QN6UQKHg=ULJ-]9CFnCG<2GO2g&[I,e%3IV/]G<6[!N^2^S;mUSX]nr2I77M)BO]$XC.Jt''AUS(MR#&6NMj$N_M#aPnJu@#XQj.
%8u<Y[;#u+!3G%:,cK[m(&WhG*pQu0'A^?76V.U*X7ZaW<.<:.CZqK.Fs6h?'2s9kKr3q1TVs"*9?iT@Ts8&Afj0/L]0E:lUrg3Us
%e[b^HJ,TDY3<.8g#gaM:.)M'%C6'bk;1ObpPFr8@XOXe]HJTT^X-E(*L]0DXc)sp-@MQ*MkUd2\roIKk$O3Uf00mhH#"Hap(m"^=
%?gb:Z,GnbK*6J7"Q4*ol#CkEJe$!`dT(`l`/i)gjO&FdYIZU>7c?P&8s73?0Z[p$lm5b'!7NZ4C3EKC<208!Y4i#5De6=>mJ#4h&
%2%L89p5IA$[_Nk-?DpA@g1/?6N#dQ@72QF?H,g/W$,,`gTCX\hp+R<?`1h/V=]Q48q=>#)N;$S'>o`M@!e2NNjHM*ZO7C5Hn\,oj
%NO#?3<pW)h['Bc]@;+XR0D_cG&Cm)XhYPC$h#,SeRYLRSS\kF#g=VIk_4T-IZ@_@@KF/u&^X1B2I&/N9\r-s4YPA]GT0X*r/\PKr
%\kli5N`W8Aeih&nW&,KcB"r)11kQ!9-Y%H;O.(.fp\4:H"i,N<]Z_CQRp\*pR76AM$/pbS[eG"70[j-D@Q5*HJf3.,q.Z2"Dh4-.
%Zc)IPl>(HHdG?L^^7.L0RBeO:,srY517gof(A&4*p*^59K*2kf"1##Ap0SIgPSs:+7=RD1;7T)<lCV,-'#V:a/1f)jOfiW`@tgWW
%D\"S)O:>lSATV-cL4ilb8UNIp4^L-]I-JB*[LhcM'aEHEATjWBh0ld<N>EheTs*e(UgQ])O`,_rR9lij1oX&lKjLiFW0XZej^TWA
%4faa00*E_(`6SZn%msRGgKO]N[R_2O"78GPa'LKjeLc*2[8B6BrBebb&1pFS_4;jeA!0]`)[b)47_7sDN&\gTP&5eq8H@I-6;SY!
%>KmsLMBsEPR[e'eP.es77;,;M.kcakfS]u"q3Y^GUA"/a,Yo?JIlU5n'9<b^W99%!9jm*\S]kG--(#^oiSg,('cZ?QX.NAGSFp1g
%m>+Oi%'.@q.b?F:kM1s;G:F`mcP+uPJ_5/7WoTu?bL=FM^lBcWH"PY\QOrnt#YIMVS-6jZcWAY;/(d9-KDr?[L\Z$)Q%V667ap4s
%/arOJQ`7U<1bHG7DUdk4a;'0lGS[Zgl"6*F],G=.iN<+n`p'M3]-.T/`HPP(r!mc@F;e-q5ANn"3<$J\cjj9d8:_TEO:j"`7>#9=
%]A5]1<&,G\[,j>BOOpEMdP+:\V!'2S^8Q%5^0u@"a.u8:BdIPF>9#?J\qPh2R,N\98?Q.\eNS*<Pkf.IiYG@)%*u>`;#)Mdh8CaS
%(.7U-p*P6VS34`&BMi9'b9M(&rUf8M+@AVTa0"#rhCkA=,TpA!"^G&`A,:H+>Pi`QoUf.^'u$!HR1usrS*H!h;BI?QFGlHH0;Xei
%DAb%'I!6<"%0uKm5?U4U9V8unbGV"SZ;It)6p5=?,YC5o4.T)K#jDuc>3fuhhi>mWZ*GuRpLe'Fr`mM3S$`E30"FEG0js+iV'"%F
%Cgk`SqdmoHR\,9L<VMR*A'Um]\8-8,CJO!\S[fSD^3=L3qms=\'m)ABS3RO'itkEL!aH/dC*Gf(gTmH?k=rn1'XWD,Dr/`JJ8*#r
%7nr*lLa'Ba9a,EYcXL1@mp+J2h)_u:93S_uPc@r.KOZq::;';ITbFPD7Y=+O.7>G<"M.`[m%'HLHP36k9ht;"c&(!%Z+DUrQ4Hn+
%p1cB*.0WMuJ1]2r(j=B;k(FeVE#Lf&heiM8\,<PlBM,*k`XAmQrPBbPZcuY5YjC/!BuhpkZKOo9EHDg=J;6>k6.Tb-\E)`E+Oh5g
%6-#81[8Ta].$i'\!HJ$))"N,Oj[iN9a+QB4BD[Qo:oB:TJrsg+jn0^E?Ac20[/V9+<-^"O+I?O1_YtKHYi8d/\/'CF9b%d_:2ej%
%C8]R]Rrr&T]i_k[=l3:2Lsad>Z7</9<bnjlX:_agL6d6Ype#Dlh@GeT/cLT]<E1aHJU`dNQ;UVme`f!,n#!SB/bl_8OM8RDI"X\o
%/\;U12F%f)]4DK83WFXI)F]/p%u80gI_I7P1h`[C+J34;5IW&('S-?INPWTq-bM0(;7cAl^%MX@:*L/&Au,5/UQ?/5=k0]a]lX.$
%=k?-iN:+(S2,1BnH%N,3h]K_)RE)MsOH4X:`#(Hlq"A6kJY(84BhR<Vd^&>PfU>,dZ6<m)nJ@^3U(/5-3[E1`F5da.2V`:fIBS\'
%`qMIPX%A8<%fm9/F<or"XS;\P/!s93#JAeXhMLYfQ-R(:/i#Z'&o)^++t7D[k9&2:JC,doM*\A+KePoSI(Ack3M>Pil_3"`5PRnp
%5'CXDo,f?'JNRtto]pm*DCRp47UI.Efcq55a%X%DrIfB6XcXchbN;L;Wi1jd?@.=a4l+[j+\%<XZ@3]'*qf#Ij<#e/^Yu^5Kb>ED
%@t#Ff<p+<47#8>%$TAP2C9A0c")FeJX3\eB:rh!?/J]gZ"`6&7bK6m[=5C<H5/J!28&o=-;6,_m#?;c]HIRJl'^o)_(D@"pIaoW/
%f<<bnK<Zd-aCTIk*T(Rh=@!G':pF\C"mj(^euL[WAq<g!/p1pH8A6"sHd;KcV)sf&8QQ5X;&!!UCEXd5Y,:/JX-'urKM>Cq:+G[%
%=D.,$;R8^`6I_03^GQ[-@7l+je(Z>skO/,UZ54A?n8HW%At#,S$..?=XM^e\LR*atVW+gF'0Cg/b0,7<ED[HcV/8TF'kE?Mp8T=.
%R]+kF#5-R_=aOe=Q.Bk9a\UOo+^)uj]r)"^1<9u3&YXDIMcX>.M`c&iDHP/hbApT-O\#"(p@HaM_n":(<n$I4_EF>%nR#-:Y7/hm
%%OXn_SQ?=kUi6HNi)e3i$M/4Be9/GJne0:lI:PdQbI;(9Vf$8T&J"bP#.,3To^a`<kSAK&,TcJdP9*;5`dd-C3m<:B'g/47Kca-"
%E'-(6X)/P95/)D9=e,Orodt/`d:GEOL:)8hcJYmZ>BZ!s$jD\e&9d8@;OR"></(I\^K$[s\5dUu:_%b^kd#lQ9Cm.+KS["@95#I6
%/_L`Dn1iAN$8kCB5$JF$j#PI-^#<tRB,PV"ISk+l%Zt1Oc?5d$doG&;U;$Mrr+]O5B\X3h#R\)0A:MHF7@BD>O86)QKB-u8O%4do
%pj,&@Xl@0k&?S&mIu??H/23$=.R0(BQYE^L[;Th/clCXuluB3J'uC1G\T?aM8O7IsW"u9?&kBePe)U$1K]Q<J?on1]no+,!/o)l;
%WGHJ!G-:*)q+'9,HP?iNB&MB>[ZqAt\pBDs`hTr>=fWh'I_Q9YHA<U->9+hA_Jc0cD.d=d&/hd(Q^U^In/c%HWlb^2CC.FZn%PdH
%,pS#29WcS+DcNcbIp#G:"u.o]i*Od=JftY3".pfT5-Uc&T:Dlj`1)m%>0(U?l)HhHO>no;[e08YmC?(eLs),aB>[d_nK6F2S"GBV
%N]:f<Q;jNUWaic$+('qKg=GE?<%TS!W=eGhSSt54L%Po(6N'7WUn9%$p)1nU*>6d!*m9WNMBu[SZl5C@%t;$CK\!`c$msHOd(C4[
%n*5=:NH<S$"&BcB=-[`*YL?PsV,Y.k=rYrEon(fF/j8&."Z%I#:Z8[1fq2Vc$'nl%S@n%(W_;W<26::;/c9pVl%(0!)c\4.7O\iN
%Q+(?7;N=3<_Z?2h*'q7]lnBalqkL2fbU44Y!2nXd!JX*FVS-pP>W\B@V^:b4$$#7^>j2?Bc\D8tCjB94M2\Z'f+L/9TPr3%qH'j1
%'@WYm\M<$^^nSOdDKEYJ6b2#N%[4Aqn-@f8'*l\c@A<GidER3E!,);3H-l*<a$":qFk398Q7**:+'7IQG^u?J-0ebBTfA*RG;Mu\
%@&93VbV%K!\(al\KO09j;"?5J*Ka!d@mWu0KunVp>qd$M'fq07bYXIXXdZ$EbV73%Q+U=N7M_(TCA+rqQ/o1nolsu("XBO^KX($P
%og<l5"#eQU+Y@`1pk>^$M+P5B9at?D*h?8ghF#CVBS$m+<]Ka2^>.SA=5)*tdiE%i2%qYi2(k\`*?o;Z1p#Sp=%C<7l(K`Y:cF+$
%2R]CcG8t1m&LE)(W2J(B7[ti7B_^Cm=E5Y9f"`>cm:uPLVORSap/mWhU^[POR+a,/TF%aZ5^93:7d^R*W8eU/l90@>]N:MPkc.th
%c$!QOp[Vd4%<"?#So]Vp>7=8!)UgqH)cWm4`U_4t`[=Wd:[]i.`aS5bdPTZ=?!Dg#-;NmM[W?sEM9d5_o-od=+-mD*]fM&Rc`^>T
%.(BH@ZK!YcOp'%V13F4KKRF[H28lKiik\N.>BUX&\(Z:W!N<OpVWR.*6'Sg0&V!clR_7SW.0!AqrjeO,'R:fO$W_O6R,9@u2bj6a
%@'H"`i1eUl9N08qogna+GS*>^`n+aFB#1^XR06FTr]l=XWZQf_F#241mj-3m&$'d9Cf?aJ6;i$d)=Y.7!X(!1Q,i87@lU"f`q4og
%N,%d!Fug;Y3'%SpDd<'];k\t9E"\*hkG&h$P^L[5R/h-8%JZ#h'='K_"e$,_#J1+chtQr'E_;)Ff_"Jt<Q>c[!;9LJcX@0BD58k+
%$5]sk8-ING@K0&=7W\fCD<",f3r+9Q';uL'ITiG9-s=m%0N!U9bB92OLHl4I,mqu_\4QKafWM:\"\J#N@J*!@Ntt-2gA@RZe*!!m
%.I;R';DWE<O[OW!877]-r$p8mF\*(;l&j4RC+`WcPq$YH>VrXgc[q@aQB%'n)]:K`%BD&<;O6\])QYcYRZW[L4%B*OKH,pn\89rd
%\lCX`_^6SP.\#4-7+a%RKJtTm7Igsr-u!K-`JpBBO/&e7#F7A:]cm/d4Adt.Us&>+e82HM<FoCg-H=J6P2ccU=U%/W2oS2Xd^m(=
%4%+sLUXuH=:)e,nXi;50QL]j&(*f15Gk)bZ'5Gc3FWal[]'gH^3et21$>s=D2$fg?&4hY2BV!_$;B<IW!bLRNCUI^L6mVm7K?pid
%eO"@5/e97_bIM8cd&2O/pP1>%ISir^$b1f3WWFPCVQ.)6<,.ddcie,_['B^RgaMjlE?.rp,?PX9=G'IbWag!SaQq0S$eJ-7[@,n'
%+Sq4a+d?nojmmJ,gmZC1bD7bT?H%Y/-ZeRXOhc9F:QU;XnI:;QAW\<a.I3[m0dT3hEJLsfjmT!<,+h(U^-FBc57:hAPY7c?MHQ.K
%30I4[lX1HL'@Y"A[Vj8WUV2H%lpY$P)oiF@=H7brIGH2mY+?LKVs:lRN^ND1JnftA'JO1n<bLuC",pWai`kDAMc)=\ij0*B%TZ_h
%`A-6:_l%k2\fu1,C_j0l;b1F_i,9tX1u_cG#NRJLm.Mag?r.k/.**d5^q2hYO,!M)F7Zf@OJ[c#NMp*A`]/3t1kZerflh\e%J-7M
%Dm*R'+XKLRqe1f$[?8)K;8]s7!+=:UOBqMjOhk!ifZL2.lHMm#20-Q5*E\GWL1f+K87:uK=LK.$SAnOL'pkEE18Mec#a_cUY>Ilk
%MN$'&>n%N*=VQjQj;L:?_HRdcjhB3:IP^s9;l(AfGm03G9W8'iA7<UH6CsuqNj$p"i@#pZ9%`V_\;Qnf:^)@So[*Tr^m.)od41R_
%1.[G3NQMP`4[^1KRoZJSNj&>cg0)<`d(&R,[5+mObpB:0mC%m!b!^ii^s'.6g6(/N0EgXndb@&Q5_Fh"$8^_?T`8jN@N_NsXm)MT
%)+!b@Y*+6u*'hmE$ar@QlY*<g>m"*?__g5/9!,:jT-Tg0WMpjg)QH9+L%bBIABW#@8\u7-s4UPVAKZ"2]+YWRJQX:&@^tIq:R)-r
%NIk2>[/U"EbAN*-2m:%]/s;P90a_bCmpLnThs%>og7La5MR;hlOddk6BTaU8LMV`QWjo\7$q+ud>"R=8&o)nri*R/aRn*AT9#>Tq
%H(et[i&Th#a]ss)(^p)4_'9Hg]K77r6sORs&?pL\%3'<+TfW]fr[c5>3Ru\.;)_'(M!MoC@i>22pidS,#H?uH$aJ:Kc_20DaP)ni
%aJ<E*;38W79rZX$gaK!GHs@(S@/]/D&^BbV6SDefigJ//oJ]Bk;;L7g3=/!CQ7.'4Y%^GsT5ok/aru@V$F!5F#[]k,&D>bPEJ!rA
%eA]D>IV-a9"TFR-qGX5\E@d"",s7%s2FP(OAe>l:)/(qunLXm,GO*j9iAB>iPZg/1rJZCojZ9`$<6"*u9,3TR9^;K!$p@_9eI2e_
%Oij@'21O-+4.%.r\$=K'%O/fBa%mi2$F'bXZKqJ2T[-0=`'B'QX,5VH+d0Lc!68&]&ZM9295g4IXSUI*G9nFL'liT2774G169(,G
%1$4G)Alj1`*'>"T6+O('4,_AiDNXjai/)^K8=-#+@L)$,%heDcPl&A?'M)sn0RI0o[o_)P[3SC@-L>Ej)NblH^"&6_$cMddRp<O?
%mPuisLmg0\dV.UcpJ1t(rVY+^ek^bH&WA8)T/rOh2bcI&9_k!lk'1UlWupsgO[o2Ss5g.cjN3o76l;SC>$s=Vj*bP75r;P5DF?;-
%17d!6]oM3=)QNTgT(?ji$D1^0Tdt!aONcWrlP:1"7pJMe!]J$l/Io1*qcspD3F0@Q?)):/@g3jdTQaE\YG>-;o*XZ&TM<`j=c=;)
%YlnE<.<8qBJ`5rS$]n>G@D3d;J"f;>H0Rjg@C@;plC#>Jnf&*%o<IOV:+m&OGaSPU(306]?5&c73j!nTQ,Y/F>$)4,%T?6/T8J]d
%OmRm26C71cY&V1V[@heCNn2Y%?;GR#bh',Z<bCE;+'L\Vf2tO[f8=F+]kIY;9K#[O87Q)JWoj&fW*@e!Ynd_sb\o:)6O9b#7pG\!
%mH&V,QXO,aPS?p$p*+DW(26.9EVc.]_>V9q=.!%HQ0ZR[?2q?2FdOmtIj"WL\%d@HD:uE[kulTfQ>ilVoPPV=moj.a1OG)Rs"/G5
%1X=_aH^u2R-;.fUaR:#[*LX8*%/nIt_W$u`X4ic<^U;Ne5ceqL;F3f[dDOjsToQ+rh/gtnb6"Ti;372<m<9`U5[ltDW"2h$?[1_i
%ZEoo_R@Pb<Yr[)0-t:r;6VE8(Ctmk)Gor$#0PA$5DAZ2Z.G4#!<\s,65N:FU<AuN=!f2!.\Q5,a6Y!mYaGnU.^kdeW@f770e.Ob#
%?slm-b-`6A&_/8K=Pheo"P<1MEXiE*]8ET3[XYd15$T-q;R$[llAkH.:9@#ei;f1<dEj36VeJ5NB##G0prU-U#jK9d!Fp$HKbPe:
%&M*`Up"?hXdJ<d_R-LO74O>8p$XkF[Pd4PRF[K5MgmSEI+*KH'CIV'OlZOGK[KG%cNR&D6O7YWD;_T3+k0<Hh=_eq1;PRl9keJl*
%3.t%j$`DtXr6H92(ZO%>:A/P(Ue]=H'I82Mh'?ZXFIqL]3L6XVZFFj'P#36/a)Xgp"hUM_g%AYNQ!K]W&aYRlPgR:s.kTN_0TIK:
%<=MD:a\A$Y`&*^=AeL&q7-9'%etR.G=JpAda4Dp#ODotN-c*?:TO[ah'_KKO8m$an&VUjh4[)=YDH5<0K1!8(E]BFV2K!@W#Zd74
%H&",g`6MOCN!b:u[gAnaFr3(q!7Sn"@Wk$gE.\4=&^U_-,Y5q@F>Z!_!j8dk'T?^h+[J5L&J@-nL>B\!mP-Nf6r&:W[d:mUoZ^8l
%@Jo$X$1Q)B%(UmSbr:kZ.ZBmeD(Z(]H:EhrcM\(p(&2#RQ-[^s4XK1ec53s.E0!aaJ6G*S,GITXQklYe]l0K@248U,rSSZ$C^kPI
%aM]#?VkZB$eL_Zr$A%bN7?`cTs#Hu%%g"QT=.T!q!tKMa9I4JoH/@oagC0nrhDd1be];n'bBHbbD;7fXWU[A@hrj;sW_()iUu6>h
%LG5`NR)U5#n3`CVDBZ@=l.GHA)kud>6s(VZe1lDdc*$cEn@Il#c;dC6KBj_!*HVH_3[lC1T"<E*R^,oqlm'M`'4JklM[7+@gkY0/
%_j?g@_e,5mVoL__D9K5&2e:9\%j--OfdNKc9_<sh]n]RhDU5iE^"9%-m2lDc&K'HHDgtq'3nuOc)g2Q^kbAonSmiso.NMNMRO5[>
%<SZ!4PJ)Q&NulN6I6F,t^4*,j?;W`e04I@0R6(=W<*M?L!gA]P`+hNI'&F`Tn$<tX[tUp-C9#18AMF3NYG)VMp4RD8*HScVATl;0
%]>:\I5!;J)0hHJM,5LUo>4l"VWK(16KV>1Wotj')NO3)TW&`bq-N`W7&G]a[AjjYVjM!Z<i#s+^Ll!VVO6`J%mdU*FCiJsjI8_Lc
%g]>sfM"L5^K[:5q/hW.Fn`3D?T)dprs$Rh].XVKnQH1Mi.1iJcHaqIS4Ngc9P:O%4:>2iIoq<f.%1`3#IuT[9g+3:S>Au4Te*9WO
%KGk2&jqe^,qn59+7f4GfP&5D5bRDcg&24\lg9u.']tYYDM"HGRhrm+o3*i&@YU]lZ`kfs@ju;a>ha[-i*Kr(1KoFb"F5d&9U$%>A
%:8K;&EIO2t2mhnn?jUn&Yn:uH<W3B?\WeWn]Pog_Zi2@a4M"\6bEX40g(8I"FBi\8NS,qf^MeAq^R29I);d$_74=Z0WW>gIh;@RP
%A0M$EirV-j=3U&NVqRpk)DtkK3BY@?0#o\3\E?u'),@nsnlS-u9(kG0L6XFc0P8M,l9f#/Mj&MApBra^AjbIj6'-0qLsV*M$tu\B
%^cXeO:P=%t,'$us%1&Z+Zp1[Hl_/St]!8^ER.4GaOVK!ED-</mW^KM@76'Qh"161G#B=f5)h,P?i"=#\"u+<:WI`0.9j[:K)B&5*
%F)8AJbAU5E2u<HieeaB+E4<F['[ll4LZ^\K]Pusk&5Rn]42TIhUCYq:4^M%I-p_(l8rrl1ch[nK<;&^Ug&/=&m?"qP"Hpj'(WO9,
%rqf95Hfg0'd6J";e1jaZ2H[#*V-(K,]3hBHB=rf?d.VA91r1p)SulSDZW;KNj"?PuiVpi*,9/dVq@Xro,Iq%Lb-I.J,nq*7-=r@1
%]mnf??9Si7EK&c[QK7=`>NT^AB+fH9g2SC\pDB8QG3I(r\kd"@NrYYH8)SSR?q?j`j+nNi1&Kq#V'Z#ZH\3Dr>C;DkhVLkc4^YZX
%;+/,b.bXT6F,qEPQ`+82+rliBR4VDB-Z&Fb3ueXHac3+"4Lo_7D(kZGrg:"L`t]iR9eZm?\,PLS4EoP=H_KX$3Ga>T>#7)eB*[=%
%L(iD;#"H>:)3K,_di0R#_g2E6.\RC.i'1CoSgOBc7.r&UmKHDKo[)YC;'Xe*b;W((j59;Ei18!MkZNrk7o\L;fUB*s"YASHO-.b4
%K=T=\.daBWVIg#a$ce]C1e[Qe6gO4nF64HZ8+8/2D)cF?*K)Vp+X_NDW4VU.N6%73R`JRkAd6f@OpILGU'M\<__%6CNbZ>dFkV3a
%R;pbX6i#o<Y:YHn-2W!"?p*cg&[1(ej$C=9KkPK1`YB8g1;iP5>Lg=AC"=n$hnVq4?!;V.HQ=nHD-tWO\pZ+pI%aE8I*ZJX1eWZ<
%Q;_MSjD*YN]7Y97-\X1`,e*b_\&MVW5JZ9"W0oTS-\2!:N$RbY0eN>i&Uf@mWXL(g<7Faj5a5XA#>l^-!%)48n&S8c8job?qW_H4
%klA^R-)f8Um(Fp1fcR#XFT^\:V@GE+-jA;pX+qOI$4M?<bWRaP5,pL#%<A't[/F/sBi[%fq0N;>@pqa4hp:1Ak$BMH6])!ATl$-X
%-:(Zfpf'Gu[^CQ9#O9NIN)hl"V9r.EfjY(q>R0W6)%i<CI@Lu'hV<$AKF9Mcb%kcI79@M=!^)1Z>lL&^H\eh(LJF'a0k!n$DuHiU
%l8q';*chIJc4e*nI"N"o^06)D3`5EbhfNj#7T.1"[5mn5eV[7`8X`X4ilRWkj9A$&Ze1J@17@]lESHm6_4)@)#,BD18gF7fnQH:V
%ONOqPJ4(ZLfM)h!<D\,9k]5Bshb$Z6#RZbiqrbJmf,/FFhL)jBn&;-C#o9TT-BT%DkoF:.PtQASGleC]W<ZC5#7G[Wc4.gRL/GQD
%>Ul+gK+VgJ,eo^PfOfeqC\Bn-1bpWKJ0$O[C@?sK]t:h''@#A?_Ra:[_YM+K?7D4amR<lGIK>QtGgn*=6kf)7QlYgKRln,'9P:f$
%Y3,%!QhZ=S&e,i\Vi?=?g@j5Ri`%;trs/M*;1S/]=FY8o[$99X9oF:.<!Z!QcF8H83RO<7>4l#n9X5Qk_cX9\JN%.GpB(b%\`be%
%qsYi2"XgPh2C8sZSAT`Oe&Q5HD8M_+q(P&C?N@?L3n&Y&!G%>&bFDdY:QlEHc0aD(-oYekq+C-\e#qs\NTEpTPmN"OC.!6fd-;8T
%Jl4lT$`'fP#m(as%/Zg?0HIS^Pi'_pp=:M&V;+<^73K"L0'qWn:j+qhl]4VKcr5/<W-Y-)R[8o:RMk:G;64<7s,Vt@^^24b?+Xrf
%>A!=;L#-WiFiBT=EGf=,8QLM10*hM7EXjgL46[&$->l?%,'I(PH6CVWl]`gM@EU\%_F(QK`<Y(>P^4j5T-Aj2rIK=If)J#5bucMr
%cKPXdrPBfhE9)gW>bC2Him@$;N,(*tKJ#X]W+8Le9./_o\`3WBDH4/_fC2"0W^LZ*krf5N,.P'&A57i51jsh)%TS!@f8>D6A@;g\
%IVOGm@s3'^HGC&Y`]b[AjVs^D[$Jn:4$b7!EOo(`#Zg?6?A1+qjV)S%``gHsee16Aj^(b?\T0.Gh]//[%.0+O,K!iB1lFBL0NrC%
%n"GN?^jVG0(P:"!Nr&0c*@_\3WjSBd-T?,Xn0*06GS@()1fb(R5gJB^E+l`bG)FVA#Dg4'+uZ!"BHMurB=<:aEE<:ljdVfXkWp30
%#%fK-(3kqnO-P/Z-H\<U`&&H.3t/%X7M$_j-o^\\[=.)hT3KL9E1;*ck"l3#CX-\;b&BMN%6D+;*88Z])Ub!Gqf087)]8t<,&AWC
%9Vc?7UQL+_WmEj\ZK1]`U(LuY(,M]*UmZ7`+eJj$+be_fO+k\sg=1q,91m&rg])`8]Yut5?-E1HFNHYh4^C44#I_g*3;/mJn:_%4
%s)=`Vf<Cn#@/PX*^R%)t#%9=fJTu:M6JWlFM#iHlb!o>)j'sGD<E1rL+</V#A_,>`d*$WZ%.?X1Zg#%`+<9W7de[`jU=le1cFH:U
%^a!5G%u=NJb#Z1!i:2+$.>H8/$<Oh[hr&%pS9>]%%-/W%ZXcYZhelh0ikAZA)JE-h/@L^=TDH+`+bbOQf%tR8cd`F68u0Q_ALdZ_
%g4HfI6Vj(.M#7;p5MeYP*5FCnc+t5oH$N)r1$_Q[V)PtSWo&"-Z'g>iUkd#5VT0R56Vt%1]9##t=o-"'cI_B*KHhc:-KsG])g(tf
%g1ts@`<PfknhfA![qG](meq@NAKAd"=5PVm9Nk;F2TAOA]daiBD2eI_*'.TI?#,37\gesbLjptHh=;%@oFINL4u\X6n7%\`RtEH4
%k0iiQY+VeP+0&]H"&U:"R_B"SC-BJT4j#aR_?-@%iH6O)JBYE=W7df^W-_5`c"9#97O33Y*nXE#]UU(s`&[fa82CFS$;D:*2<8qG
%_4;A8U`a-@?h3k?JoQ!O&IGK&ePn?o>jg@(a[]eYT4F<D*K.B,P^#lY:B\O3d>n0YS:b[@\d:HJmm-ih5Wf+BC(@5'>sgc-#OKe*
%Dcn+[qR:8hgM#c,$4NtEK<KZZlL2,3Ms%]u,cO>-'p/(d:2:953!5H2R>1h$;eM!.6Dr@;@nu>[Yg>8s^e!&WHB=<k@Hm)U)/#=T
%Co=Ed]!-PaN'"Q.Nq%>L(EfB^;iChCXu\+A\uR5Vo&V/5BAJ/g66I!t$.l:o>aF.=)CHsurN.Dg:nH<fF8]-nM2C8%<k&$8R=;Fu
%f/r)@Y[3)`\Ze@cd)-dTR5,%j38_]urV4LsZ-/D`U`M/jMs*7N&D%3W`,SM)R'NE"A\m[n?XKNZe1)/!K;7c^^2;%_8Lk`S[MH:n
%bm>s.d@X0ZSR*.c'ruYtESDBM3Q`!;[MPhQM^j0XfbRPNrkOJ8iM/ZRf$8LYXmAIRjjpY'<2FH),mhc#<Pp'nO.#=afNP5loC^ok
%^On3\X<@=4OI:=J+%(i`9NHoR<4TWt^oSoaR!2Vo`G8j*mauK`T<YrTe`>jBg*;O-5+-nOY<#+uNp-YX\?3]HEelp+>l"VFHN]Nl
%RtG[I$^jah]kn,/%8R:HW]riSW?n,_UU_;Zk*E%%I^H,SS^fTE@%i0N!6a@<bRu.;n_>!1I)Q_X0/Q5mq0@@#kf,.XB_*=GoC0u_
%^Su;l!$+lL`:`OOCN&hZ</H>06Ce)F)W:</aGLs\E@VWeOW=$-<X0g=5`*RNp6EWjV5bL6X(c"F#ggBb301Pe_1ZRio"LdRT\aB#
%oYLSK/=*.K*?$!]k%KVPr<].HQs'Lj1?!+JdLP?9,-Z/i?3Sjubp47nA*O\)m:[CE%r%t>bgTs1e<fi2"spYGWM54#T,-Z%`,Mt<
%Flk2.GU2Di%Mrr4Rd-U1*tM--.mn]1$66`&ns/0Mh<fI\&A7&mqE[rrC[\*9:2c&P*j>IOP4nAP;IFJh(6=l6DJG,jZ:.IdSEfVO
%k1!6fZT<%16Zg4]aLOe;c&&>i'jJuCVAZ"aHp2lFiUfFI@2Dl-Z^DM>Rk0R@<)O9I2ruj,lXAfGYYa(lD/*6<KfpIS;s>FB;Yt63
%+O!%jR>-H&P?ic<Ff;tuKs$Q.'/&r%CCa9>nY98Q<_0JYi#*eam>pB^Nne_pkUEPHe..O?DeVaIH;<djLCH7N+RXnOC,DhR[gGoP
%_^Utc=<,!u9MaWOoRdJ#oRO\<n]d/]G0X"(V),<\8J,Ye#E[7*5uO;@Iq)9b['6qGFd+":i&b@_[^-!*\K;Zgg6\`sY(^:OnVils
%QqQV$d)7:nTcGcg6.$>m*<DU:[NMfqg_rEklVGJEC+BR=oCM41TRK[mNZp)Xa%tr2K]V93XNPlF(D=?;+(u0XJV]2G67P6V.Lnci
%<`g@uDNc?r[D&c5^lgH)BXgoh'=#^t9/KAP;PK=Xb0hjPGdf3Eb5;CA%NGQ&77a4Li9i,c8?lOeFt;r;+B"goiHf8+Ng./H%]-c"
%:NO6s)SFG@^\%s1&D!uZ_YtiQ"kno&FX6-BX%%;S8FtF?[HKk3$]1$din16HO]u+m;'GTr2u2gDK9TDa)rBg0-B?n&'h(:Hge(`c
%5;/q&Sbi"75QCLJj5VCNhUGI7I08t$^-V#D8(Hpf'OS<n]M]Eu*%*`k-IXQ@^#:8Iq$^e+Z83%a178_N'pT-Z4LR@Ga%TmVq,ND`
%]X\D>b0&0cL6@USQjpGjCTYS'!ia9.N].O9kt4D>Q@Fi_FVnsV)VSn1f/d2gDg-]JXcp(-coZ'\3_U'>+mt.1d,SWQMa>@$3?Ktn
%ZV-(9CG"_9rt<Em+Hi^\TB,U-%OI2q/4,H8gFctQ2qAZ,?&7G%d%otSrH8:Re<CV^9^)'_U1.95o_F0j2n9:O'[$G`3]&l@,%nli
%-gXmWnZ49\K&V)GJl(AMb3tr?cYc%Lcsl$[Y=;=mh!DIYek+LEF>[4Q^g,49GhXk3q1kY?39DFL2l5oaUIH9Yo^iJeraC&T\]RD?
%Tf(=oJ;c1di!DTQ/MD;21WAE<]=e;5<=j=)^fHeC\:uS9Ce"J1gMfcnO])56kDeH-']qECmpcKD>+h+K)u594<lDLi_aO7>m%=S5
%!-ajfU"r\Hka3`O(mklmX053[F2#JMi-UEP]W(5UgpUlG2N?^6RAQpc\F8uHC/0XDUY8mAWLXiX2Is8O4=!Sr)E6D?k8S+/EMgAG
%@9VI,ecI]1MtcqQo;#/qqu-dB)Me)`:S_Q8GIAU$G5&L8="(n@39pAkbA''^m#d;6;J=#:5%?P8d+`\<'#2T#n:\kcp+=V93'A\Z
%8;N2WmGfFJ"RdcqSm$Sps4>h)k="SX"pig-eKsiDSY"QD1LZ$1`VBqU(Qlis=Q@BjFb-<`/j&>WS>\Wf2U[\V<J0U?\^&U:l13J3
%OC0=M.b\!89q7l%$f<ZVpim(G<B2TdoZS%cpXOd,52@EWo(UnafrRqErH'A@'fBP(o'Y]`D+pcdgInpc(*910W6Qf1B<q//YIN(^
%RqkeSh$hX(GT1<VYJbZW*DJSn2qt]<dYCdeiXkBM'%Q6Akb[gX(u`F(qaHIeEVd9EU[.fs-Nd\_a;Zcl1PhUmadTHF5^_Mn.->ZU
%&'Mu_JduHL-=lT31$%P9[qXBY.7H'X5J6Rj%lmruefQWf<u@QF5fk)W,K\k^=Sm,Th=LLIh9<Hqg]doPmk;ar/!1>!qDBdnGYR`9
%h:eb2,+,'d,BdH<LXohU13U=3:##`G+,pp>]1,+;6Fg'l,EHLg9Q%I%_Yn%Q:RW1c9Q$uXAL=[P_*rVYaU&[-6Lp%fZ>uVXPW)Ku
%Q/[#T!Ra<L,qT,\T"FO=!C?pN\_D,imYV5]kHGRmp!=&^kAW%kCHo5`;c=YHY?GBsi9p%*>)^:KE2nVueZ">oHC;q8lDFla=H9[_
%E7-TgEn$ia-eiD<(sU[nS2$"]\TO)JEE4ViC?#&8RaCit@_hQFpk[<^9L9S)?6h/<1MOjW[52:`f\/r&T=8JK]ufUmWG=QjPCi@c
%V66P)i3t"I<5>a2-_kIjhF"l&#OX$%B)B5t([:POrqucJJfF]6"QtYa1;C/qX+/&0[mUf#/XkeN2%5E=[KF&>T!0cq0>lrtccf)8
%9dhMMf]XCcogfE!78Ki4!5OV.Oa+S+j;8uCBZ4O"2U/Mc8<#-8$)F^TFJ64M9UKVN"t^(1OSFOi-'Hm_6.MOF*'!E2m5^Of#fMYV
%X<rYcD@QJmm@`*PK62OMA9bC^cZhf^6TT9k6&P0UIZi"a3a*bM2'8rglId*&Y,saBK,AM:041;2n]p03bCp8VP?SEGRpqaZp084J
%a4bFm,Vm=(2se8"Gu=f16I[u(?6XZA8_KSU=XZLJ#)!#d+(KsCSX.hsXG0k"]9s>tJm&Om&2k>JJRZX]MEIZ+dSg$K\FD2ao&QLb
%p=%[N,`i\hm7r!hik]A;oGrI+qG'3K9WO-pT3o>E_?t]n0Ub]OeA79("4JG,^Y^1\hGp2@B&J`o2j93Q,1SJYH7&F&MS2s%/(=O6
%j3CqW#7%YH_GX]2=8g.H4(Sq<0l>]HK(h3#6dLXbH)Ugur$7q!m(c71"Apc-=f!cCY'=IM)cQM#nWJk67Nd"hCbsU9@/b[s]&;j?
%a1&W6D?o!u.O+Zn>(Mlr41Q%i_Hq,]'YU)/]G4=m0GN^r(DtiX61ImN,2UV%9%O2Zb)U`i3u*)`Kfe!<4Z.A$X.tsUqIV=iDOG\#
%40$TA\Pqm*Z/*>Md53b9oAdJSn8OHk`U7F@q(um`:2j7D-)p-)BGE_tW.chi%GNAgI]cq[KZ,*%<L!/mc&p=jYq<]^HkiU/G=a8*
%e1DMF<(h&LBu<rPHt9,n8`b&ZCq4F`%3/!&"rO<,gfuP$^OK8iU<O_%2-1!!Ln$pk!Y&4NRA.5u[1B%tUbApFN0#^%)5M>V)\2YM
%Wi,V$>-oM87b.>mrjKV3\Zk<:@in=hH-gl;ENgI\&mjkd3@!rgV3NmBCAYl;a5/MK"4u%3d/>uBH@QOG4`4duH(ilef=lF/.?PaJ
%X'nm/>1nrD^f^m"-7@;$`iDM+SOBim=J`Y4a?i+l!C=*[0R''>3V,;tF)>c;Ek\]cH5`p4ltb`*Y:!AK#(cg.qi=<!>4SqNE,(0g
%m6c5Jfp,)/C]*S&2ZKjmZ`Ub=#$Q=r,5#?^6n#7T82C60Ce(7UB%LCi\To,;F-0:lr"qn:_E;!M#i[1-V6aciGt_9,OAHKmZMOQs
%lh738"G-,3c\>H]8G,H\>/C1[T!%3sU_o.-WW\O+GS'`Y%:Ii%C0%Vk[^_]\I1NV62nTfi.=X5B0bs1t*RciPa1l(Y@kK&bVI'*(
%B4br2gUKF=ra7=hquGHX5@AW*?NPbs@0DTo^e\8u^#d5a7:=B@@Cd+Kn07=nGtqJ%aJ=ANL(<$k/ko./0nI5i7R`=9Op6VT2d>77
%:C!b^.39Ef3L](`l:T#+h&`i>)ea7paBfEm:P-gS&Js[#+'VA0Yd3<AO(_5"q"S)C4'[:#`-2>^,+*ZFcS>V"?Sf7%lI@ds,9Ps:
%,4.oI6N>GBT0?[?=`K0;+/__'1C&cnTZP*+Sdn/fEE97is4l4PmQU8[QCN+k[-Nj@kS+eje^*,J[]@pcP%D;o#EHNh7(/inSV/`i
%O:jVg@cH@-gdU8'Qh\^2G['n^\=u&eZ6_n[MO[`'\O\<gKjN(T7b4MW[&\B('o%D:8KO%YUSj*]!`>T`q0Lb0QN9SV>W8lM<Z`??
%Bt"p(2N#=Qi>i"ks5XaDPLbu`F)@e!Y#A6'\[1l5<P^ah;F;!]6^k!Y=3MObd#sZ][OO?!Lt</UC"^l\7os<"2CK+dn&_<*(el<h
%(g$%LE5$UurgUbE)=@_-PZlrk]YagZ2l(kTp4M*Nh`rO7/Ca5J1qUEM9VR_(&\OXs2J_Q!b7^EVkm2);0*9qpd/%tog="7a].Z,t
%GTM69755*#G"'eU?m/*I!obZf7Mq]<[b1JaR[VVg:T%/m8S-;6r<*ML;.SB;$Tp9`6eBn)c'6%h"#Y\GPk.@0NSVl>[\iALKcsIB
%!is"dlm:YJGL%iU2'f%:&NRY+N_"n2%6-!HU9sC^=aN(eIHD`F[.-?#Mt*Fs+.j3rCl"^-[M(MBLs`N)a7^K&^8+7m,SoA^6ceQE
%rPREul%dOT/o@=g\P^^FnERcU&2]_jf1[GY,QO/c.en=b"a,m:J7^l:H)0r=L/[LlMh0?7E)h6<O1.S_9Q[PHOHjVN8S8;8M6s.-
%=^YA_6q)ORpBM8gNB)9t_5Mq[C.CQ!<5GjLI5'<(jo&4.lSUWOZXJ\%k&In\+eh"eJ8XS7oFURQk/4TD(o2r<X0frM_Znl_FcK"F
%^IFgNLC&cT$d2J#YJnjpd$WWZn[pb=8)8e\FYOW@+"FNI:=\(j4H[M]L@^LE$%8ca4LYDr)1SUR-@'jb`reJ$?2'($G4p4B?Jm[l
%c#%oKiENhnZ-B)9>HY*!06CbOI@5bg[1@2?_+TVJ_r4hZ\j'1KU;7V:_AKRpap[GmFie]Cg-HHdcS@S__5P&P\(Ng<8Z5F(NS:S>
%<teOFiB0_*A$dd@c#[o'_sK4J0rg89r*4jX8NUljqmQ#4+V^'#`#+9%^uCCdE8rSB+r!2a2,lLS.hGPN$qj0EGTuVb`)^'k?J7mX
%,e;sHDWu?;*FUQmH%Z'gb+#UD=N.d\2Z(IU(XuO@rkmGqMrRKT@_[<p7&*)OI9$G"`nW&D*4.FJ+s.Vb,7sm+pj#@Q#phbC]G?)G
%.Si[Mn/&]#ekE2Fs6h3VV$=W.Yp"p:qhqF"!Y3^fak9`T&/nCf0`jaO>X#<HL`8;<q-%hlOM2CHhRUL0(*elW-!HVuY;*S.J":X(
%#h*PP'uX"8pgI8Y9n:L1>jT)D\Q_eFQ;aACDkEWHX9cG%*;h=i3e"I8p*6NjN6n+:3JQQ*KG<'D>_dhO5,?!?R/Xql=M:O>!N-%S
%]rF&.mUZ<[BW6FhPna60A/l2RasWbc4X_4Em82m$cZSIrP$1';3fV/Lc+CI_?X77hJrTJfYsqAi>5X#pOL2/c^XL84g361$m>NuX
%q&F='8X:r.oEM\%C<pOA"%:dMo_Oo(@$hNl=(=^LVR.'7j3.DDR5D5.?EVpMO86,^amk(kM?6,4VSQCmE`-E$Y'QE$<G5("QkJ32
%lc0T>_/mOC_DkI)^(cmQY!6[>l_op@DIJYT_"#2Y$/1Ig%HF@OqIN0c@+pMn_#*n+7HLcH)iX/P%'c.SQ&ZtS"'oZnmeXG>QVluU
%X%<>[7XJ\l4`Jn<@:r]s=Q0#,7-f,mCa1fFZ@6N38=5O@2'&01m<k@`Hk13ac]75R/+ep\\@RY83Z+^j=2jKi\^HFq9$'@XX9Xh!
%EfDhM<#sR@Z5P7f""!D_H=P2@6oHdO5N*e<#11/hd;m`TSa;K=9@*heZCZNn$4k2P@PBW^WM)?'f*0>i`.hU/U.^gn^4H\.]V[>N
%QJh:8q=fdQHeKspDuVf3!mmtWRC(HB7%bQr]-9%H&7TS)+E$X6WG=:9&O8Mp<=OFYp0l$K`!`jIFUR0l\#Es=+JF",")Y\D3,C$t
%)K9IC.EIn(T:=)SB_g]-)JjQZ(:n4@+*:k*J8-a>4MJQ(Gnu&JUBk?3eP$OMdgjJOhC64Rg]ecFGatdG3m'fi]R*+L9JY0@KZ/@V
%U%V*FGs)=GC(nI21KZ?"S3#t.)s[2q[[*jBhMF*bAC\nhB7[oc9AcH_Sp/W1=1;P:2N=S:,ZMMt`^iRS"C/c2?8-Q_[H!gN[_U?.
%2]W)0,/*%$4<nr@+dOZlfs+4dGJp+grl\dPR(R_cpp3pN")l@'UV'EjqR?T+!Nd.1PVNgNP'5?iIsul^-27glKm+P<$^pN&4kNGt
%1*tC803cplfU]*c]pOm?aO5Kf(&dW>dt2NI_,hD/6[i&"^n%Y\%HjWhf,;&J9T88s#.il)LVmYE:.,6_6$V;dg%V.N\+Ma2/[5u+
%F"e//h)u@6\c3l9dEe81D@OZY&7Iet.QE6".5N)[Nk1.g%lA"@DL6JTQpTMD:og4A?<3*qf3.Xflf6@I*@mG>/U=k'=Y#!Cis@FW
%\ff('(R)Y,&%C((f:mpD\f<LYs0rgHjP^s^^IYQ_6c,9<XD2?Z]R%A^rJ#0nQ=IZA"-34MQ'G^ljj>h_<bQ&\Gq!mS-hPu!krVuX
%pFr#/f^\`t%#?`LH!Q:e*%_uml?HOa!L4b!$@!@kgh;t"%uVdRQOon;Hs)HB4eYUXZhd:(B,/O\Y"=mB3s-L(O1Df6d[CM0VLu08
%]QMJ;813O06-(N8rQ404'POI_&ine^0Q*Bsg)l\]fZ#%u?.thWph5T<*"ujcWCZL%h*4JefFc]1Fut"AZS=V%@_<RhQ94\dn[oA3
%O.g<JJZp8F09juPZiD"q<i2ZZ?bXjPY14[?_9.Kn9AM;NjAo-"_;Ud,;9;]dP(g;O^ekY?ILakP2r)]OdTT!WR@IDnmnf6>IH&6G
%,bhFkNt2qdo^jX^49,!t/Xf%MUeD\2:V\Ym7R1osp+]fj0Mp:q9HEh>/L"Aqrff6"qtNqHY%L2bU;GOlnqe'I/<!e$X,2tI4Znq>
%*B1jqe6ibPgL5d7]s`];,Yl)3D>89*Q>?6N)UB;jd3.e2T5K]F7+D_,C5Ab\"aUVhU]</#>85NSHpPs@Cn7\4/V.UaR!G>,Wj6KH
%Kd<\4@jfB[`C_K5ctS1[K'HR?)8r^V3@HmWq-k,8NtHOr1:%o0TV_anrIeouXCq/5^W:'XoU7tork^A.Q`l&UhhPoi'M)>PY)d1$
%?)m=g/Tc5gP7UL4<Ho9JQ,L<,7Bf`U(G/ORB/Y[fMTr^hJZVM$7h*e5quZb!HbbY=ST>B4%)bQsTEc>CAY5Gt'i/0Y)fsd0`>1;F
%-s<h9:n,"&Q^;nGFPk_;]qOL?2hL/k&Z]SfTYef"%,\5agUSr`cVWDq"SLf&pr.@oPGTS%JJ;=jW0Qs!Xe[Y%Hi(C4bd2c"(),#/
%gT8'?,!c)[G+Tf2kHeab55jggq[1G"`+A-]:puuXCkZf&(,`H`bl.Br=%IqFX/"&h^e!?p#%P#Q3Djq_*R)J5.*sO;=]sJ50PQK=
%bu;8-('CMOpp>ldo*#PYEactjL(gGOD`E/Om-VFe"lC6DimfNNA<Djb1eY2o?BL+,;QKY]^;ITfoB47D#R0+&*,D*LgdA[t`3.ou
%OXqj4&RY&[?;?A]2odm=7'",OJPVI>!Nt?3nW=YZP(+NLOs7u6*ff*E)"1JB.POt)X*s_d-VR:Er=*q9L9C/Z8l5j=$t2ap7$P)5
%aq(Uo[>-Ac@cf]>@._7*)8W*O:.#0X9fnJ'4MUoPLZMrYYpG!r^lC@q875(^Acdf48ih67JCa?h$<jrGOhrb<QZR\&0i:*AY@']6
%mX;-!AES@W&P\XbnkZ`BqddZL0]aN.m3_E\`1QT$QVgbt_60S%6ML#9+G/,]9PPP`4-gN\[sLO5/%Ko(cRG*O\%S`n)B^-?e=`O@
%''PbPgB)b$G`N^\J%[A.^o+;3a9QRR"T0UQ<cWiV=((S$po7e-?Pc[.5uj<\EuV0u<@N&GKN.kU)]bP!Og5%\_0FbgZjf-c0g2J7
%;le"\hs4pD\nG*h!>&88>(VujpChH@%VhdbOT/hhJ0lHWFg<jh1q-U4;6kjCQaX)e:j?V4T^,k?Zq=]*"j=i[-!;m*'7f0dNZpg(
%lr.9YN>!sX5#9?IU*LuLFdd)-ausB0Wqg]dUf%^'/ituA?TVedI]Oe_O4j$E>?mE<82"89o=fj3o(HlMT-PD.1>TY40n5dB]\hJu
%[_Ik+T'j%m&o$6Pe;[ubE&<m((mb,2V6(ANG)bfMX;[,^NnVgur^9,kQb(FJ?TB]!@2:;FfpR:--%"iA7&D!@Kk<?[\je34Qgc8-
%;k[]]pJKS)RHXE;1GBfbr2$sA-mc(5#Ss"&$$Ik!h18q4#&hQf_HfQ7Dqr_sAD9l"_r-<4RQ;@($ibGVBb$ui\nECI8/h5],k<"c
%X$&Sk'K,G+]@73>OoY;)XRXjeL,K3/o(LtGrKf8=O+.^T\!TL2Jl_LRA0u3[=@B,ap^guA"M+o\-U<0_+),%9K0Z%V2T6e-7?^d)
%?G?RWkkPM*_0jo*^UXljTClo\Qt>.<2s#aF6#+7D,OFXTZ4]W#(ujQ3bFJuORID3V38;_/#q_+'_/:DYgrojF-"%[XY*#.fbV<\D
%9Lr#)">Sfk;Af6=m[3'OD;b+cODfnKOoufT+45Vn'L\F/fT;o9^fKX@=Ct:%XIu"mC:0,(2+,6UCZ(32Hg8P[EIlQChHC+d=Ko,`
%hsoprNGX=JXd\g,9"!l>+oNT\lkTJ6O7\2j2n?VV^FB8R@?90"=^l!Pj]G@VBAtedn`sR3BGWbmMI"7t&/bU!gLfqod9a9&pM%[=
%'Ba/OPl,3`(Lims<<n0+Di^#7#g+3CNK3ZD8-hb+[>8ibTR!FD3`7/np*ia<a?0thocI2co9Ln[%unC@)l.A,[_@'m`9ccVe>m^g
%"$+GX)hT_%SKg9:[m>YmaE*#;Y[!RuZPUjp4,Gg^<:G=82'OJ!?EYnJ#idIgp95;?g;cqp=Z<<Kc273A/jZnpO)K2/h4^7Ec-Ngb
%\"+U[>%!,`&(:gE%HM9D7.u.VnI%/o6*e:;fe:i)idb093k;u_g7U%h3S[CV];u?kc9&'Xp[CL]?3F7K<?`V<pmoAtZ^nXc%Oc,"
%"AEb:$->"6O7t5ESq\lJ8aGt=^_:sC!s$h9cpgtQk6l,<=U1N[1d"uV8k*eP>M@Xf5lnks-.LuD<@;_mCf)u*LT:seB#.U&Oi1SV
%p(p6F/dDa')dnX5P"QK%e!KgY@-7ahE*#g)1n=LA#0r07]4<)'Y\oeXVr^]lhglO!d]CGq;^h,A/4JFgbIK)W%6a8O1mB#a4d\[N
%-0;Qer,_O+fVD*H6<=$3d-1;`SA"4(f#a8L5'.@Df]5tI%6FaEEBRAQRUlPTfo8HGoN^.M!(TOQcB6HKV\dC9#h%.YG?jc!PU4j!
%/ckH#aoQPYGc:aOL1C-V\DAd8,)er/Z,n/id9(Gf#]#f.FuF\THktT(OLIe+,<^1gK)^s7U=R9RDmIPgB",\RBW(C9b+L!+Q<ob[
%ld5&V"&mMrmU@X?"Kgf]MfUQ3j_YB\(7Bua9FbiEXh^C7Eq2ZI9;0jWij?:6Qel[5A64BuoU[5C_+`?c8O8#)o2Jnm3[W\9ed<UY
%(7@POU\,4Vn=FR)^3?5,($-)3&60)OH2uA;r_)8^@M(*CK]teu+8R)@f73W]ro=%TO8o.DJ,TuYTE!HN\;Y!s@u-G%Ndm+>d"5'T
%Y)$s#9?Ge=DFAX!ZqU.P0sWY-F!_jrJ050(5GI;tpA>f-0d!?A/687+P^])[NNKV7bWsNa3>&OWBMS',ZU;^N.::^5n/=j#/UKsI
%0eIP`R00R`I[(dOg`'VZf$YrOa"=f:@Ve'3"9,@Wf`1\Eq"t*[[/ZKmp<Wb<Ii`q8n,)E8q7ls]5Q=[X<I^9@mJ6e^oDa:=;AG2I
%<jY;/48F(@"X_k"5[MS(ZrcnqW2AX:UueJ2S_uhAp<CX%@TE.<3?ZQLj/U7PeRV2@B-j]QUaQ[."7L[Sh<F;r@U@:aC7.'EC2l2S
%m9,u]Ch-jGiftcO_e$Lc[q_%Z/G_I<2oJ8^;h*G_J6PZ7B0O@:W,&DtdnfT/lbE%h/!+Eb-4,EnHZHqW]dq-n--`^WR#1"@e#l[]
%c.6@p*4rJ4nK:D>n9jmIafLbr3mU6U<J892[%Cir<cQ6Fe;*cl,a6VCKZH8G=,b0:ltlYTNV2htiS2F1NRm0*V)D$<*50a5#oQPH
%drWf-9PQEkWVkrl+sR]"X64EI_&h8Q2_9O191BoT%2%cE-p?BTpC<t6kNE4EX":#63d;-GI_%R(NDlI!YJK*3_Qi]RR>C/9gu^6\
%3RhOEWV&s&M!*+jQrV[NDu&,QA5+f6T-mM-`K81Q=`sD[Q0+)SZlZkXBFCF^1NesdcaPM-`FuP%0_dZ8U?k^LD0#]tF#<#q4%QX&
%mEloSUOc&QZh?C96bO$-fPBkqoYa<:\0Wi)l=R?.%^OB$F_J;-!g=YmQ><U2%Bde]VtN-X_Gl:g?Vbt_Y7T<L)%\7#e[2PM*^'[.
%eILPc=qUXBhd2.HlH</$ZOKc4D3kiAX!1Eu:Q.Yf(RQg#Q>_GY.9'o\pr;;2i3:=6;JUm:So0_E/=p=DMEkoH:20"^M/S=l(OMU5
%C5jhZ%::Lq.ob?aN2F(aXPsr+5d0*2cYjPo6W^-;91@^0nTX[1W%bZLhp=obB(KIur'Ofp@>=q^e9gCQ+a\e=GWe%JB+-mNgSY/4
%pPrgj\_pJ9LoBT^rr@#tjNV;C+'Y6(8lZDSL9#9X8@47T)'2DhhD&7jhsgDKbW'l-b:h>_."Ji12Z;G?aH]t@='aGram$Oa7(]qi
%VDZ$AGnF:7KgCQ"eB9JEcb)]S=?;O-HlTZVboY5Q.,.T?%;1"n3XtI$cOdMW*tX<4Il(.LZ:lfK*fY2<YI)pIo^X!(IQU@$CO.7k
%DG(KE,gWb?X;co0$/[1<WrcRNJJ9uQ+18'"_(2','FGRea93T2\AL)`TIZ.momSH(p,KhCj"FFrZP^ZY3\)!2RDu=PGdtnR$-Q\V
%D',j*(mXEQa#9m92jX.>gJUk>VXH)(+#dPe]342J8;(B3+S2iW>k%`NQ(!/lB(cY#[0qh5_]dWjOLT?$P*m,l=m]rh,4%us:VG4K
%\A/;\`(%c[rau<i\WHcRO3rp`6to8#bDnW\45?-CC%gE,l-`Gm*:2(]:f.e5=&*VqSqQ=[&-r,W'FsinX!Pd?<!]qp,fa+QnJmHn
%>b^'Q<Wb-UNN9k>c-G3mVKrSW@[VN8`K8V!RX<.WcS*V3$.eES0tcCp0R=d#msKK`h6duPrh6a[VqM3Yb'0LU+plA2<i8n>>PiuS
%L?m_H?AeG1^&U&`YaDg[PhE^3A"LcW!%AnWC]n=L<1Y=X=cmZ*TIX,LeJDL=q>10i?(\j[?:Bb]o/CTqP'+\;'B`kHYFh..`Oa!/
%a82Baj337-7pR!\ICj*`Z3n,8f.lu=n&c,IK:GkMBu%>k`lfN&CAeDfP)_g8H&f"'[;tV]q_bZWNiI)/NO*jtlZZpte4iq]*nt\P
%='2Ua4pFhQdA/MBn/JY\8gt$ugqP2eIr`t0SB\1l?E+(j(HS9BUe2AArNoDBg/>=&YB20,E!`SYn1FE,'hNe4/ToKbl@M6)DepLC
%UNCSpD*rHcm#G:;`;cingCUn&c&>5/<@W2@",+cfW9(_D)79/eBSBKkPE!Y!$c4kV=.a_bD*d'kp2=XFj+nNQm-$8X51[t/W5L@&
%mjYth,s81&iXF-qWqtn?L!U"B"d=,1\XhaZf<$C<e(?#NG<-onmr:u)OcYo>%i(-3F]<5%@F6?6\P`00`?6q(?.UVtF]BnK]*.Xl
%knd>Nka\fq("XVW[Ve2RZhHHDa)SD684<!HOq%U&<d1oIT.9^u#?t8=rVV1]RN</';-l*_&aLd$"(?+HYZ$hE"^[aLka"s/$s=?1
%%hV$(e-E[8("m2L,$/f:[(,'PlEE5&%R#KE11)hXX)LG91)6b/3%"nAd/`a8DYA%UC%8>L,"G70E;oAD@)^a,'9eIF3UoJbpEU3V
%apK>EAQ96O1[Y#27aCX!iGEP"6D;uJQCd\N8D;Yj"@M*^La@,4<([UnS*!CCVH>(m"EQ/iT-YO,+!@#3*ESe>7d^`sSgictlDq3o
%\FE7MN"Ui>m^Z&D]ahr?i7<i=.(s-$MbDin"MaG8).1ZOm.85,;-Mc-$nM8Z)'dbX5,(I'@70=Z_aVk6IO8S'TADC&pk%e8nFX4&
%opkcrp!mLN8g,/0LrAr0PGQ0"m!MJ0U9Vj#Z@O[*N-SGKqf&cbZ1htklJQ&R$/baIAipPfIHqke-#E&@.bZLjk1Y)1f8<3RQn=Oh
%@YHc7"]>,W(W^+`\Ot:+)@Tnmlr.3WcQN1m=3-8j*M?8'l7TpoO1jO4Qrf>`E80&HD"=XE=#ICpTAd02Q=!r[<?16"]L@/In'0'[
%DgQp]Ra[;M+1o3-FK@m:V6/73"s+,#@^uN-pm=O2m*7NPdhb])/=5so4<]m$.P75UrP!bRNZ,<VU%X@Fgl9`)1FkI'NE0</]@51i
%?C7lgCa77n\k;>V.jDdB((/Ece1hc/X4%%[i!]C)g"=kg&T6R:Dk_Xg[@"1o>8:\&@^oSUWHtbM7#5<GV'L[K7$S\LnR=)\St.T-
%;F-X]ePqdAn=]JRGHBNIOthbGpI%/Z3\eZEPbWB!1P9QI2T2=.(9<XVM5h'-NSa=5?Ej>%eR_2\8iimD2NGb;JNc`M,_orDT'tej
%%c:O2I5DlUPce'I_]oLi*$gA7[7t08,>mHkEP$d^,D\Lm.r`e9La$R(E%Yas*=W]A]0nbk/\`rh]?a3OIK;aJ(,Q]D>5BUNgbrVe
%ONoMb"N;'O`Co?mB;I[`$5IXrg'KKG(bU)Nl7pK!O(Y`'TpQL;61O(MG-HK8-1"%TO82g'H^X^=C9>0SQK\#rCVbe*U?[KPU7S99
%"m+6E%n=+-iZ(khRJ_([]?u+/fcN5Z?FEX/l>234rF,fr-^RYVB8p;@T[9[jVOOJ]ar?E%o"]-eY[5th`EP7sY=XaHZ.b$uJOajB
%,4Ol[L5\Odl#;nce6Uq(#%&&a,u1>%\MrJ`;:LGh'?s:qj=cOe3e4bkC%IteVcFu::\=_P:&DmW7;o2`J_C/-49kZYr97Rq_q5An
%Q`dNf+bl3LC5=G=MjhBe^\t-/VFqSX3=ib8[7BM(H>"s;0=iH:%4/[>7<=h%)hf.TM\Fg6MVm'+R)?nbe>6K.BNT7#\`8@6>\a=7
%&0NE+)'onH(u/V&%)-A]'hcMK7Fni/>YNc*.F-W0)>Qj#(8BoJCPUR`!]^(5mC@0b7F\5*YF(O+F8(!u2j-(Oqh4FAA5`)Ye!=o,
%_*Q6:M\]K'(DAZE<&5(XdS0>h4:=Ia43\i)knhjU\IpA]c:pu]LN6;=Z(Dd`_P'C3n&6-(VC'A`E!@^@>$qfn]eKdc>RW6\n0!?I
%@YV;GbN$o84?\40s.;1C.NY\f.u!094Y?@VnTUBf?9uod7NBBP&A;+d.<Bu-%+*A`mLu9`1'qT;^[a8#O$UL0c.hQLJ8g3KK&YlA
%=88T_n^(jZ$K>OCLS\,J(13nM6CAMW9CeH#n;B/(L+fmta:(.O("#Up\q7<YG1%)6B[D'Dk&?e;XY0aO21<qag<LufB_rq1_K.n6
%LA1h_;qku&ZD3rP.jYcSS4W+I=*#H\LM@WMr\ZVb(M0%n_("=(.^iCAK`dF8=i]/`RkLS10gAdG`)s9)P_pW*Za/[N$8*c.-Z;SV
%EGN;M*$s94;N-sCf-T(o;OOqO,dBJ`kU\jFZ4`n^UrGTBG4B5c2a\c_J<kdV7E`o0giFfn4(:o(;Z`q[o8H,GePdF<q`FZfWT<d2
%+%8*LF&_\dQ47OATEZ;ZdLTk`f)3pfRfMn_&dCKj.NG/=!EPbmGm(]`,I5UCeT-U8aS;eWpg4jHTLrWr\aTsQ3_12U+^pm+]>Lt]
%BB:O?1-D#aFR+9he:HC@NX)4g%&7Xk.>$9u.R_"d?E7X/;8DbZBZ5uB[X+Gf-?F.b5+=sk/-c95"fT-CW;F.%a0ai!-*$stQC9l@
%Bq01^Er.eQmP6obWYlALEUi"3MjE[BhLfHC_X'&f:0YM#.cA"oG![?XXQrf&=K[c%P=V2aSS\ZB&D)PKfl-AH=f<d^/Y/<WgBmU;
%Md<Y?HP^uP`jgT<-+26S9l8TK>0,^Y+-dsmM*&q'[=StcfEa1FWksN*kHrusie/;?oR4^4&rrmP!obuDTcSg-&d1"!&K-CdrQR$.
%L9d$PN+6F."Y2kkMo\aO0od8e4g$JSW0QU,N'^,*Ao<C0K!IJE,0$ud1(4L;&QADr7J2b9'IK%8Sa#eaNtZTOUM&0fB;-AMkV.!;
%5l"</Q>H/tp$8#!AVdN&Om4bb!ClG%1K0d.E(=Z5S)"anW%;F$+]S9D=K4jS*lrmZAPV8"N<EcQ.flQ7abHkeb9`Qq7\g"b/a=(6
%bHsd/a]@iY;l2!&2WC&RXU+\]VJAjo"IC#-'!Vl31<5P)X2l.rJ$-rnD:`hJFEXD^h5$20o$(pg65N4R`b$,Y=4ma;kCN\9p+6K<
%+\&%F3C?N%1J)-b9p]'qGN=?Np1dOgg9_t\l;tjY#aT/+2pr<*bf%(me^fqG-?1m:CfM_A4R\!&14'T"MpTb8.QrcOX/dBXkq2[@
%J**A$G3_peLDLj"Ul?9a'$OCab@B!R[jn+%!FdU=de?^\XWQU]MTEM"HW;Il^PDd`2IL%]9W*]0XlA2*,s9RW,Y3C43):onQj?0p
%&_3kj>W..*aBth+nOC5+'&&nTj]IV?J&G0I9KZ<"<NJ(h+N,dKM7IA+*+*GKE3SjVN)MFDAoX/aU9hm^([mcbNHPoHMKHbbb>s#.
%9pr/U5Vmu#'8<$N[-suZYX$tW886Vc.t8ck]?_)oj@gO#`+(sFB9.6lh'2F(8+VH;.4*%p0nP;ejeRRBeo0r\:Qs?Ib$qPPB_g_\
%cK$ETZQ>jAH@DrBP^-//4gi@k-.;E`)KK_)af9Xr?RY\Brt^Nt-[])lkm%CiHLc]U5Vu#mA/rR$drd>)\UflH/ggDO@s>/c5RK/8
%K'X_B<ZNuHgBpo*\uDk24WA.=m<']gM9G@MQ&N$WqTMC*^8@YlX%$u$jAe4u?MiPi*$qtr8&L=')UigQQ^u=-ZC4UAM$#N9"Fl]]
%s2;!.7d=lKcC<T3*:G-W-DYNJds3?P'WFEqG!a_e=q+sI@OG3:qfc.`d%9sIeh9H>V0V7=(1kjK9iWJIZ5Qe"/]`:-$"0dTI,AEB
%eNr1l:fp/bSCf]MQ58kT:;W)*M0he4RVbI^;X_hN7JQ3"_A?E%Abft9LQr+WS:#6M,bFr"\>$?++_BXc8Qm$P#HOe>VZ^qRhUroK
%T!D+8%Ll^i*\Y]CLFIa,>^FN.oWGgo4W6YT&ce7ejY=*)Iu@I6ktm&_2*RRal);-'/\E!.=!Hk="R^9`HS/n3"s>'Oa*Mq+H9aC_
%:sT9Kc=A/f;jr!c\Q:Sifn/L5i'3>H--HU&:K&qQO,ATQ-K]O)_4Xqbn!X&'(>kuBe/K"+*SZ>HFQnCOUY>F1V'30jQGB]9Bn'k1
%kAae!H/0b5QuA2.8?9ObiP?Y'fZ<4^3MEOl9:-h=:CTsrn@Oer[TdS?XA\E6fj\#8Mf<pAFN$="F>]un53KhC17)'Y$C-M#VBEce
%l(nspD=J%W[uM4-MVQh87kHErUjL#9b[#5_-E$:g.A#h(YO'H8C3LpSlGhL7Y6)<&7sQ>f:p1T6Eh%[t2CX4qS.1'<:,I\U)2TpK
%DR_QU>-(8:(A8m>g^C_$`LS\Rd3gRS>;-WD'lAG>-0&V>/3=/gZ7BEFT;q,elmi9"A,VEe_tVbo'5FdM$/)k;Ke_#+2tCcX=1pl#
%_j)uV+"A0WoNE^9I#`QZ).5-_(TbrUk6lHd/Z?u0V^?]tXX_X%N.;ui4$*=W4ieWl7%@_5<D?F?ILsORq4[:-fnkB8rOQ0A+pE+8
%J^^OB9V`QmqDoq/gY5f@,ucJJWFp*QL=1B-]j`8(/>EN#Y+X(>)]%efY1RPm?>51c+`u1E$#Fj?UZ070#SUuQqTga;EIaa^g%=b4
%[dmq4U1@'+RkF#Q>1"H/f'REPjq:_b@CVMIpfP_m"pX>B:`Z&B4"P9P*P(TQ?.K>Cm&#Q5C1M0XTPb0)V+P<S^0$dI0r1)fIccYB
%%oBL7%LP6)NA5adZ@U;opKCR"%5-j1o\NC!P&=Je_9KMH/Ku=E+P7cV[W'q"[m7_?CkAqm"Gg@K"D#ci^$,):h_6Qa3KYfMY__a^
%\M1S:c7^t91A0qPUiBl!Eah6;kXA8s<$P;8=Ynl4cJ2&%PmmuGKP$-PhS<*7hse7'%];-kU6f:mXEi^(RV,C2b3nmUijW!0Il,8U
%=Gi3H_ffhSmm(8V^cX1cR1_2/[nfuJ>Is0=)2baTH+eF61kRVs(AEu4XX<0<QcC!i">ZSE!Ph:llX!)NV[&kfZcQ;a9GRkY>\q0H
%,j%'PJmbILm)LGgb!^$8*0]Vj=">;X0/bo'Po,GII0P&E3GqKNJ"%O<S;Arf?VCTUi0b0*>NVTjNKg9ArC**BD+84-g5#DWdRQO6
%KR]J:0AfEi:_LmaB8thDlt=7gjGkH5VMB2Xg[WVb9?R+'J(]G3_-:f45]O;g@mKd[A.!]D#(uu7hm5#PeaL<n-dRMb5l>_6]00R&
%SKdJ7:8X.QS]i)*kYbN3Y1%h]-#q9%7[GLa!Ah`R\rpcO@bB4i>*WmTZ@Qn-MHnR0k<NjY2cgGhh@D9U?Un?2h&7,t4RQ3:36Z4K
%$%lIWWQP,8"=uejCsiQrQ'_b6LYhL[,=XC`T=FmBNYR!P,X)s'#V&aAAAIs<6r46:Z\AF*Fs.dcUCTFlU)=_Pl8!-j&_@`:^TnFB
%$DH$hj>WEB+<^<pYDF>RY;50HF1jLUmB?Ob"qa"RgcK[!1@K@brZ4_nJfg%jrf)cZ$3t:7IBhjN7lKTY>Q*^<]XPeZ[cb)&`,.=Y
%M%ITT/bL0mC0em-1A1iHCaO3Q)3S\$iZLL;@&iZpL;f`\KA+IK["Hh!(;7079>m<Z@?1)$iOR-pbAbn&Jh&!YRi4Q_;E`D.nnkYj
%.bcC"%Q#;;jmN\C7n(jiSTe(I_6"A]84.VJpT[ofLofnD6^gHE_5,c7Y,JA9BEbY=Wj=<4V9F(+\&C4Y64%,.h,g3:WG9BN`Q7^O
%=/gk@rn%sRh@q@_=:m#e@*2C\1%%qZKC,<=-]blm(#\=K;,kf8E3uGQfK2`j$7&f9s/35Jl+(=bcg9csp`F6KJC$On4!X2]p$"AB
%J:Kee)gt0Zig;;V@$1^?dEoXPY4]H4l`a0ioe?NB"=e1WIXC6(hYVW%\=pVIcG6jgW:8dre9CZs2Nr9&h7^Mo12\4CEDWT);`<(i
%]R.VdfiK)XE*-%R`uInc^SrF3`s:JHq>[)HYaQre))\I:gS:e+8`^-Pj@tE;@,Ob\AN;]Qm5OK(eEm2+mT7&D&.7n6?X#C]Ho\/U
%Y;&_;]#0:tq+6<G8nbJfhpIXS3./8\i#4<[n)etJbOf@++Xur'5C<9=8mIl5Zh^i302m+`jfIJ>72NQ>''2U8K:h%@OchmQd)jT2
%D"e`3PqCZKGT6UcQQ:NfIgN.Dl+6a48#Ja$d*'SDPVb!(ETVCd+?!&TZZlKe9_15Ip-Ur,r]5C[Mr_?"`5NZpIc0O_^UcsUf_C1?
%BtF#$VO.Bh(]`r+MdL%YbIi*HE%eM`3T1RI_o8BREfAO+F[8h`c^K+GUYZeE%f%3bh'0rTUN[Un\B$/@CTg#sOU\LuXtS_)Hf/mF
%hQRC^`@jP^)]n'O<_a%.QM\j'>?K,2K(!)^iHk)[p[q..Td0df9/5>-\k[?27C.ZU*K!]j(gcC+-H3*g?-?87YOISk&AE\KReWdX
%K]LOW(U&?:*!4!6a85E_.u!+e0pJ#<%qf=-Nd*KX2YkRO10TZ7!OIon,mQr`=J(<hnY!)@+3)HeYTQ:bmeJ..jp]Ec!C*!^P<)ph
%*G6#D-[^JI>.R;i!!g@PpL\%W?.0a71B1qd^=ufggtVGeZerB0@*afp3QWeGU?>_h_t!>"9_[qgF.U8'"H:#L/q3B4WoA_IVBf'*
%*qrl`ZeXnGU4muVqoH:lBbF`!$e9mpdg!OK&0*'&?fi&"k`jJq3c\$UfL71R<IMW`h7FZg_1"`rlj<;u&%-.J[!(jX9*"Tcqo)`]
%`ghWqfe6`8PSZn,5)1WRn/SI=)OIo!bID1n*7?>Skn;c350)=T[Hf-BHbLFlf;n,%a',3rkB[p$;`#&*n>Vo1;%@@r_G3R<(o;P=
%Y4YK%"_n2PZR_W[L,P58YqC;UPc39%\?g(YVp/p:\?\Dm"+/;'U:/Ka,&e2Nd"fN?5mD1io"\\Cp[a'.aAGG/LMTa0IEnZ"#sn<3
%DXDMAQ9Iuh>ihKI$PuUU_d2h)XF6p.o/Xnb&T1Vgd1\RJ[)i2JT54F45"ND='1V'Z:d/F1\F>:&#/MCi;rL\\3FC(E3PQbB#er\r
%hd:B"Q,9//i-F#[*F5-apmoVM>X=S1WTAL"Ng_7Wp6o1G<lj@m<p2uC4BttUllC?umrs13!t.On:Rgnf+g0L/+4F%bj%.jFQj->_
%d^VD=m_M"u8]1)^Xa$U'N>:f_b/@iTSX<^:Qra";Wa+m(De8rJB#&)3d.m#^eQ*X*ThZ4nO8_,I;DpMD*]Hnkgm;*UbOgeN(!.;L
%SrC.b@3-')6./2P][n0j['H6u[%n<XoV?m#l#]7lT!,NrS4]E-Cik>Wjn<b;6#.;AKM?8gV3mI@'&-Ws?PB$^>-&pW6B*q18j4!V
%Q]BCsYNENk0\EIUJq#m-:'oW'*C@R8bT`Qibo]NY[[H/dKZ^8sG5\Q$2UZgCJ>q+)ii@C+^0)%A8GX.121%J_lIq^n+lgQNk_WoM
%p4>sI9e0>K&3L6,,Znd,p5W$)dDoI7hau*U7MC_-QF.If#]u9;)9qB:iAJfW(3(ub&cMZMp#3rD=t8tJ?144N^UdIQQN)5;+.ic9
%hRGS:cAgS(<u8[FVX7Z-#.tGdV16XZCn*qH0^m'R]k_"[mC+9"?>EU^<J[$el.S`D*!P=]KW&;2o<u-(>P4)<'ZP@/^?*$`B^Jg)
%'):,8C[]b>fNbUB'Gi>oESpJce?6J_4)kJp2D.%S_DS+7H997eghU:3O&P#RM^G5W54+VY/O2eeJ^NgbdIm1`KRnD];XXqhMAhKG
%CJ,1UDWZ50np@3X"pV%Vq:6qs`ST-b8Wh\]p:>UWo[^QG3o*<f(u[25%a+Be_%s0c+P<DD!:)*Y3ZM=`4AtqElM:m)Tfa+"NM6V>
%bF*qX)_j71o'-X$?JF5.9WMqC0Y$)f>Fu`XD-5#,gna+2!UT[8`b=htl.r6\CJ02&\+oL3h\apeYEGP:hS6\A.Yo^kE51i7`nb'f
%8a#V"N%Yps]j>Es]4pB8WG<;<oRsp#Di<5@?\(93NFN[fbasR3T+^!le/$o0Z.Jq(,rlZg,\UHV?!_0DV,E,_6#47t!O9Lmi9"4f
%_WV:5`XBJ3!%DffO%$)b=&>eF`C^,?Fr%BKo"\Vn*b8ue$q$<7I.\bhV&ZD=%%V4o=P_g.^?6+_XIqB^3PGV$)"G5liGM$9V#i1o
%\^@>5/\BMNUf-$Z'pj6D??SGE678e?5+Xk`:<.qJMGc;!pmQYX[Y86@3I4$6^51iK<n4liGCu^f[1&oKFNRn/!*.H(><&ld.M1+l
%IBj$?h.bNVdjeY^Pe.+?ab:V$b6]Fu2=DI8Eso?0T8pQj*4T0jPifZ0SP=X"5sdD<m..Z6&A=OB<EEoJ(O<Zl`S-s]pja/bP=B,)
%&%Gd>lBqk1JGNSI07<=NY9\q.$u;[)?e)rJ$&O<tNIc9=s--&*h37OtBVb+^Kp"SNd$@3R347#l@+\FkW$A)GE'8IN^4fj^l7@2)
%gcS)i+;#W,p*a`oB&qWEee]s&KFt*^Xu+B:?sSe1D^7C3Uk1;jeQ.;)^"p7$Jf[q.d1"u#`%,KE5cW*?M27<u_Ne3"L8ZF01)V-2
%!;Ko,e\!5*cYl6E%./)%-hn$XO-Gk8VGj1PX6PDi_JoH0O[=ZC:.1Z)[3ff?&%Y,u[U/finH8::E0#W^,hI4sa[tGq0?LYn6/S;X
%!a9BY&FjFd/^%ZN[D;C!Sao%TW+;%A9QhK*dHt1BP"WZ)O.+o@d".8OJP.6gLhmKZ"9^=<)^t9bF(gDLPW%5"J!Q6JZ/5]@Pll1j
%j-O)&=Qej97Ro5$!ZJb`N$FG$F@MF>cn.D:lI#ro(JD=sC,25gF=FQV*KIV<8ee3T9Cs*o9U3?->l@n5<.']Bc=0],\\7k1SiGn8
%q[f!D-:D3g4gQYf4n1i9N]$cQ>C1;'r893f^]X,F>)061ra9d!W(0c3fn5npi]as](HQlZ8e7(13S^17b*ZV",WC$^E=VED4WSHR
%Q2Ipb(IaufND]]*.65MtUuIETZBjg;dG%kOM%qI"WCWI-TK'(FIF:rnrWZ0#d@u]c?-O]s^NkG7.eM?.js@mU9]B2[O1?BTcCBg+
%_3j@`86QAe/U]4KD);1FI7Zf,+juP%St[O<OIX_K;>chHE#qXePgk]LJf#^<3M_tFIAhV6`c+rcn!bFWUe"-OmRPDLSa&XiPt2?b
%o?hguFt<'h;ZM.p_E6Kp[@l[oj+,f6fBBZTp*p7OHgS50#^cLs3[k4%-G7pHDD;?,]]4Hg"I8.Vr]8_oi*\uuauMi[J3pf""[C#d
%D(tqW3SFNI]&9!EJ&V?T?OSQG_H([.)$qGsR'*Cb8gh1F_?d4_8^'C":'TB/N-acl]Mm,emT9_)]k8@!IA%j'i\H7XOK*o?X-GoK
%m68=`?#*N1=8F$GdoMD]HjK>Z>57Jt@pgX%c)fcA;\3,[?4_L?m&Do,h:7eqSh_eO[dNOo+ErrQF_L8pnQf$pk"oV!8GpJ3NtB4Z
%N*s4)<lm`bb8DFWFT0ps>Uh8JG'Za/dKSB`WJ3p`9Z[HkGhHiI@BVlElg/@dipj-3+G5haMd+K'+LQ*'W3"$g?+'C+qB1ft6eka]
%E7]@u8Sq9r-u:NH>@'"3<>o-1)V,JD83,VPfj5Pn]9M7$gL>o5Lt<=b,&N5KhA/Ef)N2adhrAA+E3iao9B\!"rK%FfI-]Vba7D=R
%l)^Ee2;!G)o/mp)YDV5/'hFS#LS5$BJ6Q#:>K+%Nn_=uR6ocsXp8Se>Ot!gEYp&a76)iYPhBtY?WVh4<-!,c]DMh?gFA,<?BF26b
%RhjGDI`XEijguZUCrC''n1NfJQ%#=6Kd'pETfD*[8T!p^Cr`KGq$[XVR7M'B`3$(g9HiMS&YX>u1>Z_H</:X[.KR7E'qTg]j;Bhe
%K"==&TIT]<@](XF<GO$>R%Ig0EFG<(eufjJ[T%++(pS0FaB1$:CRpts&VG*5:B0-2_k@t%F#r67RH,U$>OQcp(r7MYgAZ?+%\o5n
%J763\5J8<:Ht9b?7r#)r,`]HGhTebU3PCs1#iG`+1IkQY$fDYA-f/e1%)lM+0G!!cf<lm$&(]I8MrBcuYW*+.+up#<G&%*T2&&hG
%(`oaIL`//r,.'#ZUM@gtWadh/WC"bIA0QUe$u<7o7XBh_\p_gD("-o:+,:?$$RNu54)D@^<N9SfDJlhlGA<'nMFX*T.*Te&]2s.@
%3HV&dDNqZ_>VAU</2;+.V;3,oY`s<AE0Jk3@RsZsdlD/;(tZ+;:dbjN`$,)hl]#4b8:C/'+.Ku)cfX;HU-_MH[b=pUdaZ]3/V7\P
%0W4m6+Gtn2=oI8V-$]t<93p[THtuf-Xie=oQ+>.um>cbaIVps0N8:8oBaU9-p8`'B^7$&YJ92kHKq27'EXPECfm5uponr<6Z$#^M
%ehipf1[@Sl1@lkfM@rKQb-Ot"U&":4T4G&23b,PR5-q9bG$ABt:\bU:GuQrQV)#?)`cZc"_pk,UM^jBR8+OHB&iY]hIk,uU.SHGC
%j^4cdQ(34h8HW==mm:Li?UuXA+mJQBn;R54GP(ea#\c^H@!][FJiN]1.I,2Zi0\,Z#DnFHgEf&,GWq'([:XE->ChPM,fW,FGtiS?
%,3PS:;NmUpm)l<lnjrSgkGui'EsTaoAGrL5F@ZK+3qR-2EE++^VG3eD6:nCs9^h8G)g/R<HWP4g9RRPTPh#6>))TgmXQrc)6S'Mq
%gsUY#UlFA1Ze6]&2)ETks-"g5SV$U>mb`a8<J#H>HkPt;'jR:aIGPi''"?#]X]5kcohK>[B&rs%[3W\3iCn.:IBi6Rch1H9cYmB(
%W5]We4Zu"AHDM@2X:VSRO7aqP(Oh88+ATE=FOs!hnJAo17tW92`:kQ3N700KHd>JYq_>kE[E#6:>MWR/g^W_7!cRWOp]904?*N^E
%ji[6f-`XAtAR)(k56"@i-Zt\fDRWDs)k'+oKH!K';9:rW^%IGuqs!U2h_gKI_</NdE(5HqFh<Hhl8q?l!nttaFsrBJjh]kOYFm;2
%&nFp6/1?#@#Ft5DZ#9Ip&eW/g@f*[g@W4>2*r_K!G$g(NP#B"f##M3SM[8&KS!c>eoa%t;9^>d6je]=;?mcnSW6'bPL]Vb+34;kN
%*Y1lE1qUW]Vl!Zr#?OegI>4MRV'Mi.S>NCJh@#O72fh7/Su"j--f!-T)HnA'=oalGAEQ*34EF\8b1>8*)O&gbo31/nibY5glW/a(
%:81F_:Ut%.8R9$ZPW+-+4TR[Yd']0B:8Qm/Hu88(l4Q87\&[uC!Uj93^UcEuGGgEF.92>XI8po)l+%,&)aZ\5-r%Qo)80tlHCL+H
%f[%E$d&(>8[W_B,Ae<Ig;'OF!esam)qQ\F@a`1[N_P:O]8+r2:c'CC2JHf`9W%:]_q:7%-']!Qp.?o'H(8C:49[4bqF_q;4p<]iI
%>VrI7Tn.iKNo*9]OV*YO7/M&i&H8riN!n0'(W\@5i&NC7p(b9lo&VbNcR[=_4MD<FUM2.p(QL*e.:?JW\.f_An1o6"m;Zo6k'[We
%$HBDO(C,X?7Ju/-Jd<KB9>:[KlWmX;]ZB^mF7e5rnnP%Q,A*//8%Sj4F07!.%)1d['/iPRY6s_57sfqaO([62Eo4WR9tK4f4_13/
%#tN_c*+Kdb+S!Od@L7Bf't]Q5[._p]miq@YK3t(:M]DqZTY+PJ]rPs4KFC.s2'oaOPpRK[S<!#<?lI>nSYSV/jo0R%Td30H6DgAZ
%IQL)tZgb!\9gG&%=0YA_-FqeOifQJW,2Yj4APnd=$i0aJ06I27kXp!iVt=5s\W]]%0S`0jQHD%>gc#Q2')abQ6Ik@(]Yc(7,OM=Q
%Am_Bk#5TSs0u:i275a=m[u916F*FE/YOSo"%[/Uu8+PdARC)se7]GauACNi'ZZh-!*"d_;+,CII@GOuE05"@>QYFGVc:uVM;9=&5
%l)qE$[hUeth.&*WWVh&6\c.M\jk:Sm<gn7[3]l]RfR!f$l-,G=kju/t*?E_6RQ9E6hYkfJ@`Nk!-P"kgpRX$b,OQuKfcCk2iUqZg
%MJU1Hht*._\jZ5tmK/i4aX>a+8C0/4h+q`_9^.%((#G7pXX`X'pm?kGF5'n`ZlFA_85<aAbG-Y'Z@id`2CTg_YIV%o>n'%<E#+?Y
%T<gKGp#b;+;<4CuFM7D-/M=`r_a@:3`gYVZQQgmU5>B2NArXE0JCeT$0gp[>]M]"%(#&Y1od`W:'P78R=o+]AHW%@@)66Ub-(0de
%2(lm;O(!!Pq+Lg]>ko_9?af-tgrl1m\>l7UXFlaX[i*'`'QClpGshs3T,%'m"Ui#/JfXN?P$n-P901]8Ko^bA0RIckQ0$Hm$k!5/
%4$E:q8>ekn.aVl]iA\9bnY?"cg2)mk`]GeL]/mUh5c%+`$Y;@mro\nBP(oJuCG:b/5N[UL?W9IiKn'AVgFC/L!'\;[L'JQECIck,
%1(u.4rEbQ`kBE`jH9%9Fa`W?),,m5mWLg0'XAKE$_H=Jlc87kQ!55X,&49]7]1JfoXuO<lq;fc7YH)f34`qkJnC:lT"m%^)U2aP0
%`KH6eUb@<tkgEZVQd4,>38CRIPBROER*q(ASfg5gHkpfC6sG^l[h;dSZ-0O:F7q1g=Pej#%cWDRW]^EbaN\JM<:1,pBM=68kT%@k
%>="iUOZ<<PZ@N:;_o/\N`@e%[RMpf?^s_LHbco,.,FAk#e-&YGPjRN[Eh``>mQ5=>ZBADQGdc%[n0jd-]@aji&)n2U?*eY`U_9Lg
%V0h1(m>/dFHSP8;T&DLVPL8/s\+cfmK7?KT9IG[_]FfM!M/Wtg^<G^$DJP].n!;)*gJZ:sI]]+*D*`ZPV.R9B.;;Xb>%O/7Y7Seh
%&^*],CI9[`4GAGKQE8a*jHHV8JZ6n4ggnn*(e4C=4CegX;o7CW:gE<XADeao/WT6h`b3j]>P[!DXKqY7Y?h%Uef%bj.4ISmmdq!L
%PH'Em3Sr!BN80TY:O2U#GWunU/\7C6'j_@`^%Sh-L6+'ho@4]o,Y*2'%U/%=Fl0T^1<bs5+`K!XRFq,i6KAep63B5UGF@bl+e:og
%'[S8r:o(`=O<kpqlM>BEf#l">3@FEu%ShO/W$("m,mZgplL)PCCM@FPHh[3ES/(WQa?JJLKVX0,H#W+4N[@]2B)q=bh/8kNC5!?D
%,cOl/7n\Fd>j#S"FOftu/*BgD)S0%2\#e%/nVAh;K<HqLCqm5D:!#rD7UqpH(T9od>fTj=/Jc$/htBlK0:?=]GjL^V.LG*d&$C2Y
%T/*_#g%g..'@.CpHV%f@C412I.5F9pLZuLL8?X6_@=ZTn@LK/3cJT/dhHR-7OkBc'gF)-])\.@H0tjmGa`"k31L6Np"!](-CNa==
%WXPS.[nZWbZU\?FWk<J.q-0*s/7kJY^Qo?c4Y=ut7B0f]Ts,Qb)#1(VZir9d+#W9pgelt2VCg&*>!>;(8#pVF!I2)k41:kFH!/sN
%IN-*ZlCdTpA]l4gHPa\ehdqj0J+L*Wp;j+$KYF]`9\Ep-ELXk)3c/JT?:4_OC3lOQ$U+8HZ\R+Y,;]c"XmRD+P0DTBGFo8ZI8*KA
%D_8XnQgL?DAIq[S8$Cr"9%B'"cdA?#&:-tTgmB63OK!o8(NE*sb;@ad'&XMKnJ9aHH;B"CHBaaUFbJsb&d'3[nor2nk13m0*s*cm
%XRSVDi!b@A.`Qt4"n8q!G^;eX#4#+aSS+h3/)j5pJ>P=-"D]lT,$]5nZ3u[2$9IUa*"h^LiZ-ZuJCthIl5l-+5X5bd''j.I3Q7b_
%4pN>/o?9`fEF;`f83MONFfJ9J$SLff4,]M`Fh:?2Cc1d>J'Y4qjo"1>0OO\??J06^AHWsP`$:E'>n'>(*A2!7D,+Rg!G$Hr*@Q3_
%!7uXPFRpK`$V'V[SSP30c<[6^+)5QI;)jl-3#1[IdSCd@5"8o=@4b1kYuRh2UEq2us.g'[b"'W<Pp]_fIhh%;!QX:I,&u(_@f0Js
%:UJ;M]P],f(,YU7Wn0Oc!%gEIUj*\KN02LL-gDTE/S#m(]W&Fp[\>sTn`Erf;(LKG?Z^?+6u7ZoD^e[QL^:u5dA]]$P/5Jr@Q#2'
%nQrbFT"nl&&1rUn+9TmABJM]2Kg*rWFEGn3&KnIX^L#_Pge+U0PQi)q]]CI;.@hXXFaHMBaN0'No0+&"YZ(jn/kT76D*X.Q24g%?
%%V"\7(Co8JhcC>fM"D52V&^u5X4W#G(I_)9`?clGURf]S:Kgu*omQ@nbbAmpkaEQl,\jg#(jg@=#Mm/L(@5BSY8<cJhDk0d66`P"
%UO&5XIX^JqrggHTpJDQrFBS$)lS&f17,)DYG_O/b$>44+RWd#5K0mpnp+"@4ZP&IQKf!GXLbZ_MgMS4)Aoile`Og/>X?^O?-=9LI
%l2Yq6iGWF.#e/<_\##OumEd#W8gBf=h9rmQ+S6;%3RhtKPNlFUHR-L"+n&;D1'r3'HKlgE./3Zid;9(^"!fth0qCE=CW:Y6d+"r!
%b2:0Lei<3R^@557pFDa\>BT./4:Q'd6BhC!Hac?n%`"/;&sY_M2riO#08"uR0f'%)A&$Y=6Keqo,rn!f'<*s#(>)eb^G)`s_jYhs
%Qkj"j;!q-m@.rVR;Y46FNZJce!2lRuimhC+[2i0c/FB&#D.6i;cd8IE?=o;;ZF2kLS9SlQo^5'BZ=QVF[-b0jGF_`qha?jn36P>@
%M%!%G0GK80\"#1N2pg*6KX/(mM?I#KS]>kZ[ESi4=Kks$_hDYS4M1jFTOs"N&2AVL`^.h+KB<PY_27S<8r>Ti$\R+ePH,><"mDc"
%pP9a,SJ`"M[A5`\'m&",Kmr6lpqQd8lKIE7hj55Bppe[!X%0!UT=)RGUTFEegaF9CYi)H%Srk#c">cdIrj$Os;3qe$O1KX:HBcD/
%ihNXtQ60]2\,`M/#:2oD4"`kb4"r-Ob2RCadV&6+'Ig*'`CO,p.S%Y8EC!K'O%PR!CHj4>>+b_K/1Fq>>aX$!0doc=g2V+1<fbFf
%qX=q%Pd5U?U=@e,=JXG*G$(W+eY>I-mS^r#V61jT.s6%WQ7I+NY[FG"Bh#DX'+BebC=-[)9?R>R(G>@`1X`+ki-XI[rkh7f9?X^\
%(GPM:R#s)qm?nP@eQC/=R$Q&Z/nF801Eg=52Le]Me9uO-c;_\E/82'RSWPbZ=AF[@C6rRD9f^%CYURb.UeOuV-#Uj3B&lZh59k-i
%q?`!W_TaNl;rcCGR8ZlM@A20Li=AMN)Mh1FS[*]:mZ`&S,C&L[0dCu/_`9>qb47"7;r>k<iDXrU)<oV-)hu=-fcOkf:Yh[V"Ak(,
%AgC34.u-Pi.khg*6.NKj#bgN)9LtkgIR4HC#AHL7[G:\"5u_.W#t`Y;<(BAS=["'gb5*Pq<)51mNEQY0;/oPUg^/7*rOWqu<-PPQ
%M:D*8`^Neu0IC=.0r%Z6WSPN1PtGWdN***/`(/oelbaeX9_FlL8>`tI7PrYB1Ei6fq`$3uWe3#NSZ7/n+eEGWDaloj"#hBr>%O%?
%$!$`?)%kEF?Y<nKT@MsgWmB[E.94+VW0f&MLZMK<4<^Zg%@`JZeKdqHWk*XK<`P&=/?J+M59m:6"h?p=<?8@_H.=CFN=)bU2'/)d
%m0UBjOk"Jba(8:oLW5$K>s9L@g=(bN@]PbG*0sed*h!XF2&_sG>]p!ukc.(Kn&_a/%l;)'SmXm2[2e:JnPr@=,JRul4X7aGhSc>q
%X1<g"&_8GN%a2)F%%\&?X_dR<'W^Ja))50eV2rd(p()X@OO\8-0$3CDR1NqPrJW;.cc1ntX!a9sB(bPY&81\/S<.BclMS.WC[Fs9
%'!6S;*#<7jc$N9ae^`OjC+Yo1/Cj%^)6m5%lASuK<dd<=<Nfk6ZF+G?j.`ZI?sL-?Vf"u6[@GBZl.0lia2M9+W?.CEX\/AmJ?(uT
%N.gN[YEL05eN#<9j'$HY\<*a=R#uEkAFHIa.tRB'S1CY\"^P7o0'PtP@pINK*6PLela(h@f_&B0/FE;8*>Wj1mARZJhg&JbQ-2$7
%n]KQ?Ok8Ba;46$Kon:[B:Y2Pp.r32E?Lq2+b.T,R3@af-3P%Muf@n9"7:4kA^F/n^47'KHX!a9sIauS7Lqd!YDd<:Lm,Y)Fm,tR9
%'!RWa*#F2)r,ka=[QKgP+kY+J5;!+DTDaigCun++j^@Dc$k'r'N>\(9X[cl''XeY'j0Go^DN"q?euLe`%9o=>YW-H9>N>:Y<NH.r
%5\t;9UCsibbst33X2$S@'8mGA(5c\nYZ,EIpR#'!>_Z+d=B:Ij`o??D9?+8`=>VqMiM^QD?Kn\5Cu!uHl.BYA\9RB'Y90$jjc^c#
%OF9;R+X-`aSe.#qosftIZ[+r/QIY"nZ<XeG1"g40\=DolG[+)==Ze;cb<n->.f6:gQ^)t7:C,-mr]28UqlChTQY#]s]^2tN>[[8.
%4<ZH&l>_s>BD$r%m'D"CBU6WT;R=^/$*dW6O3>d3X+pjk=Z\5rqlHA#SUFOg:j092q#TGW^<rnO/8N;FB=X2co!:FZirZTh*gWI1
%n[JiVDp>Kp/T:Nj&1rg\V.ePZ7`B&o?&.NT=Ze<-Mcgm_Uh0)#-nVlH=I'^Y4>'<c#;@c)Mt\qY:5e-g.SkuC2(DF\X#DS,Mj$.R
%;N$/h/lVYKSe.p@Yof=4I=e7$Z.`j`KNp+fh7-iEIsYG+QJXhT>+<<J:pu\E2(DkSK/+o^b9K&#?H_Xh/mlek3@\F[N\E(o>C4bj
%Li#Jg5oElbd:"2&p?uuM>AV?aQu1it;*!CLJ"qV(Z.4Ji[W)rb7;W]jr=?3Bpe/NA[Q',]d^H[*j5RKR1'ZiW5C]48\:#-R9AD^h
%-U_jEe`/Eocf,HBh:<r<,'Ed1F@,>[h_Qm/qlChS]RA@+8DXu)Nf2cbk`3gBo$WI)h\)678`(llo1SUX2Pb?g>P>pR!F/Zd9&R"1
%O,Mq*5DE`gPIVYH_I`,E'JANo>RVEE@9a;/e\d!K3(W(m\2\ZLU:Bu_j0H1r*Z)i8(ESm^`<dV%a%aW3.Z[6T1+JAY^bd[+9-J4Y
%,a\AhYY6YQaAJX9erEDbntX7EEYG.,b2js:*>Qf[0cQG&9s&A.1cOZT6.oKY%h%PINA;uSb>pMRSkG#'.\E1^GZ6qph1&Zr(V;OW
%U5R89QI3\"Nsk43AW07Gin]QOl,G@qPgdV))]$ptlMm36]#9KdU:U-5UU%K+gV^n>KSm[q\jUn_ik!IqEI$Bd?RGu"T>fh']?fII
%M<rgV4s72Tf,5@XI27l:m68!e=DX>VG$&XK*5f;E0&c')j=[XZ\EIg.6A)SU,br($]Z]hbl!:a(&b00#cuJm;Pgr5,GUl-A.)Ch`
%)]%C,Ze),aDt;#&6G,8qUJe`r^^l=m-:Ai<j%\jkW$$"F`)0+_PY23LH.+E*.*G8;BO$pk\7&X2Qdt-U]U9r^Q00II)A_O2O6`H,
%0B)/g81tFkj"e;*+u^dsRj#1:WEq4NYZPhl&>O9Z4Puoc]m2+u-%")L3\&jQ@cEbk06Ui1\2V)DUXHi4=9c`kPLpqAn&<<h(\!EJ
%5:5?IO$>8VqtRT51;;*"Nsb^FUE>TgI6KV6k)6i7/E]YPC/E9D@aMW\0;7X/W%Y=<OK<B3Le!/Iiua:Rqr6TEMu2M2NQ_3r_dc[(
%2f1s8'#3\.)&;s!T4:RW(W/HioU?Hc;5rHic4,^1(2%Scm[#Rk./8_HoCkoWEifR8IrXl\AUetf`e8h];[0(JGnnB<J(&Ep,la@-
%UEKZrRR.pS!%+-U&ckbBc/1/VN'B'?"C.Mhs,Ie4s4%'R%%'H,L`CB>-%EBHE)PLZP/(em*>/NN7=.Q@39BKM@:3@,6##6kSjpYL
%'Cu^U"/idk,S81C3%,B/aDXTpQsG2<-<PUN.MQ-XKe]Q7s75%p(<fE-+;[^dGsj@]o@Fl%i+M^Q7>$F54t%A/gHI50S6hX=l/9(u
%6fPr.n!fCLc@m5O&:XWLKS2$:QZ3UG_W4Q3iG@"R6GdQJ_c"?O_AO%$k&QO+$.DC)/1=bu80<s.c;_l?7"lr<9um["gm\lkQ5;;"
%/R0RZ;/tQ(V1(sA=Noqu"bo6kSWjt?:,!nJr;#Y#J,QG0dm*cj+91uRkR@K,s3H2i=8q;GrVBU!:WoZ&s79UtmFT*f,X%;oD9eq?
%2Xh4s5's[Q8?$;lC@sFo9"='_D23-q!\g;rH[-R\BYb7%&s73L$oAts;SELghX"0*6p`3=`(HEPC#L3eqcL-..F%C?2'A,QWUMM\
%[bm;Z<jOT[L>%g9DP1Ct-o'Gb4muPVI%-kkoCsSfa'sk",pB,n]^eq2b`<&%[FB'JnnoUT7%g?)dX[FVhnY;Y9mFf7neM=ZQPRud
%d5kQb6M&8k.F?'5Y3-W#Qi<7:jeicN0A"#=<licJj-jF)8a6mXjnkR=4WP]_a4N;l^/8@6#-rN*Y.CmpcAk\6OCC#Vcb3MSNKB3m
%2.aa\gDL$+E-Wr;bPP.TAlE`c2MMBKbObKf!PB39OUm`LfgmZ+PZut:l8WV+j-;>mdg%?]2-]KB>j.u/W4`PZ^`6HL25sGRI+d*Y
%k7b+*K)621UskUKe7K<E>Vm2M)HLTp\>7Rc[1WQ/L3c3p`+Kef>#UpqPAsJu9GXd.Ruc)`MJq/J)a<5h\D?d@[oJ=&,#dUVPEWXr
%FA)o+L?Tl3dhl]>]in'6ZdG\?4IDo0=-`n6N2E04N9B@ZZ]\IF?G(2u>$'R'bB*T+W==c7,YOR0AGXG>WJ:;;iPsN+e4L5D*h;EW
%nP+qn'(9o*EU)-)$[CiP%Wsr#V57NKJ+bLWE:2t>noqVq.0F*MVh#/uHm4>P!FN6//^\,,$&;XJ][W7R=eol\s+4(aT@r6R[if.=
%hhq6WB]Mr>K9O5(J!Yn#/"Gr-=8c;7c2+7i%:N`RV"28/qOU=&e`ZAs*,U<gT.]f"-LSY<3WH6C:UGa:)]W4&H.@B;6l9-W7F1ZS
%&Fc_kc73CL1Jr9lnnYGpIIWK8>s%&rCRg7&V9h*VM0dS#jJKS$2M6'AV5`7UdqIO37lKcVVj#ZPV/'AUK_C"\GB&D!1uO[380>H"
%H#@8pN]`r1]0n\':eMnkLc<sjr;6kmp1eo#V6&SHq=J)L-)Ct)SG?(kNZNo1%n^mWXs5rtQZ9"e(</3*HD-Y-X%&Ep*.`i/Rr1)E
%0cO=-Yn!WA(#no#CZ!#%'0b!0>"rEq+$*j]!Wfd%Lk/iC2-l,\Y(M)1=Q#DAmB2aRR>!at[\I"cKT/p#_e'/COpnEY\kQf`q:EbX
%5DNRq:;]h4k`c:M>ZJ77<@bGDWS>&V,9bS_X[h9t13_O%-E,a/PDGN?o<-AAa6qSNe0)V0/nJ0H9=kdGVVOi07UM$Rl]+dYYqZQ]
%"u8;.TV.q-'[H9G";dB#EXNf0pp1sHCFobb.OSVD+E(1kf>F"&=-r[Wpa;+KTkqSqburAa1KmF@k(d+]W0sBJ,RQXado0"8)T`X;
%HN@Z=>>+\prl+2I=);FS.Nc?^R3-9;2g!$NZH'#V>Z[RMDZr,!H'ck$Eqabh6K"Gjk3?1)<`?k"pr)iC&L)"+EB])-=hl]"V5hqb
%<7M?GGpu-<gSGmYTnmD"e*J(!F+T>8duGs@$k\9k#`,ZV'^--6OFktq-`_P:o,Ks7>YP*j?$Yo*7dWU(GHX?+mo!'rdkN`1)L/E4
%Dei;-f?CS@;Qh86H?]P@X+M:p,[GrDeT[!Y/h25rERIkqhV+I4V@<eCX.<m#(DG-9W&;1,"JV[JF#C2GKW<-b]tB25:;LbMnmS<<
%dj@!UP!VOC2:tGq>%*`oR`GPG`2^^64!Eqa>j6iaq=.3p10R-tJrW=2_q#Iu6K2=RJI=0bqke[]GsFUs2p\P/Ed-T`_+jiTH8m\\
%b:sBm/uR^qF=NP^X"4_.H3bjUTE:E@mTUFom4It\R(>>k`^^=B\'=POc<)Qh)@b0X?P`0!;-[Sjn*^.Jf8jc\HJoT/$#^4['2Q`*
%n<!O^QPE^s$AL^`Du:U0b1"9Xhr61-_:4ro>"a8rG':1pI's=NTEnR=Hu*aTW]H-]4"8#dHG\0M-NB+Sj@R5@YK<hY"8@s,RpWmR
%)?=!B87n4Wmj]S$3HV&S-YcGd"T3aIoSqPW=&a%]b*68F)'eaoF?L=a%`5'Ii%J'7TlL_BX!,<[?T5t#ljZj;MbTcdb=]rdCN/GT
%-jM=Yqk&t#pg&)8hK;,D"s#\R6G!m&(&(dP`dC(1j*>\9VXA2+Oh*C6_#Cdchb5iVQ@Q;u<-'gM:>%dUo!UX)EMds&<pI+tM)q]F
%X-"E<&qfR%YcY",!Y*P7QSgMW(/lJqO6#j$WTJV(^5o$^BsAm!S4$?jGaA.=[5ADbl!VU)&RC7>US;V[e$4*eCu#aWCKg(4.bHWG
%T2$uKl.>fJkdNKn_H4)t\B-BqjT=2B?1i?/IA?VoO#+%ho(&U>MuGNF$*Rj=IX3)?4TSf.gEXHEerah>``-.rQ4:UWHPl<7p[BYL
%G].f;KjWZRi1X6sW3#LNb=?<*DRn(h=).:tgX;n:o<nBkj)NOth#5LK'H\\@44=Am'-=Ul)f6SG*$h_*RPWXek'1f$g*QODrDQ/F
%Nf5AE_H:=:81?=?\QbP4,$Fo&mE5luLM2on?4lHpR)=J""6<2M@raAWiiZIs<\e$Y;`b`MIaYL5=Q/do6ZK>!Sh3P&[X7=?brVmI
%[/>';J(^N3P%TVR\FW_^\q)psS*MDH^>*FIrbL9&&sTmpB@^"*l_kX&\(!<=G3GL$`B?HS#Fi9a24B<i#<AZt8g(d3X9;SafupYD
%=!tVAagj#F5)`G)2BPiWm]p\R6M.Wbl-?A9N9*^nA;od!el+nhBoHK6,PC+p27hNl^c4jF95'RmI#M>nb9bNEd<1#.lJ%?u6n&>0
%DphP4g)0SJMF^C'Aa_f@Efd)iFY_B9c7sZ)oge`#lbfqrC!#VNFJnG`-.g*bGLaV8)$IUGM@6[:2,C:1<9YeJ>l1Y`ZrUE(i\PMe
%jf[$!]".O0>Zf!Z??),nD6o_lh.8oS&'9#KEsgbpS>dg/-[L_EI4=Gt"K!G\!mf<Ze(io8Ah"kbE%AIQh:7[`hppr,fff19[9'ln
%*92'oES8(R!6m!ihgiV&J")d#G*DnYRsf@Dc@Q4K1+g+eo;.X*(WVqhce*;K2"8tRb8W44_4N=-eS9SC40)CAp'&.caC[l:qMJC6
%ftE=m/4tRr.Y+WE5\cS>B_eZABWZ_j>?d)7,WL.Po8K0aem=]!/eetq'qsQ[d%f(\-<MI><H][Hhp(#b!7A-B@&sIs<F06gaM/t(
%;JY[q%@`SHYS$f@B4TM1)GhaRg+$a`YGN`7Y9l-r_d<S->]:(rAl-rd?t]?/g(K=@X*i(ufRqb\Hbp/._qR=c9d^;_Y,=cdeQo'm
%X<Qf8FndS1(H*X"^Mb-nNitnWIbMs^$s\jqJu5rRTj$p5DZ$t[Hb9aniL+26<&(DrSN>Yi1_FZ*n-Ekk/],c7-I>^IC!;BE%]nKk
%?.l$bUU,h)k2Bk&X*O6;C*i;CB4f-YMHg$nP;M9VaHQ5OgrE'^QRIn7C]i31"YCu!lZKr?kFdX?=2f`:^d4/-pS?k=';8jW$r:'3
%P+O5[QDetJg9I(/gC#,7GZmbmOKF=FUkG,`DUp`ug]c[fS%_+hBJM.&J)MLB94WW<a0%A][=L:Fm1Q*$k>%JA@YkQr7kiO99D8P8
%)$g%fE;>Zg$kM[0E%'+e?^POHO/;-]0k\Q'C.E%R/u3J?LWiVqda>M5Oa^-Doj<2(]jmZ*fu*e^I5FO5r;!Jor"8%OV&Ye>V,;`g
%;Vp>IWPHDYcJ5*p-q$>'csuj;>g2Qo?Hi!]&6tdU_0+@Zhe^qoH%COkG^#*"$h\RJY9&Xe>*J\cD'5I13[6PU)28aZ)I/D.I9-ZT
%a_C'!Z]D:Gl-f(=J:CZ_BU_8Sm4@PAX!\Z7>XZjO`'4/b%a)3opWUa8#$`_*n>_^Hfd]3o8?heod3cB^bZs<]A#_4PWom*qg,3qC
%D7)4?PCS>8DF1]J;`Tq32kd)Y'il9NR`)40NM3HL3\ge$mS%ql1bjstG;%CC?EM$9qZXj[:J$uAbgq.n=Ls\9Z/4';?jYK:@_O55
%f[UPd9C6,1Dbei?q(Aph/O?nA\BFj=:]+@aXt?JGUL=K"=\urJH>Mns`['NDXG'F/?=Q[GBJa/<egHT'o*.j+rR7c/nT^45qIEfb
%jj(s,2E[X?d?og(BNAun]+^WacD0*oRr1qiKMWi,bRj2B>OW-W_UF`*bqU+c\GuPN;Jne.1$M(&=Bf<`\a?BtAU]ujh7$8tbk^NM
%d8he)!&O8DBkO3p&7>rOW<'pXJD-I6Z'`\7A'eO`[VlhQE<A-S2kI>/\qC9e=rgPpPC_4)&udf%Tm$b!-Tel?I=L$E/318gT!QC2
%-tAS(\Wtpor8R"H]nWIE*R"<@XnV)%?o%#rqK>F3)F8W1\>bscA[3]'oZ<(F<A"T+9KW9oGS+37S)&Hb,"ch%N*F7YL00)`J4O:i
%HV0JOa_84_',B:8.>K]\+j81uQTfaIT=R,'M/E0tW4>m;6K"qK:u(<;CCT&&"oGEWcU,&bbeo@1UN`Pq(!VCqrbN[n@*T=mlorj?
%2j$G!<!U\5U82>)lX&iNP<uQJP"#KDlq-M4l_rhs'0"^#OF`qa]@`39/,]mJNm/rkCqB6pLof2H#M*;&EH>YXCgMS!ZdnkKqga?l
%2m>#F"n+=#&i])HR4TESGWfGi,NcViS?N#qWqXnZg3Wbn:)d3?<?Z=+9Nd\FUR9e@*E2S<OTdlt)2OncSL(q+[slt-+s6G-C%mPd
%':aUN4\FV8Ttt%U@qYU%%@o^fM[8hlfRXfWn`r-QFu74_/.Pd-CC+1/P\PA7ka)nH.eX&MW3]R6<ZB2VDnEuCg#3N$$e+g8n#XN?
%'*?at]dhM4DNIs9i'FAX.g+&tBp7X6Oh>l.]r6UdL\9C?]k!P\55YtH65<PbaW93kTH*[m9Qt<#hS!eA]Pa4ton1`M`ONW=[0?^j
%XiuQ3a/(-eq?Zp0h<@^=EPn_.LNR%OaGZ:+IiQDgl3Rcckf&c*H;fZ(,lsgNC_'V1a80JFlhot4m)*,B0V7r4kTjKbn<UiX$2g68
%jnL]E;#6*YU:F@leq3tU7K.PTPphI\TB&Xco/#',c1H'?onmcGNY!C#PA<V@qH(o1=Qaho,904#]pYs`0!!5-aM7:OD,l=)P6G9(
%$q>JkF%7>1B0&'_6-U)np0L-Fr!?Nr/qNADCh?M<l6i,eHN@[+nZ_>uq52)"TW1se#ObR%f>2_*dY4l1hNcP:hn5RiNn]Td>3[uR
%$OC^\TUGf!-h:.sHcaj#INR2YnUB7olt'+=l+L/(2,;!-ing9?b&BiG\BF@>.LC&Q,u]ske5dBql#+?#hGWZSObBC7FL[#9SnC:S
%;e^)seHJd6K+1;*Z\[_]Mb@f,KtFZ3Pq6#qkZ:3a-FE;/)P*Rrip:.iT[T]D3(^U6??oLZkIeF(?E77^Y&1O!_.CO>dp.U`Km\fM
%`D:'untXmSo?B.D96%2L)m)+b(_OYC3T:n'f&a,CYEU%aQhsugT&Ct0XFFH_g7h2JWm*gA3Laq5NmWuKq2_>KYOhb<;lId'^=aeb
%`?$'P_+2^)V-4O*Zkaa;.;hj*H,,\H1@oH49%hY\nX"^N?9),6Q(Q-s4=m@A_21[m.1HYt=7[^#frUpVCA8KKGo*[3r)_T'iDb-(
%>EE?'c!FgQ1`YjYjbUXt:ObkKkq<-<lYsNL7G`AP>q?pt@1Qn$`3skD+[rHEU"J2eY)jiF-pG=FM?Hhb$`c=.P[f(4JHW7j96p`>
%SOU-@ISKh8hSn&S1#>Qk6W/oi;n7*ZRp8.+HL`$@<=7s$oZ>L3;`(>S991]Xf5k##:'Vd7MO9+"k,E&2WKp62_agcI4M2Y,0=%2*
%6u>;Mn0!6X]oQa('VZ)'DifGh9ciKtS-%9XUNn%pZ+VYR1tjT<"i@NZG&R"uj:>B$9>AQrUGd\4]]b7tR;8c+ouRr`qH:PfOs7lO
%QeWmA^"Y-X:ABElW,*hAfM[`ZN\4=FFus/pU!`/\U35'p\V=X=Ldc3,=.#oQjVtMG),m+$3ODh#Vc89@7DuSmE?oAZ@1PI*HZGA,
%hth[e(ctlo>o<l6R2>JC:(lPN]h/@$]mMfp$h)5p2)H1<%bk\#@aAo4,Xu3m->VL_QP6eefl3n"bQEJ?TmMUpP9l6D`aJ$@.[Un<
%$^niTg)Tm7A3&C;A;PdAT:Akq6R"S"l_(e<X8!Fk^eb"fn%$=-!')c-2g1]_VIS'B/6hnJ?;;eG,9F17qsuRYXN:]"p>![lJ`lZX
%a:PL0)VLh,]Yb<sh7>:MPh?X0[T/Q;Ncd@6_dG^BL<KO]#!9o>Y[]<lmj1PL+DOE`D./O5'H_>J?6M6iLKg,E4O8+'/i;RcdN_ZJ
%nB4I)<fr2Gmrd0IB9R>6roen,7Ccd;ZiQ:D5k/@aAGk,]a@MmZg%7YYf3u_7J)@=RJ)8I0^Ll:]-4]5WnJ>b-pc-$NDZ0+AZ16jo
%jLdtL'lWlgI.W#riR)]%>2&ss3Nicp%_YDT/ar>CXX-V^jOddaV.6QOVqatYA=Z%hH"J(f7R!S]F/O-.QnZhbL`k/P1nhoSE\LjU
%bX).YLUkV;1$Wh+Ua'\A1oQ(n`I0!59i#?CRKDbE>h$9cY?'!S'l<4nbo:bj#stf;^EW$kR"WH_P"Q8?;KW>AITp7t9po(B/CH@M
%76JVNP"8SnL'pC6^1ogBVb?FM02R%>,SS@H)bH6;R:WY5]T6)jQ2MnQ3Vof26Q(#RHpXH8Ha:8pM1uhmLA<<7\9AfZ2p?%f`30gc
%Vf0+eI<nS[>eoMcqsrJ(DjZ8CcFRA,+!tI'2cJ'=2(&g2)5*l`ZI)<O;Dd^2;8:b@1YN1l[iDYNY9'iU\SRdAQCcKtNFP+tg2#Bb
%s&0GE.iXhhe%IP4l+ZL?=Xm!E^6%MEHE2?BVdJ6K=hg;kLs>D;lJ<iO?&@.OM,@2N[.N%9@<Z/NZp]taB3`XRX$FGL25`Slg5>U,
%/N3![+).#$<@YC.<[9W7\4_?fq:iS\^M7KC=mT!n'qq[Nn_.$M3kKQR9P0sT5%!:aV^Ss`X)+Cc81Dd,<S$mP0pR2TCh-3=*FYDM
%:eDfkBtlE2DOA;!=HMak$JFu.'<?t"78t%H+U+;YXKnabCI(NL0,a;^/lhVQZQ+m'@8Z**ALG$FV.e2;V4KO-bm!9OUCH+(<FGdE
%T;HER:io_0nQ<)>2ru88RcR+F^_*K0A[RTYq&G4qZQ4-AlcLgKUOp^r097$u%kOTG;i2YC"*VoGEYPg_Bt77@FmO7\$^Y("j)6PH
%"U]sc_Vfu*TSM:U&mXm,Bh^.&lgon4(i"`MTm<JgP:HD"ruV-qggjL4>58p\`s[@QH)uaB#ke;8jeP3Zg!f(6<"E.'>V,*_`5&Hu
%<C:H;.madG\&4ntqEY`"2bV+UD*3ULM=KNuJ:&/55`I#U3$E'-ag%35*0X?`j]e+kK&KKRd>Kt3PQ*u1EKh5hCk4`;0-lJG'b]L;
%`6bp(-q]]Oh%Ft`E]H&DhdA@;-q4Ra\WksEiVQ.sN0,J6BEJa.H*YVg\ma;C(ELo$i2XktUPH*&%<^_Ciu&,<1T4V;;"gG99c4<O
%U(PJQ](PDLcUSEf4bc>]*n.TKr(YY*eQ-u\GV6g#pp=pZV]X6.5rgGK?6jL'%8Gs=1QbrRh%p)'%T[C"6%(/LpTMaJ6\Bj9"gsaJ
%]^a9K<4Y%().hmb]I+L9,'7R[pjl5:^p0?LH&h:\Y]Kop+$pu.IdQM(]-((#k4TitqYBC=>u29D+:'u4N_#,n2sZLtD(Ol+KiVmC
%JnVD3&/prH!q/=([X\HT33o*?l!0<-W:=7RY:[fOEYXoRLq2an0r/?k--BR[<*%S$_"-1<3VIc#([b,.\8;3ulO?b6%YOtlLV)il
%CRgk_3bB*5Wi+.WDN-d\.=6m?$Z\)T$d<mdmE2,9l7l`&LYimS`GYBK*pdP/=;5X%#![GtN!mcWGJ<,Ygm-'b7@4ePAl7a`QsB`i
%B.W$>fKYg`(a!lYhm9J0r?_@?r_d+'&g-=qiV%UL)-FYP^^P\@g<TOh*LDjpDZYl)s#@Ofr3##?<N:u444d%)h)-nQ[81JZ[<M68
%*`Z)(0%uDr1R_TKb$FH&A=HbmD.11(ls%Ds.,2iW@LJ/+;^0>cMdPUT@W1kA#Cbf*n,>/jU'5\V8,8Vs\-U/<b,pm.dn/eE)Y@hK
%jlOj9=hmuc!`f&nX7e2M$ku01cq!^0)Gdoa,a[rc+j89:LT1-U3P`D=BHGjbs'c@NYMNSoYLh_Ke1,gd*`=4;$[gEr_FR%NWE[`^
%.eORiD_`+:JF[+CR+)bpj)V!WF*L9WncDK18WIYia].b`8^CP`>kZB"J2`>gf-U_(<sG%+&tbX!9HI?7]QLD:kuDs+n\&V1DZ#OI
%/e$1/,+sdSR_$9jNR0K[m]Q]_/?j\W;o@honh"N`Uod_q"M8FM;P+7&ba=ccfW;3R`*,9p^.%[B\hhuC.BP-To90pAoHjC"K@(rY
%)C'WHR]WX:gge-Rf4pS':"nq^^:UN)qe.:GG'9&Qd0sf$Ddb>*Jg4Ieo[[=4P(0!ZXbmSqZoEo&L1#+m8F"<9H]B+2'1?p>-@Q;5
%5Q*K`ca]H`$'%(WddqF!A?1P-)F*TbMN?9AY&V#ms'=\ch@W!*e+groWM*=^38a-`B4pI'e(^nq>>uoUK5>ZG%?h)"<G%:d!j]#h
%8#@bP)qI<ZUr0/!Wd["##gMctgi)`JGQe#5KMq3'jX#BG+t)]6)W:/:2Fe09P6LZ2fl"=T%]("daF[c'&gcX5W^0V]]NQ<_%&%oT
%KmaP^AofcfKZh)Vln6+JjA)l+/MPulf+%ZPHCBY:'`e&&eHO9p!JFDY[udGL9H%T6XbQMX`OPm1\mX)QaXf<C"==06[9<6m_g!W4
%l>;,[H^fVk,,-W`LfXCTkf?Jr*Nnb_HSuo+oZQ8.KBb5E%)W7ur"Ch(nF[cU6h@M<:I3,V:h*,sbq>Hm824K*?%&G:QF9),Tq8FV
%;*rI$`Y0dJ=HRN[q@5Ck]sajq2;1pf449-6.Po7@DUlW5@O5.$glX!U9'2&[)G:OTf^=pLnh(Qu,&E!k%'a@nIgj-F)#iMJg:g'9
%rO_>cr\T\qU@b2E9&?Af*aXkmne_JG92hocpn!;:kSDl%>D/X0NKN;1(mGm0WJG%W&`(o/CYq%HZtC"RXR?"5='fo,jCM;qG#XI-
%*0n@YOC`rI5W+sr7;XJ\(Nhh'im<VgN(6l;Y<#/N/u9gT8'*[Q!sBUi*Bd_E]S`b9PT2X7hYrFH>++J&\eqrnmfosqH7%S"lBnGm
%g'Xm]aiES"mmh%d$[R?f6tm-S6,bg[RgFC)Klpt7KA0\FiO.qI^##1ip+DFh"gO4%7-OSH46$)$*Z9AQLO4VniVDc:FTHseC["+L
%o?C<B5Rpp'U5\l))pZ[DSg2P.k=C'Zq/%DNDgX6eeXl2cf^&"k"oEMQrc_S`d<n<mJc$he2Od.lpAF-QU@G":N0DG[cX[]]gm6FJ
%,Os8Cf\9FC4G6ToGkQTqRJW;[b@md%?/EJNs6nLtm-RP8%Ll-\_T`=\Atuf_7e-S+9G$*Pk*stBk?2!l/DE4.elAKGjR`K.d\s8M
%RbfB[l>9hUKA:N7A/7es?pX*7_C?bf2]]f:"4tW?/oeaoJhk_[D3[:;dubu.9Q`)Tk$+m4U'"$9a%^(YN'lf$"j=B*=_BdkOdR(I
%?QC^jM9c1U)TA;1TKS"<A;AdRG15T`4+k>'Q0ZH@B%Gqo4RPhig:Mi6X4N71V_u(/PWWQ@(u)3u7(WQ0/K)Y+S=lIBAX22E;%'[7
%%Ri-G>XR>#^jD]IL/;u^22U@D\8D+Ia,\W7\<7Zt==W^DOY:PTI3(kt,"a:(r_UeE6S2b/T'Q1+Z8N%%JL!*[UA_B[=$l34A1a2Q
%BWCZQ$L_!-!5Gq=MjWJ@8[^rh@h`GoX!iL(WJSZl?F]0#X1;I+=Xc*ISXBo2X[G=D_s\`UJI8b$^@(\9.50tqpZTn=j!&krICfUD
%"Xq-'b^*HRX:]m''q4p\RWL>WeuUp#aeIX[hK$im\shBBZS[m]6jUHN)Fp+2i`hsild:KL+bim.J(a#+SM52&Gna/L0'I^oe03t]
%<Js%tNSD;reQh9hHNVag>k\76T(\n5q6[ngQ9qF8^Oa+PfDF5&Y/Nbc]Lp0&<jZ1ciDJ;SYs-aoP2fRPk#=9G0D!)`R_WmYQ@ahk
%W6N::6s[t$F,Qq%dW??E2)X/9Cp3i+"YP8*'<M8ZJf3$aknVs:NRKHo)$c/kM5kl:GV>otBf=\_oTU$a5_n/H5*F;c'(,[$^6R&"
%q8f[f_;5h7^>c";G_%Mah>%HIb8#!.H.boD1B.9r5bqE!W0Q_5@8)pnp0@>[0s:Xr:s1VrHeB:uW#nTuCJCu)W:@RY'J%e.XN%Eo
%<,%Z!X0'glLg95>m"JS]!pdIW4V=QJ^+YshhBcm\e5R0YISTHDs'YDi7$krc1T!saf(#*jEW<>K>=kL6CR(R?Y"gDp`\!PPKd/k/
%o;K#*5<*LC9/U:*=a]qq:NAl1:fS.i3@DUikIRE6FoCIDQ1%GQb*j25.drtM.&nmaosDDOQLta^7P?RQn?!DBI9>ojo&j63h5;b!
%IUk?1&`2+2dZ7"hBh_#@Zh"!aL4`H:f)QSRO-KTZOL/2@'o@12j;nU]C(bk:<aHg,oHfRuOlC/n47_/42csV84?`\e>1=`?X8r*m
%.U?'/8IN>%7(+DmU=6@ZXmOr,E1>TWLYWth5*l/I3>J?%W[`jqk,S`+>Mj7Wppi:\'JB6I[&17\Ll;u]SOY?1hBf?n.eAZp5"cG:
%[BHndUq%ljP!6BE6l>(W,!c%0(qQ#Jje>e$$D^0._dJ.Dm=3lT`Do"3Q2+P]YRB+?aK'!&U7f-j.X2A%_''3VAbk&JVDF!LE/[61
%RY9hol>?G7fs`_D0e7\q'Durjqq[V<'#en*N[gp[5a(5Ak*I?VB6]P%AToUi71Uu5R*!&,Tf<Sq&lBmnT!#23@r+?ZESZNY:s$07
%;jL([2MdA*#Oeo'Lb<9Rf-SH_1j^mAUX(r<?+_qJP8_h_EUlE]W>:t1Wq2k`fP^dWq-`E:ON$AuSTP$EbnE*DiEFDuX(9cfGCu@'
%H%\ktd.*SP"R_)?5E!ZlNYuHq1*&^i9t.uW.jQA-45QEsX!E0MKCifd-#Q&4in#`:8>*@OZC&g=cE6Y0C%JR95k6aO%0Bk5pgQS@
%)JLSZC'&j8i#D,`bU867hq?ATT^MP_\JN_R17E)h$f-S0Ig]s2Val3;%Y8S$D@n6[K4qG=]a:@hh#1T/SOqX23F31Dcp7h,A`p`3
%leEJAV@c=U`$GlYkbF&K-@*?o^LZ*9f@h2G5LiA2p7IHUTC&lTKNW1:<Rd@df:Ao7V:%7,9ack(!+ufUBbJlOqq(_s"Lt,CZ(8Us
%mbF0ofU['p9n&pJpZe9<XUhg;4-f>%4(T=?=0Xj\[OT\,NS85+Y?p\j/:e`if(sr.a!u^4_V>97bG=6Fr9Ps1]873M$#Q8uHVX+W
%)#Xi9Y.esh&'8AjWWp:sUXEuKZfl"R)gdPe$OTdGS#0jieYLUiPEB*BIMm/e0ICZbjRDmV:M;i%T"XF+eQ-8tFu<AR<LD/-fM[,X
%AlSZoioV)5mZsa)R=+p!kD,#L0./!QSmc6VAhVhm1nZ4jV/_K&gj9o4R3H:fRQ(OLP+qoBbK[[PmH5RfHl0LR#o.$\A::8P9;530
%e"87DG=eCs,(+^>`gK#We\Q@dT&MZpi](+V<\-ESi3I"GdGfd/9Rhbk97'Pac(6Ajs6RbU#:CHIkl4A>B<3A<C49B@VK'&Z7j*4\
%s#3KFs2c+-94u8R#PS`5mq\9><r(Mt4)tF=1)WT.he^08*oX?_X4ml2Sod5=Vt;D10;@tGS61sB?hAMf".?)9C[*a!Ujb_HNKU9%
%qm_q-`u<orm9N\kln.gQVe'85s/K07IaE,DcJOf2EED.'h,1FD;M.`fBh5G]=2mCC@/bLS.2PkU2mk_N?.T.jl;8q-fF8-=YC&FO
%rpn39C?n4?)0W9N<YQshA@1^%O\72-Q7ErH4ZcGpLb$@sEh(555*u;.YfR^>*K-I_YJ!o9h\RS^J^-*I,U^jcB=L?'mq8KeHgCWu
%Jn&P5A\f9QP*[m(nH@\sS!WIT2@fN=<QauULaaC^[FC;^+$A>)jJs,U"2%9nKtNpM4^s(pC*_Jmj](SH5ZsJJ<,mOb#[1JeOZm@C
%B"f$spXph\)Q.Pg_"PfMq2u4dVPf4>Yc]$c_g>ci]@s+%(91V3(NdUK,Y+oMdt!m9MphTAqAu0>;*M!?70V6iXcflo#!q.dl8VC[
%l_bYRb0U]=la6NcGj6iC&9QLhH^FL40E-Ir5C`X4k<J^=IgF<okPtMP=-1Fo^Bujtr:OuYN;858PVL?O@E-XI6(IJOEX$4T/>#9J
%H\.;FNU*cr"Dcf-fGN8.ePg-k:+ui1jodJbA+&Xci7Q(Z(iddbEQBl8a"bWI$H&NH(6>5NT@Mu+@i#[9Na4dT4D++CnsItFcsmi@
%%"%pOjM)'dk**^H@ht-BO1gRkpg\7$-ihr>UBkBG%muG(AO\DqX;qKgZV?CROBF^V6Y?!F%b[t4*/L\1R6Vs3gLd,"T&?AGAF8m\
%^rZ0Zj(RL7_(XcgI_Us'OhI2>J7KaU)+:c+iX@*#'?jjIlU;]q-*qt+Q)qZkJ0hO[9];/jL*hGmXIhg+F+PiSZCC=l2OP4PJWmJb
%'BiuX:Vi7&J.q_=nt:^<b2kUA,Et4)'LZ*=B*+jPqAGC#*ng`hq,ooa;eGh6:7:cR5\3^[@AIp-r9<*k.f6&SYf^:;ENlbCA-/mW
%qAHfKcdWe<g"0X:YZub(3+CPm@2Q:d1bjVcY*`T2[-Wf8JQgVKbeTMR`b086>/^g+Z=\A%\SNU%!kN2GD[*hT@l+9oeh`d]06;^o
%pp.Wu%"?l/e-(;)msH+kCih?5@5_5X_(\qI1_*tQc5K2-]DR"0B)ghb3+bB;"(_D3T_7bD10;gb$t],jc=!&g%VNT$D?f-7AiI%&
%34#+M%%b$-o5R$:V$4mOc2&UtOCip7),.@aQiK"qqN%;<h]Me&XLUMWMJKBVj1o8FbQP6)^h3l*>`RZ#[b8-"!o2QE#fGk<I>nPX
%F.(^$I'`LG$%T@-]GZCo?_nE++O6Qd#33o6VEiFu?j>`:$)V+UFUa(FcC3DmTX/6R#3i5(2?S*1E&rVo2Occ1G4nq+5s'FF0t=RX
%qY0L)rkip[cQ8]D4I^_iJNOmFb[@$%OiB]5\n*[rB2:2`HT(aaJU;S=#k5CagJR%<b@dKoVX5b8c`E`=5O21mTV"+<'C]Y`,9Olh
%f7uQnJ1bbN*!'?]`]++T>;Lh]p<f6.62PV]US.Lb0ar^&0BF;d](UeC+LGA$$kg-0`BboZX2hKlT>+-QTrT:sN.rsS3"1RcrV,g.
%)YWV#U<DPW,GNBE(kkBDo1WPd9o_ntU+8kqNf("'AK2J&pbIDYrqpmK(iAIjK8epq;p]2Q0SPMK">etLf2&'7lN[j9US%4#ph3DV
%%Zk;q'LJ6%9L5I7_$if%ohuuI:,%BbjodIol-E]aERL@b$7O.*VNB5ri1j-5rn.fjV>Y!>?tn4gTV]?/1N7&HmL3FUa)`4SmIG88
%Zu=PUAD5jJ*&Gk1):5a;is][k'266>h;2d`e(U..i3_W`*'*EW$0X53B<]k](DG_@s8EFQg<2\]T@U`:j/:)-N!$$7s+V-8DUfC3
%C=Z0gW*0*_&2hMCMk]neAmj,Y?kc,Ug*n.%-^[4u5:;hN;L="8/2bU`^soM/7oQaA##<G>.6KI8QiU0mIL8s>$"b=1S6u\&rL@7&
%<:0N"<&H%jJlQlD.9s8.QiL1!IKis"#sJd"mN;E>[^s3,34RZUbb2""_$n!1k@4^'m0RA)eir(L#]!eq)2L-tR))n:c-1^>h'co4
%esp+PB'iV`K<s.[bQ+cQFYcR(D=n=eg(R.fX][jl[as=R7pG:tc+pH(p1EgFqPW3O>jM*4%rpu$bWr=RaCd3Y`WJ#iC\&E"W,)!Q
%1U(Y)nep5*V0p=7f1)#]aD8]I)<eIUR)!#IekUb!/*f9W^95-*0`8M#?DI;]14eHcCu'UJ"Eo&W_[pY8cX<t[56\pd">_HBf+5d'
%C\8e[gXQs&CtHuUYrTW7'O/%p!fQI+3s!@P#G"+il[[6qZ*h8$G\f1j1Os:?]/,7Z2t;qqZ>J%f*[]WkQiUdM$%@`R/h?T<=EZ!:
%7rd3nO+r5=hMW7^Fu^;4cto&p@'e)k%th2Ga2@--H5"<Vg")KZn_'eK7fh=iU;I7R4m?C2G3qJG(i:La;384`djRi#'"h^.D.DF`
%iO&JP5604,.h*`2.gR/JCA3\c&6?CZ+i_=O7Y8NkD6)*[E,Asn@D'&;q^>jaH8W\RgBN\UODRY4j-X[6aYTT,/]8'4>8&prgXa<g
%i3kN5'>X!U-cV;'3[ur4m='Xo@(4;_qA=IhQ\5UjgN_NfnEjla'RlPE1B;;ecNJjSGOV@=mcp>;(l%qZf-q7i]u*bsma#5f@GIKi
%cJZ5"Un%L+qq#JBh#.-^6b,F2rB%7=I!?"BbmA"/h#=Yu3-QGO(rgVY(GQ$Ujq:?1\j(\8JTS5E#1NPHlQ>peY>>2fO+7)V+$5nb
%'diD,@!A)GR%\`9;gjnfX[=s5n?.)k0Z2XnI>6b[rG2<i^u"2-Igk^]R;3#pmDYX3H[@,Q!8dte1PkMg?eiC^rUq<sb5M>;Fcu[)
%fplH"fDNK>rVQ3<3W=6I_Mo5E^OL0PJhK>QoWLdh/>$7@g@N)Zp"t:kbP(7(CH9dln8P",o5M%@O<dS1KHB,c6=W"`5(25.C&65a
%[,e"5YSd.2!QJ%jNa_tIYQ#lnr3,YPJ)aa^r]9j<lNH8*eB@hU?=?@\MgR+FpN_;g:kuN(_Tl#q*/f<mYn427iX48AV#!6EEG5q*
%COJ#^234=!?eA5=5quHn[;>q+#1DaVdGat",E3c!SQP^LQiA#6jEj+sraG_;ed9?GBUrQ/VuH7Yrqr,_p-1a5prEDWs8&Afpj`89
%GQ7C65C`M"*;KHHs6cM.s*stBGQ7XAq>Hq8rMtGEkMQ7"pRcp/a$9Rf?[h`&^]/eUJ,8e5J,]C2s3%&6r;0:ir."b2s5OBCh?uMs
%rm1W!s75J_rVu?C]Uf~>
%AI9_PrivateDataEnd
